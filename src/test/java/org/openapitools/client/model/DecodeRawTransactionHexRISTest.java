/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DecodeRawTransactionHexRISB;
import org.openapitools.client.model.DecodeRawTransactionHexRISB2;
import org.openapitools.client.model.DecodeRawTransactionHexRISB22;
import org.openapitools.client.model.DecodeRawTransactionHexRISD;
import org.openapitools.client.model.DecodeRawTransactionHexRISD2;
import org.openapitools.client.model.DecodeRawTransactionHexRISE;
import org.openapitools.client.model.DecodeRawTransactionHexRISE2;
import org.openapitools.client.model.DecodeRawTransactionHexRISL;
import org.openapitools.client.model.DecodeRawTransactionHexRISZ;
import org.openapitools.client.model.DecodeRawTransactionHexRISZVinInner;
import org.openapitools.client.model.DecodeRawTransactionHexRISZVoutInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for DecodeRawTransactionHexRIS
 */
public class DecodeRawTransactionHexRISTest {
    private final DecodeRawTransactionHexRIS model = new DecodeRawTransactionHexRIS();

    /**
     * Model tests for DecodeRawTransactionHexRIS
     */
    @Test
    public void testDecodeRawTransactionHexRIS() {
        // TODO: test DecodeRawTransactionHexRIS
    }

    /**
     * Test the property 'locktime'
     */
    @Test
    public void locktimeTest() {
        // TODO: test locktime
    }

    /**
     * Test the property 'transactionHash'
     */
    @Test
    public void transactionHashTest() {
        // TODO: test transactionHash
    }

    /**
     * Test the property 'vSize'
     */
    @Test
    public void vSizeTest() {
        // TODO: test vSize
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'vin'
     */
    @Test
    public void vinTest() {
        // TODO: test vin
    }

    /**
     * Test the property 'vout'
     */
    @Test
    public void voutTest() {
        // TODO: test vout
    }

    /**
     * Test the property 'weight'
     */
    @Test
    public void weightTest() {
        // TODO: test weight
    }

    /**
     * Test the property 'approximateFee'
     */
    @Test
    public void approximateFeeTest() {
        // TODO: test approximateFee
    }

    /**
     * Test the property 'approximateMinimumRequiredFee'
     */
    @Test
    public void approximateMinimumRequiredFeeTest() {
        // TODO: test approximateMinimumRequiredFee
    }

    /**
     * Test the property 'gasLimit'
     */
    @Test
    public void gasLimitTest() {
        // TODO: test gasLimit
    }

    /**
     * Test the property 'gasPaidForData'
     */
    @Test
    public void gasPaidForDataTest() {
        // TODO: test gasPaidForData
    }

    /**
     * Test the property 'gasPrice'
     */
    @Test
    public void gasPriceTest() {
        // TODO: test gasPrice
    }

    /**
     * Test the property 'inputData'
     */
    @Test
    public void inputDataTest() {
        // TODO: test inputData
    }

    /**
     * Test the property 'maxFeePerGas'
     */
    @Test
    public void maxFeePerGasTest() {
        // TODO: test maxFeePerGas
    }

    /**
     * Test the property 'maxFeePriorityPerGas'
     */
    @Test
    public void maxFeePriorityPerGasTest() {
        // TODO: test maxFeePriorityPerGas
    }

    /**
     * Test the property 'nonce'
     */
    @Test
    public void nonceTest() {
        // TODO: test nonce
    }

    /**
     * Test the property 'r'
     */
    @Test
    public void rTest() {
        // TODO: test r
    }

    /**
     * Test the property 'recipient'
     */
    @Test
    public void recipientTest() {
        // TODO: test recipient
    }

    /**
     * Test the property 's'
     */
    @Test
    public void sTest() {
        // TODO: test s
    }

    /**
     * Test the property 'sender'
     */
    @Test
    public void senderTest() {
        // TODO: test sender
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'v'
     */
    @Test
    public void vTest() {
        // TODO: test v
    }

    /**
     * Test the property 'value'
     */
    @Test
    public void valueTest() {
        // TODO: test value
    }

    /**
     * Test the property 'expiryHeight'
     */
    @Test
    public void expiryHeightTest() {
        // TODO: test expiryHeight
    }

    /**
     * Test the property 'overwintered'
     */
    @Test
    public void overwinteredTest() {
        // TODO: test overwintered
    }

    /**
     * Test the property 'saplinged'
     */
    @Test
    public void saplingedTest() {
        // TODO: test saplinged
    }

    /**
     * Test the property 'valueBalance'
     */
    @Test
    public void valueBalanceTest() {
        // TODO: test valueBalance
    }

    /**
     * Test the property 'versionGroupId'
     */
    @Test
    public void versionGroupIdTest() {
        // TODO: test versionGroupId
    }

}
