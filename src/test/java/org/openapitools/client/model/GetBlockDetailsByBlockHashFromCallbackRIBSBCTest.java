/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for GetBlockDetailsByBlockHashFromCallbackRIBSBC
 */
public class GetBlockDetailsByBlockHashFromCallbackRIBSBCTest {
    private final GetBlockDetailsByBlockHashFromCallbackRIBSBC model = new GetBlockDetailsByBlockHashFromCallbackRIBSBC();

    /**
     * Model tests for GetBlockDetailsByBlockHashFromCallbackRIBSBC
     */
    @Test
    public void testGetBlockDetailsByBlockHashFromCallbackRIBSBC() {
        // TODO: test GetBlockDetailsByBlockHashFromCallbackRIBSBC
    }

    /**
     * Test the property 'bits'
     */
    @Test
    public void bitsTest() {
        // TODO: test bits
    }

    /**
     * Test the property 'chainwork'
     */
    @Test
    public void chainworkTest() {
        // TODO: test chainwork
    }

    /**
     * Test the property 'difficulty'
     */
    @Test
    public void difficultyTest() {
        // TODO: test difficulty
    }

    /**
     * Test the property 'merkleRoot'
     */
    @Test
    public void merkleRootTest() {
        // TODO: test merkleRoot
    }

    /**
     * Test the property 'nonce'
     */
    @Test
    public void nonceTest() {
        // TODO: test nonce
    }

    /**
     * Test the property 'size'
     */
    @Test
    public void sizeTest() {
        // TODO: test size
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'versionHex'
     */
    @Test
    public void versionHexTest() {
        // TODO: test versionHex
    }

}
