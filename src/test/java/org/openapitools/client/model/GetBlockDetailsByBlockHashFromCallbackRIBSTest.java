/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSB;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSBC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSBSC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSD;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSD2;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSE;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSEC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSL;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSX;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSZ;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSZ2;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalCoins;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalFees;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for GetBlockDetailsByBlockHashFromCallbackRIBS
 */
public class GetBlockDetailsByBlockHashFromCallbackRIBSTest {
    private final GetBlockDetailsByBlockHashFromCallbackRIBS model = new GetBlockDetailsByBlockHashFromCallbackRIBS();

    /**
     * Model tests for GetBlockDetailsByBlockHashFromCallbackRIBS
     */
    @Test
    public void testGetBlockDetailsByBlockHashFromCallbackRIBS() {
        // TODO: test GetBlockDetailsByBlockHashFromCallbackRIBS
    }

    /**
     * Test the property 'bits'
     */
    @Test
    public void bitsTest() {
        // TODO: test bits
    }

    /**
     * Test the property 'chainwork'
     */
    @Test
    public void chainworkTest() {
        // TODO: test chainwork
    }

    /**
     * Test the property 'difficulty'
     */
    @Test
    public void difficultyTest() {
        // TODO: test difficulty
    }

    /**
     * Test the property 'merkleRoot'
     */
    @Test
    public void merkleRootTest() {
        // TODO: test merkleRoot
    }

    /**
     * Test the property 'nonce'
     */
    @Test
    public void nonceTest() {
        // TODO: test nonce
    }

    /**
     * Test the property 'size'
     */
    @Test
    public void sizeTest() {
        // TODO: test size
    }

    /**
     * Test the property 'strippedSize'
     */
    @Test
    public void strippedSizeTest() {
        // TODO: test strippedSize
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'versionHex'
     */
    @Test
    public void versionHexTest() {
        // TODO: test versionHex
    }

    /**
     * Test the property 'weight'
     */
    @Test
    public void weightTest() {
        // TODO: test weight
    }

    /**
     * Test the property 'strippedsize'
     */
    @Test
    public void strippedsizeTest() {
        // TODO: test strippedsize
    }

    /**
     * Test the property 'extraData'
     */
    @Test
    public void extraDataTest() {
        // TODO: test extraData
    }

    /**
     * Test the property 'gasLimit'
     */
    @Test
    public void gasLimitTest() {
        // TODO: test gasLimit
    }

    /**
     * Test the property 'gasUsed'
     */
    @Test
    public void gasUsedTest() {
        // TODO: test gasUsed
    }

    /**
     * Test the property 'minedInSeconds'
     */
    @Test
    public void minedInSecondsTest() {
        // TODO: test minedInSeconds
    }

    /**
     * Test the property 'sha3Uncles'
     */
    @Test
    public void sha3UnclesTest() {
        // TODO: test sha3Uncles
    }

    /**
     * Test the property 'totalDifficulty'
     */
    @Test
    public void totalDifficultyTest() {
        // TODO: test totalDifficulty
    }

    /**
     * Test the property 'uncles'
     */
    @Test
    public void unclesTest() {
        // TODO: test uncles
    }

    /**
     * Test the property 'dsBlock'
     */
    @Test
    public void dsBlockTest() {
        // TODO: test dsBlock
    }

    /**
     * Test the property 'dsDifficulty'
     */
    @Test
    public void dsDifficultyTest() {
        // TODO: test dsDifficulty
    }

    /**
     * Test the property 'dsLeader'
     */
    @Test
    public void dsLeaderTest() {
        // TODO: test dsLeader
    }

    /**
     * Test the property 'microBlocks'
     */
    @Test
    public void microBlocksTest() {
        // TODO: test microBlocks
    }

    /**
     * Test the property 'totalCoins'
     */
    @Test
    public void totalCoinsTest() {
        // TODO: test totalCoins
    }

    /**
     * Test the property 'totalFees'
     */
    @Test
    public void totalFeesTest() {
        // TODO: test totalFees
    }

}
