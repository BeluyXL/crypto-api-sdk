/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for DecodeRawTransactionHexRISE
 */
public class DecodeRawTransactionHexRISETest {
    private final DecodeRawTransactionHexRISE model = new DecodeRawTransactionHexRISE();

    /**
     * Model tests for DecodeRawTransactionHexRISE
     */
    @Test
    public void testDecodeRawTransactionHexRISE() {
        // TODO: test DecodeRawTransactionHexRISE
    }

    /**
     * Test the property 'approximateFee'
     */
    @Test
    public void approximateFeeTest() {
        // TODO: test approximateFee
    }

    /**
     * Test the property 'approximateMinimumRequiredFee'
     */
    @Test
    public void approximateMinimumRequiredFeeTest() {
        // TODO: test approximateMinimumRequiredFee
    }

    /**
     * Test the property 'gasLimit'
     */
    @Test
    public void gasLimitTest() {
        // TODO: test gasLimit
    }

    /**
     * Test the property 'gasPaidForData'
     */
    @Test
    public void gasPaidForDataTest() {
        // TODO: test gasPaidForData
    }

    /**
     * Test the property 'gasPrice'
     */
    @Test
    public void gasPriceTest() {
        // TODO: test gasPrice
    }

    /**
     * Test the property 'inputData'
     */
    @Test
    public void inputDataTest() {
        // TODO: test inputData
    }

    /**
     * Test the property 'maxFeePerGas'
     */
    @Test
    public void maxFeePerGasTest() {
        // TODO: test maxFeePerGas
    }

    /**
     * Test the property 'maxFeePriorityPerGas'
     */
    @Test
    public void maxFeePriorityPerGasTest() {
        // TODO: test maxFeePriorityPerGas
    }

    /**
     * Test the property 'nonce'
     */
    @Test
    public void nonceTest() {
        // TODO: test nonce
    }

    /**
     * Test the property 'r'
     */
    @Test
    public void rTest() {
        // TODO: test r
    }

    /**
     * Test the property 'recipient'
     */
    @Test
    public void recipientTest() {
        // TODO: test recipient
    }

    /**
     * Test the property 's'
     */
    @Test
    public void sTest() {
        // TODO: test s
    }

    /**
     * Test the property 'sender'
     */
    @Test
    public void senderTest() {
        // TODO: test sender
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'v'
     */
    @Test
    public void vTest() {
        // TODO: test v
    }

    /**
     * Test the property 'value'
     */
    @Test
    public void valueTest() {
        // TODO: test value
    }

}
