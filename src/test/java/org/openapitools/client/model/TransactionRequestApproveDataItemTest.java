/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for TransactionRequestApproveDataItem
 */
public class TransactionRequestApproveDataItemTest {
    private final TransactionRequestApproveDataItem model = new TransactionRequestApproveDataItem();

    /**
     * Model tests for TransactionRequestApproveDataItem
     */
    @Test
    public void testTransactionRequestApproveDataItem() {
        // TODO: test TransactionRequestApproveDataItem
    }

    /**
     * Test the property 'blockchain'
     */
    @Test
    public void blockchainTest() {
        // TODO: test blockchain
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'requiredApproves'
     */
    @Test
    public void requiredApprovesTest() {
        // TODO: test requiredApproves
    }

    /**
     * Test the property 'requiredRejects'
     */
    @Test
    public void requiredRejectsTest() {
        // TODO: test requiredRejects
    }

    /**
     * Test the property 'currentApproves'
     */
    @Test
    public void currentApprovesTest() {
        // TODO: test currentApproves
    }

    /**
     * Test the property 'currentRejects'
     */
    @Test
    public void currentRejectsTest() {
        // TODO: test currentRejects
    }

}
