/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.GetAddressDetails402Response;
import org.openapitools.client.model.GetAddressDetails409Response;
import org.openapitools.client.model.GetAddressDetails415Response;
import org.openapitools.client.model.GetAddressDetails422Response;
import org.openapitools.client.model.GetAddressDetails429Response;
import org.openapitools.client.model.GetAddressDetails500Response;
import org.openapitools.client.model.GetTokenDetailsByContractAddress400Response;
import org.openapitools.client.model.GetTokenDetailsByContractAddress401Response;
import org.openapitools.client.model.GetTokenDetailsByContractAddress403Response;
import org.openapitools.client.model.GetTokenDetailsByContractAddressR;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddress400Response;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddress401Response;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddress403Response;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddressR;
import org.openapitools.client.model.ListTokensByAddress400Response;
import org.openapitools.client.model.ListTokensByAddress401Response;
import org.openapitools.client.model.ListTokensByAddress403Response;
import org.openapitools.client.model.ListTokensByAddressR;
import org.openapitools.client.model.ListTokensTransfersByTransactionHash400Response;
import org.openapitools.client.model.ListTokensTransfersByTransactionHash401Response;
import org.openapitools.client.model.ListTokensTransfersByTransactionHash403Response;
import org.openapitools.client.model.ListTokensTransfersByTransactionHashR;
import org.openapitools.client.model.ListUnconfirmedTokensTransfersByAddress400Response;
import org.openapitools.client.model.ListUnconfirmedTokensTransfersByAddress401Response;
import org.openapitools.client.model.ListUnconfirmedTokensTransfersByAddress403Response;
import org.openapitools.client.model.ListUnconfirmedTokensTransfersByAddressR;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokensApi
 */
@Disabled
public class TokensApiTest {

    private final TokensApi api = new TokensApi();

    /**
     * Get Token Details by Contract Address
     *
     * Though this endpoint customers can obtain information about token details. This can be done by providing the &#x60;contact address&#x60; parameter.    {note}This address is **not** the same as the smart contract creator address.{/note}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenDetailsByContractAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String contractAddress = null;
        String context = null;
        GetTokenDetailsByContractAddressR response = api.getTokenDetailsByContractAddress(blockchain, network, contractAddress, context);
        // TODO: test validations
    }

    /**
     * List Confirmed Tokens Transfers By Address
     *
     * Through this endpoint customers can obtain a list with **confirmed** token transfers by the &#x60;address&#x60; attribute. Token transfers may include information such as addresses of the sender and recipient, token name, token symbol, etc.    {note}This refers only to transfers done for **confirmed tokens** not coins.{/note}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfirmedTokensTransfersByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListConfirmedTokensTransfersByAddressR response = api.listConfirmedTokensTransfersByAddress(blockchain, network, address, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Tokens By Address
     *
     * Through this endpoint customers can obtain token data by providing an attribute - &#x60;address&#x60;.  The information that can be returned can include the contract address, the token symbol, type and balance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokensByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListTokensByAddressR response = api.listTokensByAddress(blockchain, network, address, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Tokens Transfers By Transaction Hash
     *
     * Through this endpoint customers can obtain a list with token transfers by the &#x60;transactionHash&#x60; attribute. Token transfers may include information such as addresses of the sender and recipient, token name, token symbol, etc.    {note}This refers only to transfers done for **tokens** not coins.{/note}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokensTransfersByTransactionHashTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String transactionHash = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListTokensTransfersByTransactionHashR response = api.listTokensTransfersByTransactionHash(blockchain, network, transactionHash, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Unconfirmed Tokens Transfers By Address
     *
     * Through this endpoint customers can obtain a list with **unconfirmed** token transfers by the &#x60;address&#x60; attribute. Token transfers may include information such as addresses of the sender and recipient, token name, token symbol, etc.    {note}This refers only to transfers done for **unconfirmed tokens** not coins.{/note}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUnconfirmedTokensTransfersByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListUnconfirmedTokensTransfersByAddressR response = api.listUnconfirmedTokensTransfersByAddress(blockchain, network, address, context, limit, offset);
        // TODO: test validations
    }

}
