/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.FeatureMainnetsNotAllowedForPlan;
import org.openapitools.client.model.GetContractDetailsByAddressR;
import org.openapitools.client.model.InsufficientCredits;
import org.openapitools.client.model.InvalidApiKey;
import org.openapitools.client.model.InvalidData;
import org.openapitools.client.model.InvalidPagination;
import org.openapitools.client.model.InvalidRequestBodyStructure;
import org.openapitools.client.model.ListTokensByAddressR;
import org.openapitools.client.model.ListTokensTransfersByAddressR;
import org.openapitools.client.model.ListTokensTransfersByTransactionHashR;
import org.openapitools.client.model.RequestLimitReached;
import org.openapitools.client.model.UnexpectedServerError;
import org.openapitools.client.model.UnsupportedMediaType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokensApi
 */
@Ignore
public class TokensApiTest {

    private final TokensApi api = new TokensApi();

    
    /**
     * Get Contract Details by Address
     *
     * Though this endpoint customers can obtain information about a smart contract and its details. This can be done by the &#x60;address&#x60; parameter, i.e. the address of the smart contract.    {note}This address is **not** the same as the smart contract creator address.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractDetailsByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String contractAddress = null;
        String context = null;
        GetContractDetailsByAddressR response = api.getContractDetailsByAddress(blockchain, network, contractAddress, context);

        // TODO: test validations
    }
    
    /**
     * List Tokens By Address
     *
     * Through this endpoint customers can obtain token data by providing an attribute - &#x60;address&#x60;.  The information that can be returned can include the contract address, the token symbol, type and balance.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTokensByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListTokensByAddressR response = api.listTokensByAddress(blockchain, network, address, context, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Tokens Transfers By Address
     *
     * Through this endpoint customers can obtain a list with token transfers by the &#x60;address&#x60; attribute. Token transfers may include information such as addresses of the sender and recipient, token name, token symbol, etc.    {note}This refers only to transfers done for **tokens** not coins.{/note}    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTokensTransfersByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListTokensTransfersByAddressR response = api.listTokensTransfersByAddress(blockchain, network, address, context, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Tokens Transfers By Transaction Hash
     *
     * Through this endpoint customers can obtain a list with token transfers by the &#x60;transactionHash&#x60; attribute. Token transfers may include information such as addresses of the sender and recipient, token name, token symbol, etc.    {note}This refers only to transfers done for **tokens** not coins.{/note}    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTokensTransfersByTransactionHashTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String transactionHash = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListTokensTransfersByTransactionHashR response = api.listTokensTransfersByTransactionHash(blockchain, network, transactionHash, context, limit, offset);

        // TODO: test validations
    }
    
}
