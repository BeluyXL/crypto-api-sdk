/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.ActivateBlockchainEventSubscription400Response;
import org.openapitools.client.model.ActivateBlockchainEventSubscription401Response;
import org.openapitools.client.model.ActivateBlockchainEventSubscription403Response;
import org.openapitools.client.model.ActivateBlockchainEventSubscriptionR;
import org.openapitools.client.model.ActivateBlockchainEventSubscriptionRB;
import org.openapitools.client.model.ConvertBitcoinCashAddress402Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress409Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress415Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress422Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress429Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress500Response;
import org.openapitools.client.model.DeleteBlockchainEventSubscription400Response;
import org.openapitools.client.model.DeleteBlockchainEventSubscription401Response;
import org.openapitools.client.model.DeleteBlockchainEventSubscription403Response;
import org.openapitools.client.model.DeleteBlockchainEventSubscriptionR;
import org.openapitools.client.model.GetBlockchainEventSubscriptionDetailsByReferenceID400Response;
import org.openapitools.client.model.GetBlockchainEventSubscriptionDetailsByReferenceID401Response;
import org.openapitools.client.model.GetBlockchainEventSubscriptionDetailsByReferenceID403Response;
import org.openapitools.client.model.GetBlockchainEventSubscriptionDetailsByReferenceIDR;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionID404Response;
import org.openapitools.client.model.ListBlockchainEventsSubscriptions400Response;
import org.openapitools.client.model.ListBlockchainEventsSubscriptions401Response;
import org.openapitools.client.model.ListBlockchainEventsSubscriptions403Response;
import org.openapitools.client.model.ListBlockchainEventsSubscriptionsR;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManageSubscriptionsApi
 */
@Disabled
public class ManageSubscriptionsApiTest {

    private final ManageSubscriptionsApi api = new ManageSubscriptionsApi();

    /**
     * Activate Blockchain Event Subscription
     *
     * Through this endpoint customers can reactivate an event subscription (callback) which has been deactivated by the system. Deactivations could happen due to various reasons, most often \&quot;maximum retry attempts reached\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateBlockchainEventSubscriptionTest() throws ApiException {
        String referenceId = null;
        String context = null;
        ActivateBlockchainEventSubscriptionRB activateBlockchainEventSubscriptionRB = null;
        ActivateBlockchainEventSubscriptionR response = api.activateBlockchainEventSubscription(referenceId, context, activateBlockchainEventSubscriptionRB);
        // TODO: test validations
    }

    /**
     * Delete Blockchain Event Subscription
     *
     * Through this endpoint the customer can delete blockchain event subscriptions they have by attributes &#x60;referenceId&#x60; and &#x60;network&#x60;.    Currently Crypto APIs 2.0 offers certain Blockchain event endpoints which allow the user to subscribe for one/a few/all and receive callback notifications when the specific event occurs.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBlockchainEventSubscriptionTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String referenceId = null;
        String context = null;
        DeleteBlockchainEventSubscriptionR response = api.deleteBlockchainEventSubscription(blockchain, network, referenceId, context);
        // TODO: test validations
    }

    /**
     * Get Blockchain Event Subscription Details By Reference ID
     *
     * Through this endpoint the customer can get detailed information for a callback subscription by providing its reference ID.    Currently Crypto APIs 2.0 offers certain Blockchain event endpoints which allow the user to subscribe for one/a few/all and receive callback notifications when the specific event occurs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockchainEventSubscriptionDetailsByReferenceIDTest() throws ApiException {
        String referenceId = null;
        String context = null;
        GetBlockchainEventSubscriptionDetailsByReferenceIDR response = api.getBlockchainEventSubscriptionDetailsByReferenceID(referenceId, context);
        // TODO: test validations
    }

    /**
     * List Blockchain Events Subscriptions
     *
     * Through this endpoint the customer can obtain a list of their callback subscriptions for the available Blockchain events.    Currently Crypto APIs 2.0 offers certain Blockchain event endpoints which allow the user to subscribe for one/a few/all and receive callback notifications when the specific event occurs.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBlockchainEventsSubscriptionsTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListBlockchainEventsSubscriptionsR response = api.listBlockchainEventsSubscriptions(blockchain, network, context, limit, offset);
        // TODO: test validations
    }

}
