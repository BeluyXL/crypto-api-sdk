/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.BlockchainDataTransactionNotFound;
import org.openapitools.client.model.FeatureMainnetsNotAllowedForPlan;
import org.openapitools.client.model.GetOmniTransactionDetailsByTransactionIDTxidR;
import org.openapitools.client.model.GetUnconfirmedOmniTransactionByTransactionIDTxidR;
import org.openapitools.client.model.InsufficientCredits;
import org.openapitools.client.model.InvalidApiKey;
import org.openapitools.client.model.InvalidData;
import org.openapitools.client.model.InvalidPagination;
import org.openapitools.client.model.InvalidRequestBodyStructure;
import org.openapitools.client.model.ListOmniTokensByAddressR;
import org.openapitools.client.model.ListOmniTransactionsByAddressR;
import org.openapitools.client.model.ListOmniTransactionsByBlockHashR;
import org.openapitools.client.model.ListOmniTransactionsByBlockHeightR;
import org.openapitools.client.model.ListUnconfirmedOmniTransactionsByAddressR;
import org.openapitools.client.model.ListUnconfirmedOmniTransactionsByPropertyIDR;
import org.openapitools.client.model.RequestLimitReached;
import org.openapitools.client.model.UnexpectedServerError;
import org.openapitools.client.model.UnsupportedMediaType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OmniLayerApi
 */
@Ignore
public class OmniLayerApiTest {

    private final OmniLayerApi api = new OmniLayerApi();

    
    /**
     * Get Omni Transaction Details By Transaction ID (Txid)
     *
     * Through this endpoint customers can obtain details about an Omni transaction by the transaction&#39;s unique identifier. The transaction can return information such as hash, height, time of creation in Unix timestamp, etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOmniTransactionDetailsByTransactionIDTxidTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String transactionId = null;
        String context = null;
        GetOmniTransactionDetailsByTransactionIDTxidR response = api.getOmniTransactionDetailsByTransactionIDTxid(network, blockchain, transactionId, context);

        // TODO: test validations
    }
    
    /**
     * Get Unconfirmed Omni Transaction By Transaction ID (Txid)
     *
     * Through this endpoint customers can obtain information on unconfirmed Omni transactions by an attribute &#x60;transactionId&#x60;. The transaction can have information such as hash, height, time of creation in Unix timestamp, etc.    Unconfirmed transactions are usually put in the Mempool and await verification so that they can be added to a block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnconfirmedOmniTransactionByTransactionIDTxidTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String transactionId = null;
        String context = null;
        GetUnconfirmedOmniTransactionByTransactionIDTxidR response = api.getUnconfirmedOmniTransactionByTransactionIDTxid(network, blockchain, transactionId, context);

        // TODO: test validations
    }
    
    /**
     * List Omni Tokens By Address
     *
     * Through this endpoint the customer can receive basic information about a given Omni address based on confirmed/synced blocks only. In the case where there are any incoming or outgoing **unconfirmed** transactions for the specific address, they **will not** be counted or calculated here.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOmniTokensByAddressTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String address = null;
        String context = null;
        ListOmniTokensByAddressR response = api.listOmniTokensByAddress(network, blockchain, address, context);

        // TODO: test validations
    }
    
    /**
     * List Omni Transactions By Address
     *
     * This endpoint will list Omni transactions by an attribute &#x60;address&#x60;. The transactions listed will detail additional information such as hash, height, time of creation in Unix timestamp, etc.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOmniTransactionsByAddressTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String address = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListOmniTransactionsByAddressR response = api.listOmniTransactionsByAddress(network, blockchain, address, context, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Omni Transactions By Block Hash
     *
     * This endpoint will list Omni transactions by an attribute &#x60;transactionHash&#x60;. The transactions listed will detail additional information such as addresses, height, time of creation in Unix timestamp, etc.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOmniTransactionsByBlockHashTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String blockHash = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListOmniTransactionsByBlockHashR response = api.listOmniTransactionsByBlockHash(network, blockchain, blockHash, context, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Omni Transactions By Block Height
     *
     * This endpoint will list Omni transactions by an attribute &#x60;blockHeight&#x60;. The transactions listed will detail additional information such as hash, addresses, time of creation in Unix timestamp, etc.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOmniTransactionsByBlockHeightTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String blockHeight = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListOmniTransactionsByBlockHeightR response = api.listOmniTransactionsByBlockHeight(network, blockchain, blockHeight, context, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Unconfirmed Omni Transactions By Address
     *
     * This endpoint will list unconfirmed Omni transactions by an attribute &#x60;address&#x60;. The transactions listed will detail additional information such as hash, height, time of creation in Unix timestamp, etc.    Unconfirmed transactions are usually put in the Mempool and await verification so that they can be added to a block.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUnconfirmedOmniTransactionsByAddressTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String address = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListUnconfirmedOmniTransactionsByAddressR response = api.listUnconfirmedOmniTransactionsByAddress(network, blockchain, address, context, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Unconfirmed Omni Transactions By Property ID
     *
     * This endpoint will list unconfirmed Omni transactions by an attribute &#x60;propertyId&#x60;. The transactions listed will detail additional information such as hash, height, time of creation in Unix timestamp, etc.    Unconfirmed transactions are usually put in the Mempool and await verification so that they can be added to a block.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUnconfirmedOmniTransactionsByPropertyIDTest() throws ApiException {
        String network = null;
        String blockchain = null;
        String propertyId = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListUnconfirmedOmniTransactionsByPropertyIDR response = api.listUnconfirmedOmniTransactionsByPropertyID(network, blockchain, propertyId, context, limit, offset);

        // TODO: test validations
    }
    
}
