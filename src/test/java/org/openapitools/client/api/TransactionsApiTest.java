/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.ConvertBitcoinCashAddress402Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress415Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress422Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress429Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress500Response;
import org.openapitools.client.model.CreateCoinsTransactionFromAddressForWholeAmount400Response;
import org.openapitools.client.model.CreateCoinsTransactionFromAddressForWholeAmount401Response;
import org.openapitools.client.model.CreateCoinsTransactionFromAddressForWholeAmount403Response;
import org.openapitools.client.model.CreateCoinsTransactionFromAddressForWholeAmount409Response;
import org.openapitools.client.model.CreateCoinsTransactionFromAddressForWholeAmountR;
import org.openapitools.client.model.CreateCoinsTransactionFromAddressForWholeAmountRB;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddress400Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddress401Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddress403Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddress409Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddressR;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddressRB;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWallet400Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWallet401Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWallet403Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWallet409Response;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWalletR;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWalletRB;
import org.openapitools.client.model.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority400Response;
import org.openapitools.client.model.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority401Response;
import org.openapitools.client.model.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority403Response;
import org.openapitools.client.model.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority409Response;
import org.openapitools.client.model.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR;
import org.openapitools.client.model.CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB;
import org.openapitools.client.model.CreateFungibleTokensTransactionRequestFromAddress400Response;
import org.openapitools.client.model.CreateFungibleTokensTransactionRequestFromAddress401Response;
import org.openapitools.client.model.CreateFungibleTokensTransactionRequestFromAddress403Response;
import org.openapitools.client.model.CreateFungibleTokensTransactionRequestFromAddress409Response;
import org.openapitools.client.model.CreateFungibleTokensTransactionRequestFromAddressR;
import org.openapitools.client.model.CreateFungibleTokensTransactionRequestFromAddressRB;
import org.openapitools.client.model.CreateSingleTransactionRequestFromAddressWithoutFeePriority400Response;
import org.openapitools.client.model.CreateSingleTransactionRequestFromAddressWithoutFeePriority401Response;
import org.openapitools.client.model.CreateSingleTransactionRequestFromAddressWithoutFeePriority403Response;
import org.openapitools.client.model.CreateSingleTransactionRequestFromAddressWithoutFeePriority409Response;
import org.openapitools.client.model.CreateSingleTransactionRequestFromAddressWithoutFeePriorityR;
import org.openapitools.client.model.CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * Create Coins Transaction From Address For Whole Amount
     *
     * Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCoinsTransactionFromAddressForWholeAmountTest() throws ApiException {
        String address = null;
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        CreateCoinsTransactionFromAddressForWholeAmountRB createCoinsTransactionFromAddressForWholeAmountRB = null;
        CreateCoinsTransactionFromAddressForWholeAmountR response = api.createCoinsTransactionFromAddressForWholeAmount(address, blockchain, network, walletId, context, createCoinsTransactionFromAddressForWholeAmountRB);
        // TODO: test validations
    }

    /**
     * Create Coins Transaction Request from Address
     *
     * Through this endpoint users can create a new single transaction request from one address to another.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCoinsTransactionRequestFromAddressTest() throws ApiException {
        String address = null;
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = null;
        CreateCoinsTransactionRequestFromAddressR response = api.createCoinsTransactionRequestFromAddress(address, blockchain, network, walletId, context, createCoinsTransactionRequestFromAddressRB);
        // TODO: test validations
    }

    /**
     * Create Coins Transaction Request from Wallet
     *
     * Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCoinsTransactionRequestFromWalletTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = null;
        CreateCoinsTransactionRequestFromWalletR response = api.createCoinsTransactionRequestFromWallet(blockchain, network, walletId, context, createCoinsTransactionRequestFromWalletRB);
        // TODO: test validations
    }

    /**
     * Create Fungible Token Transaction Request From Address Without Fee Priority
     *
     * Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String senderAddress = null;
        String walletId = null;
        String context = null;
        CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB = null;
        CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR response = api.createFungibleTokenTransactionRequestFromAddressWithoutFeePriority(blockchain, network, senderAddress, walletId, context, createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB);
        // TODO: test validations
    }

    /**
     * Create Fungible Tokens Transaction Request from Address
     *
     * Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn&#39;t happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFungibleTokensTransactionRequestFromAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String senderAddress = null;
        String walletId = null;
        String context = null;
        CreateFungibleTokensTransactionRequestFromAddressRB createFungibleTokensTransactionRequestFromAddressRB = null;
        CreateFungibleTokensTransactionRequestFromAddressR response = api.createFungibleTokensTransactionRequestFromAddress(blockchain, network, senderAddress, walletId, context, createFungibleTokensTransactionRequestFromAddressRB);
        // TODO: test validations
    }

    /**
     * Create Single Transaction Request From Address Without Fee Priority
     *
     * Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \&quot;Create Coins Transaction Request from Address\&quot;  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSingleTransactionRequestFromAddressWithoutFeePriorityTest() throws ApiException {
        String address = null;
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB createSingleTransactionRequestFromAddressWithoutFeePriorityRB = null;
        CreateSingleTransactionRequestFromAddressWithoutFeePriorityR response = api.createSingleTransactionRequestFromAddressWithoutFeePriority(address, blockchain, network, walletId, context, createSingleTransactionRequestFromAddressWithoutFeePriorityRB);
        // TODO: test validations
    }

}
