/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddressR;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddressRB;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWalletR;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromWalletRB;
import org.openapitools.client.model.CreateTokensTransactionRequestFromAddressR;
import org.openapitools.client.model.CreateTokensTransactionRequestFromAddressRB;
import org.openapitools.client.model.FeatureMainnetsNotAllowedForPlan;
import org.openapitools.client.model.InsufficientCredits;
import org.openapitools.client.model.InvalidApiKey;
import org.openapitools.client.model.InvalidPagination;
import org.openapitools.client.model.InvalidRequestBodyStructure;
import org.openapitools.client.model.RequestLimitReached;
import org.openapitools.client.model.UnexpectedServerError;
import org.openapitools.client.model.UnsupportedMediaType;
import org.openapitools.client.model.WalletAsAServiceNoDepositAddressesFound;
import org.openapitools.client.model.WalletAsAServiceTokenNotSupported;
import org.openapitools.client.model.WalletAsAServiceWalletBalanceNotEnough;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    
    /**
     * Create Coins Transaction Request from Address
     *
     * Through this endpoint users can create a new single transaction request from one address to another.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoinsTransactionRequestFromAddressTest() throws ApiException {
        String address = null;
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        CreateCoinsTransactionRequestFromAddressRB createCoinsTransactionRequestFromAddressRB = null;
        CreateCoinsTransactionRequestFromAddressR response = api.createCoinsTransactionRequestFromAddress(address, blockchain, network, walletId, context, createCoinsTransactionRequestFromAddressRB);

        // TODO: test validations
    }
    
    /**
     * Create Coins Transaction Request from Wallet
     *
     * Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoinsTransactionRequestFromWalletTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        CreateCoinsTransactionRequestFromWalletRB createCoinsTransactionRequestFromWalletRB = null;
        CreateCoinsTransactionRequestFromWalletR response = api.createCoinsTransactionRequestFromWallet(blockchain, network, walletId, context, createCoinsTransactionRequestFromWalletRB);

        // TODO: test validations
    }
    
    /**
     * Create Tokens Transaction Request from Address
     *
     * Through this endpoint users can make a single token transaction.    {warning}This applies only to **fungible** tokens, **not** NFTs (non-fungible tokens).{/warning}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTokensTransactionRequestFromAddressTest() throws ApiException {
        String address = null;
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        CreateTokensTransactionRequestFromAddressRB createTokensTransactionRequestFromAddressRB = null;
        CreateTokensTransactionRequestFromAddressR response = api.createTokensTransactionRequestFromAddress(address, blockchain, network, walletId, context, createTokensTransactionRequestFromAddressRB);

        // TODO: test validations
    }
    
}
