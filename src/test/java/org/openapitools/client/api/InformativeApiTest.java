/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.FeatureMainnetsNotAllowedForPlan;
import org.openapitools.client.model.GetTransactionRequestDetailsR;
import org.openapitools.client.model.GetWalletAssetDetailsR;
import org.openapitools.client.model.InsufficientCredits;
import org.openapitools.client.model.InvalidApiKey;
import org.openapitools.client.model.InvalidData;
import org.openapitools.client.model.InvalidPagination;
import org.openapitools.client.model.InvalidRequestBodyStructure;
import org.openapitools.client.model.ListDepositAddressesR;
import org.openapitools.client.model.ListSupportedTokensR;
import org.openapitools.client.model.ListWalletTransactionsR;
import org.openapitools.client.model.RequestLimitReached;
import org.openapitools.client.model.ResourceNotFound;
import org.openapitools.client.model.UnexpectedServerError;
import org.openapitools.client.model.UnsupportedMediaType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InformativeApi
 */
@Ignore
public class InformativeApiTest {

    private final InformativeApi api = new InformativeApi();

    
    /**
     * Get Transaction Request Details
     *
     * Through this endpoint customers can obtain details on transaction request.    {note}This regards **transaction requests**, which is not to be confused with **transactions**. Transaction requests may not be approved due to any reason, hence a transaction may not occur.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionRequestDetailsTest() throws ApiException {
        String transactionRequestId = null;
        String context = null;
        GetTransactionRequestDetailsR response = api.getTransactionRequestDetails(transactionRequestId, context);

        // TODO: test validations
    }
    
    /**
     * Get Wallet Asset Details
     *
     * Through this endpoint customers can obtain details about a specific Wallet/Vault.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWalletAssetDetailsTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        GetWalletAssetDetailsR response = api.getWalletAssetDetails(blockchain, network, walletId, context);

        // TODO: test validations
    }
    
    /**
     * List Deposit Addresses
     *
     * Through this endpoint customers can pull a list of Deposit/Receiving Addresses they have already generated.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDepositAddressesTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        ListDepositAddressesR response = api.listDepositAddresses(blockchain, network, walletId, context);

        // TODO: test validations
    }
    
    /**
     * List Supported Tokens
     *
     * Through this endpoint customers can obtain information on multiple tokens at once.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSupportedTokensTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListSupportedTokensR response = api.listSupportedTokens(blockchain, network, context, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Wallet Transactions
     *
     * Through this endpoint customers can list Transactions from and to their Wallet. The data returned will include &#x60;transactionId&#x60;, &#x60;direction&#x60; of the transaction - incoming or outgoing, &#x60;amount&#x60; and more.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWalletTransactionsTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String walletId = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListWalletTransactionsR response = api.listWalletTransactions(blockchain, network, walletId, context, limit, offset);

        // TODO: test validations
    }
    
}
