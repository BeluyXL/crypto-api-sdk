/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.EstimateTransactionSmartFee400Response;
import org.openapitools.client.model.EstimateTransactionSmartFee401Response;
import org.openapitools.client.model.EstimateTransactionSmartFee403Response;
import org.openapitools.client.model.EstimateTransactionSmartFee501Response;
import org.openapitools.client.model.EstimateTransactionSmartFeeR;
import org.openapitools.client.model.GetAddressDetails400Response;
import org.openapitools.client.model.GetAddressDetails401Response;
import org.openapitools.client.model.GetAddressDetails402Response;
import org.openapitools.client.model.GetAddressDetails403Response;
import org.openapitools.client.model.GetAddressDetails409Response;
import org.openapitools.client.model.GetAddressDetails415Response;
import org.openapitools.client.model.GetAddressDetails422Response;
import org.openapitools.client.model.GetAddressDetails429Response;
import org.openapitools.client.model.GetAddressDetails500Response;
import org.openapitools.client.model.GetAddressDetailsR;
import org.openapitools.client.model.GetBlockDetailsByBlockHash400Response;
import org.openapitools.client.model.GetBlockDetailsByBlockHash401Response;
import org.openapitools.client.model.GetBlockDetailsByBlockHash403Response;
import org.openapitools.client.model.GetBlockDetailsByBlockHashR;
import org.openapitools.client.model.GetBlockDetailsByBlockHeight400Response;
import org.openapitools.client.model.GetBlockDetailsByBlockHeight401Response;
import org.openapitools.client.model.GetBlockDetailsByBlockHeight403Response;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightR;
import org.openapitools.client.model.GetFeeRecommendations400Response;
import org.openapitools.client.model.GetFeeRecommendations401Response;
import org.openapitools.client.model.GetFeeRecommendations403Response;
import org.openapitools.client.model.GetFeeRecommendationsR;
import org.openapitools.client.model.GetLastMinedBlock400Response;
import org.openapitools.client.model.GetLastMinedBlock401Response;
import org.openapitools.client.model.GetLastMinedBlock403Response;
import org.openapitools.client.model.GetLastMinedBlockR;
import org.openapitools.client.model.GetNextAvailableNonce400Response;
import org.openapitools.client.model.GetNextAvailableNonce401Response;
import org.openapitools.client.model.GetNextAvailableNonce403Response;
import org.openapitools.client.model.GetNextAvailableNonceR;
import org.openapitools.client.model.GetRawTransactionData400Response;
import org.openapitools.client.model.GetRawTransactionData401Response;
import org.openapitools.client.model.GetRawTransactionData403Response;
import org.openapitools.client.model.GetRawTransactionDataR;
import org.openapitools.client.model.GetTransactionDetailsByTransactionID400Response;
import org.openapitools.client.model.GetTransactionDetailsByTransactionID401Response;
import org.openapitools.client.model.GetTransactionDetailsByTransactionID403Response;
import org.openapitools.client.model.GetTransactionDetailsByTransactionID404Response;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDR;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionID404Response;
import org.openapitools.client.model.ListAllUnconfirmedTransactions400Response;
import org.openapitools.client.model.ListAllUnconfirmedTransactions401Response;
import org.openapitools.client.model.ListAllUnconfirmedTransactions403Response;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsR;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddressAndTimeRange400Response;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddressAndTimeRange401Response;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddressAndTimeRange403Response;
import org.openapitools.client.model.ListConfirmedTokensTransfersByAddressAndTimeRangeR;
import org.openapitools.client.model.ListConfirmedTransactionsByAddress400Response;
import org.openapitools.client.model.ListConfirmedTransactionsByAddress401Response;
import org.openapitools.client.model.ListConfirmedTransactionsByAddress403Response;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressAndTimeRange400Response;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressAndTimeRange401Response;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressAndTimeRange403Response;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressAndTimeRangeR;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressR;
import org.openapitools.client.model.ListInternalTransactionsByAddressAndTimeRange400Response;
import org.openapitools.client.model.ListInternalTransactionsByAddressAndTimeRange401Response;
import org.openapitools.client.model.ListInternalTransactionsByAddressAndTimeRange403Response;
import org.openapitools.client.model.ListInternalTransactionsByAddressAndTimeRangeR;
import org.openapitools.client.model.ListLatestMinedBlocks400Response;
import org.openapitools.client.model.ListLatestMinedBlocks401Response;
import org.openapitools.client.model.ListLatestMinedBlocks403Response;
import org.openapitools.client.model.ListLatestMinedBlocksR;
import org.openapitools.client.model.ListTransactionsByBlockHash400Response;
import org.openapitools.client.model.ListTransactionsByBlockHash401Response;
import org.openapitools.client.model.ListTransactionsByBlockHash403Response;
import org.openapitools.client.model.ListTransactionsByBlockHashR;
import org.openapitools.client.model.ListTransactionsByBlockHeight400Response;
import org.openapitools.client.model.ListTransactionsByBlockHeight401Response;
import org.openapitools.client.model.ListTransactionsByBlockHeight403Response;
import org.openapitools.client.model.ListTransactionsByBlockHeight404Response;
import org.openapitools.client.model.ListTransactionsByBlockHeightR;
import org.openapitools.client.model.ListUnconfirmedTransactionsByAddress400Response;
import org.openapitools.client.model.ListUnconfirmedTransactionsByAddress401Response;
import org.openapitools.client.model.ListUnconfirmedTransactionsByAddress403Response;
import org.openapitools.client.model.ListUnconfirmedTransactionsByAddressR;
import org.openapitools.client.model.ListUnspentTransactionOutputsByAddress400Response;
import org.openapitools.client.model.ListUnspentTransactionOutputsByAddress401Response;
import org.openapitools.client.model.ListUnspentTransactionOutputsByAddress403Response;
import org.openapitools.client.model.ListUnspentTransactionOutputsByAddressR;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UnifiedEndpointsApi
 */
@Disabled
public class UnifiedEndpointsApiTest {

    private final UnifiedEndpointsApi api = new UnifiedEndpointsApi();

    /**
     * Estimate Transaction Smart Fee
     *
     * Through this endpoint, customers can estimate the approximate fee per kilobyte needed for a transaction to begin confirmation within the &#x60;confirmationTarget&#x60; blocks when possible. After which it will return the number of blocks for which the estimate is valid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void estimateTransactionSmartFeeTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        Integer confirmationTarget = null;
        String estimateMode = null;
        EstimateTransactionSmartFeeR response = api.estimateTransactionSmartFee(blockchain, network, context, confirmationTarget, estimateMode);
        // TODO: test validations
    }

    /**
     * Get Address Details
     *
     * Through this endpoint the customer can receive basic information about a given address based on confirmed/synced blocks only. In the case where there are any incoming or outgoing **unconfirmed** transactions for the specific address, they **will not** be counted or calculated here. Applies only for coins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAddressDetailsTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        GetAddressDetailsR response = api.getAddressDetails(blockchain, network, address, context);
        // TODO: test validations
    }

    /**
     * Get Block Details By Block Hash
     *
     * Through this endpoint customers can obtain basic information about a given mined block, specifically by using the &#x60;hash&#x60; parameter. These block details could include the hash of the specific, the previous and the next block, its transactions count, its height, etc.     Blockchain specific data is information such as version, nonce, size, bits, merkleroot, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockDetailsByBlockHashTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String blockHash = null;
        String context = null;
        GetBlockDetailsByBlockHashR response = api.getBlockDetailsByBlockHash(blockchain, network, blockHash, context);
        // TODO: test validations
    }

    /**
     * Get Block Details By Block Height
     *
     * Through this endpoint customers can obtain basic information about a given mined block, specifically by using the &#x60;height&#x60; parameter. These block details could include the hash of the specific, the previous and the next block, its transactions count, its height, etc.     Blockchain specific data is information such as version, nonce, size, bits, merkleroot, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockDetailsByBlockHeightTest() throws ApiException {
        String blockchain = null;
        String network = null;
        Integer height = null;
        String context = null;
        GetBlockDetailsByBlockHeightR response = api.getBlockDetailsByBlockHeight(blockchain, network, height, context);
        // TODO: test validations
    }

    /**
     * Get Fee Recommendations
     *
     * Through this endpoint customers can obtain fee recommendations. Our fees recommendations are based on Mempool data which makes them much more accurate than fees based on already mined blocks. Calculations are done in real time live. Using this endpoint customers can get gas price for Ethereum, fee per byte for Bitcoin, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeeRecommendationsTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        GetFeeRecommendationsR response = api.getFeeRecommendations(blockchain, network, context);
        // TODO: test validations
    }

    /**
     * Get Last Mined Block
     *
     * Through this endpoint customers can fetch the last mined block in a specific blockchain network, along with its details. These could include the hash of the specific, the previous and the next block, its transactions count, its height, etc.     Blockchain specific data is information such as version, nonce, size, bits, merkleroot, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastMinedBlockTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        GetLastMinedBlockR response = api.getLastMinedBlock(blockchain, network, context);
        // TODO: test validations
    }

    /**
     * Get Next Available Nonce
     *
     * Through this endpoint customers can get information about the next available nonce by providing the specific blockchain, network and address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNextAvailableNonceTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        GetNextAvailableNonceR response = api.getNextAvailableNonce(blockchain, network, address, context);
        // TODO: test validations
    }

    /**
     * Get Raw Transaction Data
     *
     * Through this endpoint customers can get information on a transaction in its raw format by providing its &#x60;transactionId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRawTransactionDataTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String transactionId = null;
        String context = null;
        GetRawTransactionDataR response = api.getRawTransactionData(blockchain, network, transactionId, context);
        // TODO: test validations
    }

    /**
     * Get Transaction Details By Transaction ID
     *
     * Through this endpoint customers can obtain details about a transaction by the transaction&#39;s unique identifier. In UTXO-based protocols like BTC there are attributes such as &#x60;transactionId&#x60; and transaction &#x60;hash&#x60;. They still could be different. In protocols like Ethereum there is only one unique value and it&#39;s &#x60;hash&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionDetailsByTransactionIDTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String transactionId = null;
        String context = null;
        GetTransactionDetailsByTransactionIDR response = api.getTransactionDetailsByTransactionID(blockchain, network, transactionId, context);
        // TODO: test validations
    }

    /**
     * List All Unconfirmed Transactions
     *
     * Through this endpoint customers can list all **unconfirmed**  transactions for a specified blockchain and network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllUnconfirmedTransactionsTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListAllUnconfirmedTransactionsR response = api.listAllUnconfirmedTransactions(blockchain, network, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Confirmed Tokens Transfers By Address And Time Range
     *
     * Through this endpoint customers can obtain a list with **confirmed** token transfers by the &#x60;address&#x60; attribute and the query parameters &#x60;fromTimestamp&#x60; and &#x60;toTimestamp&#x60; which gives customers the opportunity to filter the results by a specified time period.    {note}This refers only to transfers done for **confirmed tokens** not coins.{/note}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfirmedTokensTransfersByAddressAndTimeRangeTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        Integer fromTimestamp = null;
        Integer toTimestamp = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListConfirmedTokensTransfersByAddressAndTimeRangeR response = api.listConfirmedTokensTransfersByAddressAndTimeRange(blockchain, network, address, fromTimestamp, toTimestamp, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Confirmed Transactions By Address
     *
     * This endpoint will list transactions by an attribute &#x60;address&#x60;. The transactions listed will detail additional information such as hash, height, time of creation in Unix timestamp, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfirmedTransactionsByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListConfirmedTransactionsByAddressR response = api.listConfirmedTransactionsByAddress(blockchain, network, address, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Confirmed Transactions By Address And Time Range
     *
     * This endpoint will list confirmed transactions by the attribute &#x60;address&#x60; and the query parameters &#x60;fromTimestamp&#x60; and &#x60;toTimestamp&#x60; which gives customers the opportunity to filter the results by a specified time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfirmedTransactionsByAddressAndTimeRangeTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        Integer fromTimestamp = null;
        Integer toTimestamp = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListConfirmedTransactionsByAddressAndTimeRangeR response = api.listConfirmedTransactionsByAddressAndTimeRange(blockchain, network, address, fromTimestamp, toTimestamp, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Internal Transactions By Address And Time Range
     *
     * Through this endpoint customers can list internal transactions by the &#x60;address&#x60; attribute and the query parameters &#x60;fromTimestamp&#x60; and &#x60;toTimestamp&#x60;  which gives customers the opportunity to filter the results by a specified time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInternalTransactionsByAddressAndTimeRangeTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        Integer fromTimestamp = null;
        Integer toTimestamp = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListInternalTransactionsByAddressAndTimeRangeR response = api.listInternalTransactionsByAddressAndTimeRange(blockchain, network, address, fromTimestamp, toTimestamp, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Latest Mined Blocks
     *
     * Through this endpoint customers can list **up to 50** from the latest blocks that were mined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLatestMinedBlocksTest() throws ApiException {
        String network = null;
        String blockchain = null;
        Integer count = null;
        String context = null;
        ListLatestMinedBlocksR response = api.listLatestMinedBlocks(network, blockchain, count, context);
        // TODO: test validations
    }

    /**
     * List Transactions by Block Hash
     *
     * This endpoint will list transactions by an attribute &#x60;transactionHash&#x60;. The transactions listed will detail additional information such as addresses, height, time of creation in Unix timestamp, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsByBlockHashTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String blockHash = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListTransactionsByBlockHashR response = api.listTransactionsByBlockHash(blockchain, network, blockHash, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Transactions by Block Height
     *
     * This endpoint will list transactions by an attribute &#x60;blockHeight&#x60;. The transactions listed will detail additional information such as hash, addresses, time of creation in Unix timestamp, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsByBlockHeightTest() throws ApiException {
        String blockchain = null;
        String network = null;
        Long height = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListTransactionsByBlockHeightR response = api.listTransactionsByBlockHeight(blockchain, network, height, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Unconfirmed Transactions by Address
     *
     * Through this endpoint customers can list transactions by &#x60;address&#x60; that are **unconfirmed**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUnconfirmedTransactionsByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Long limit = null;
        Long offset = null;
        ListUnconfirmedTransactionsByAddressR response = api.listUnconfirmedTransactionsByAddress(blockchain, network, address, context, limit, offset);
        // TODO: test validations
    }

    /**
     * List Unspent Transaction Outputs By Address
     *
     * Through this endpoint customers can list their transactions&#39; unspent outputs by &#x60;address&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUnspentTransactionOutputsByAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String address = null;
        String context = null;
        Integer limit = null;
        Integer offset = null;
        ListUnspentTransactionOutputsByAddressR response = api.listUnspentTransactionOutputsByAddress(blockchain, network, address, context, limit, offset);
        // TODO: test validations
    }

}
