/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.AlreadyExists;
import org.openapitools.client.model.BroadcastLocallySignedTransactionR;
import org.openapitools.client.model.BroadcastLocallySignedTransactionRB;
import org.openapitools.client.model.FeatureMainnetsNotAllowedForPlan;
import org.openapitools.client.model.InsufficientCredits;
import org.openapitools.client.model.InvalidApiKey;
import org.openapitools.client.model.InvalidData;
import org.openapitools.client.model.InvalidPagination;
import org.openapitools.client.model.InvalidRequestBodyStructure;
import org.openapitools.client.model.RequestLimitReached;
import org.openapitools.client.model.ResourceNotFound;
import org.openapitools.client.model.UnexpectedServerError;
import org.openapitools.client.model.UnsupportedMediaType;
import org.openapitools.client.model.ValidateAddressR;
import org.openapitools.client.model.ValidateAddressRB;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FeaturesApi
 */
@Ignore
public class FeaturesApiTest {

    private final FeaturesApi api = new FeaturesApi();

    
    /**
     * Broadcast Locally Signed Transaction
     *
     * Through this endpoint customers can broadcast transactions that have been already signed locally. Instead of using a node for broadcasting a signed transaction users can use this endpoint. We then keep the user posted about the status by sending you a callback with a success or failure status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void broadcastLocallySignedTransactionTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        BroadcastLocallySignedTransactionRB broadcastLocallySignedTransactionRB = null;
        BroadcastLocallySignedTransactionR response = api.broadcastLocallySignedTransaction(blockchain, network, context, broadcastLocallySignedTransactionRB);

        // TODO: test validations
    }
    
    /**
     * Validate Address
     *
     * This endpoint checks user public addresses whether they are valid or not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateAddressTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        ValidateAddressRB validateAddressRB = null;
        ValidateAddressR response = api.validateAddress(blockchain, network, context, validateAddressRB);

        // TODO: test validations
    }
    
}
