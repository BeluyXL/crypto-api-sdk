/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.cryptoapis.sdk.ApiException;
import org.openapitools.client.model.ConvertBitcoinCashAddress402Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress409Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress415Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress422Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress429Response;
import org.openapitools.client.model.ConvertBitcoinCashAddress500Response;
import org.openapitools.client.model.DeriveAndSyncNewChangeAddresses400Response;
import org.openapitools.client.model.DeriveAndSyncNewChangeAddresses401Response;
import org.openapitools.client.model.DeriveAndSyncNewChangeAddresses403Response;
import org.openapitools.client.model.DeriveAndSyncNewChangeAddressesR;
import org.openapitools.client.model.DeriveAndSyncNewChangeAddressesRB;
import org.openapitools.client.model.DeriveAndSyncNewReceivingAddresses400Response;
import org.openapitools.client.model.DeriveAndSyncNewReceivingAddresses401Response;
import org.openapitools.client.model.DeriveAndSyncNewReceivingAddresses403Response;
import org.openapitools.client.model.DeriveAndSyncNewReceivingAddressesR;
import org.openapitools.client.model.DeriveAndSyncNewReceivingAddressesRB;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubAssets400Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubAssets401Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubAssets403Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubAssets422Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubAssetsR;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubDetails400Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubDetails401Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubDetails403Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubDetails422Response;
import org.openapitools.client.model.GetHDWalletXPubYPubZPubDetailsR;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubTransactions400Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubTransactions401Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubTransactions403Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubTransactions422Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubTransactionsR;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubUTXOs400Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubUTXOs401Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubUTXOs403Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubUTXOs422Response;
import org.openapitools.client.model.ListHDWalletXPubYPubZPubUTXOsR;
import org.openapitools.client.model.ListSyncedAddresses400Response;
import org.openapitools.client.model.ListSyncedAddresses401Response;
import org.openapitools.client.model.ListSyncedAddresses403Response;
import org.openapitools.client.model.ListSyncedAddressesR;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub400Response;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub401Response;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub403Response;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB;
import org.openapitools.client.model.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub400Response;
import org.openapitools.client.model.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub401Response;
import org.openapitools.client.model.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub403Response;
import org.openapitools.client.model.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR;
import org.openapitools.client.model.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB;
import org.openapitools.client.model.SyncHDWalletXPubYPubZPub400Response;
import org.openapitools.client.model.SyncHDWalletXPubYPubZPub401Response;
import org.openapitools.client.model.SyncHDWalletXPubYPubZPub403Response;
import org.openapitools.client.model.SyncHDWalletXPubYPubZPub409Response;
import org.openapitools.client.model.SyncHDWalletXPubYPubZPub422Response;
import org.openapitools.client.model.SyncHDWalletXPubYPubZPubR;
import org.openapitools.client.model.SyncHDWalletXPubYPubZPubRB;
import org.openapitools.client.model.SyncNewHDWalletXPubYPubZPub400Response;
import org.openapitools.client.model.SyncNewHDWalletXPubYPubZPub401Response;
import org.openapitools.client.model.SyncNewHDWalletXPubYPubZPub403Response;
import org.openapitools.client.model.SyncNewHDWalletXPubYPubZPub409Response;
import org.openapitools.client.model.SyncNewHDWalletXPubYPubZPub422Response;
import org.openapitools.client.model.SyncNewHDWalletXPubYPubZPubR;
import org.openapitools.client.model.SyncNewHDWalletXPubYPubZPubRB;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HdWalletsApi
 */
@Disabled
public class HdWalletsApiTest {

    private final HdWalletsApi api = new HdWalletsApi();

    /**
     * Derive And Sync New Change Addresses
     *
     * Through this endpoint users can derive 100 change addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deriveAndSyncNewChangeAddressesTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        DeriveAndSyncNewChangeAddressesRB deriveAndSyncNewChangeAddressesRB = null;
        DeriveAndSyncNewChangeAddressesR response = api.deriveAndSyncNewChangeAddresses(blockchain, network, context, deriveAndSyncNewChangeAddressesRB);
        // TODO: test validations
    }

    /**
     * Derive And Sync New Receiving Addresses
     *
     * Through this endpoint users can derive 100 receiving addresses, starting from the last index we have data for, which are then added to the xPub, subscribed for syncing, and start recording data. If no data is available, it will start from index 0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deriveAndSyncNewReceivingAddressesTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        DeriveAndSyncNewReceivingAddressesRB deriveAndSyncNewReceivingAddressesRB = null;
        DeriveAndSyncNewReceivingAddressesR response = api.deriveAndSyncNewReceivingAddresses(blockchain, network, context, deriveAndSyncNewReceivingAddressesRB);
        // TODO: test validations
    }

    /**
     * Get HD Wallet (xPub, yPub, zPub) Assets
     *
     * This endpoint will return details on assets we support for a specified from the customer extended public key (xPub). These could be cryptocurrencies, fungible or non-fungible (NFT) tokens. Each asset has a unique identifier - assetId, and a unique symbol in the form of a string, e.g. \&quot;USDT\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHDWalletXPubYPubZPubAssetsTest() throws ApiException {
        String blockchain = null;
        String extendedPublicKey = null;
        String network = null;
        String context = null;
        String derivation = null;
        GetHDWalletXPubYPubZPubAssetsR response = api.getHDWalletXPubYPubZPubAssets(blockchain, extendedPublicKey, network, context, derivation);
        // TODO: test validations
    }

    /**
     * Get HD Wallet (xPub, yPub, zPub) Details
     *
     * HD wallet details is useful endpoint to get the most important data about HD wallet without the need to do a lot of calculations, once the HD Wallet is synced using Sync endpoint we keep it up to date and we calculate these details in advance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHDWalletXPubYPubZPubDetailsTest() throws ApiException {
        String blockchain = null;
        String extendedPublicKey = null;
        String network = null;
        String context = null;
        String derivation = null;
        GetHDWalletXPubYPubZPubDetailsR response = api.getHDWalletXPubYPubZPubDetails(blockchain, extendedPublicKey, network, context, derivation);
        // TODO: test validations
    }

    /**
     * List HD Wallet (xPub, yPub, zPub) Transactions
     *
     * This endpoint will list HD Wallet transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHDWalletXPubYPubZPubTransactionsTest() throws ApiException {
        String blockchain = null;
        String extendedPublicKey = null;
        String network = null;
        String context = null;
        String derivation = null;
        Long limit = null;
        Long offset = null;
        ListHDWalletXPubYPubZPubTransactionsR response = api.listHDWalletXPubYPubZPubTransactions(blockchain, extendedPublicKey, network, context, derivation, limit, offset);
        // TODO: test validations
    }

    /**
     * List HD Wallet (xPub, yPub, zPub) UTXOs
     *
     * Through this endpoint you can list HD wallet&#39;s UTXOs (Unspent Transaction Outputs) by providing extended public key of an already synced HD wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHDWalletXPubYPubZPubUTXOsTest() throws ApiException {
        String blockchain = null;
        String extendedPublicKey = null;
        String network = null;
        String context = null;
        String derivation = null;
        Long limit = null;
        Long offset = null;
        ListHDWalletXPubYPubZPubUTXOsR response = api.listHDWalletXPubYPubZPubUTXOs(blockchain, extendedPublicKey, network, context, derivation, limit, offset);
        // TODO: test validations
    }

    /**
     * List Synced Addresses
     *
     * Through this endpoint users can list all addresses that Crypto APIs has synced for a specific xPub. This includes previous and current/new xPubs, what addresses we’ve synced for them, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSyncedAddressesTest() throws ApiException {
        String blockchain = null;
        String extendedPublicKey = null;
        String network = null;
        String context = null;
        String addressFormat = null;
        Boolean isChangeAddress = null;
        Long limit = null;
        Long offset = null;
        ListSyncedAddressesR response = api.listSyncedAddresses(blockchain, extendedPublicKey, network, context, addressFormat, isChangeAddress, limit, offset);
        // TODO: test validations
    }

    /**
     * Prepare A UTXO-Based Transaction From HD Wallet (xPub, yPub, zPub)
     *
     * Through the “Prepare a UTXO-based transaction from xPub” endpoint users can prepare a transaction for signing from all synced with Crypto APIs addresses for the specific xPub. This is based on the &#x60;selectionStrategy&#x60; and the addresses’ balances. In the case a user has an address not synced with Crypto APIs, it will not be included. This endpoint applies to all supported UTXO-based blockchain protocols, e.g. Bitcoin, Litecoin, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB = null;
        PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubR response = api.prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPub(blockchain, network, context, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRB);
        // TODO: test validations
    }

    /**
     * Prepare An Account-Based Transaction From HD Wallet (xPub, yPub, zPub)
     *
     * Through the “Prepare an account-based transaction from xPub” endpoint users can prepare a transaction for signing from a synced with Crypto APIs address from the specific xPub. This endpoint applies to all supported account-based blockchain protocols, e.g. Ethereum, BSC, etc
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB = null;
        PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubR response = api.prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPub(blockchain, network, context, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRB);
        // TODO: test validations
    }

    /**
     * Sync HD Wallet (xPub, yPub, zPub)
     *
     * HD wallets usually have a lot of addresses and transactions, getting the data on demand is a heavy operation. That&#39;s why we have created this feature, to be able to get HD wallet details or transactions this HD wallet must be synced first. In addition to the initial sync we keep updating the synced HD wallets all the time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncHDWalletXPubYPubZPubTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        SyncHDWalletXPubYPubZPubRB syncHDWalletXPubYPubZPubRB = null;
        SyncHDWalletXPubYPubZPubR response = api.syncHDWalletXPubYPubZPub(blockchain, network, context, syncHDWalletXPubYPubZPubRB);
        // TODO: test validations
    }

    /**
     * Sync New HD Wallet (xPub, yPub, zPub)
     *
     * Through this endpoint users can add a brand new xPub to the Crypto APIs system to be ready for deriving. Unlike our other similar endpoint “Sync HD Wallet (xPub, yPub, zPub)”, this endpoint does not create new addresses nor syncs old data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncNewHDWalletXPubYPubZPubTest() throws ApiException {
        String blockchain = null;
        String network = null;
        String context = null;
        SyncNewHDWalletXPubYPubZPubRB syncNewHDWalletXPubYPubZPubRB = null;
        SyncNewHDWalletXPubYPubZPubR response = api.syncNewHDWalletXPubYPubZPub(blockchain, network, context, syncNewHDWalletXPubYPubZPubRB);
        // TODO: test validations
    }

}
