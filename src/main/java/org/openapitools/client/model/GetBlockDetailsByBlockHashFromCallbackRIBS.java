/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSB;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSBC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSBSC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSD;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSD2;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSE;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSEC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSL;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBST;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSX;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSZ;
import org.openapitools.client.model.GetBlockDetailsByBlockHashFromCallbackRIBSZ2;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalCoins;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalFees;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class GetBlockDetailsByBlockHashFromCallbackRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetBlockDetailsByBlockHashFromCallbackRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetBlockDetailsByBlockHashFromCallbackRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetBlockDetailsByBlockHashFromCallbackRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSB> adapterGetBlockDetailsByBlockHashFromCallbackRIBSB = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSB.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSBC> adapterGetBlockDetailsByBlockHashFromCallbackRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSBC.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSBSC> adapterGetBlockDetailsByBlockHashFromCallbackRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSBSC.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSD> adapterGetBlockDetailsByBlockHashFromCallbackRIBSD = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSD.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSD2> adapterGetBlockDetailsByBlockHashFromCallbackRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSD2.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSE> adapterGetBlockDetailsByBlockHashFromCallbackRIBSE = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSE.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSEC> adapterGetBlockDetailsByBlockHashFromCallbackRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSEC.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSL> adapterGetBlockDetailsByBlockHashFromCallbackRIBSL = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSL.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBST> adapterGetBlockDetailsByBlockHashFromCallbackRIBST = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBST.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSX> adapterGetBlockDetailsByBlockHashFromCallbackRIBSX = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSX.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSZ> adapterGetBlockDetailsByBlockHashFromCallbackRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSZ.class));
            final TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBSZ2> adapterGetBlockDetailsByBlockHashFromCallbackRIBSZ2 = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashFromCallbackRIBSZ2.class));

            return (TypeAdapter<T>) new TypeAdapter<GetBlockDetailsByBlockHashFromCallbackRIBS>() {
                @Override
                public void write(JsonWriter out, GetBlockDetailsByBlockHashFromCallbackRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSB`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSB) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSB.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSBC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSBC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSBC.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSBSC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSBSC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSBSC.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSD`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSD) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSD.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSD2`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSD2) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSD2.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSE`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSE) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSE.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSEC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSEC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSEC.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSL`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSL) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSL.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBST`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBST) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBST.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBST)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSX`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSX) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSX.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSX)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSZ`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSZ) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSZ.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashFromCallbackRIBSZ2`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashFromCallbackRIBSZ2) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashFromCallbackRIBSZ2.toJsonTree((GetBlockDetailsByBlockHashFromCallbackRIBSZ2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2");
                }

                @Override
                public GetBlockDetailsByBlockHashFromCallbackRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSB'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSBC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSBC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSBSC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSBSC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSD'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSD2'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSE'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSEC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSEC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSL'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBST
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBST.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBST;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBST'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBST failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBST'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSX
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSX.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSX;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSX'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSX failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSX'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSZ'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashFromCallbackRIBSZ2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashFromCallbackRIBSZ2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashFromCallbackRIBSZ2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashFromCallbackRIBSZ2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSZ2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashFromCallbackRIBSZ2'", e);
                    }

                    if (match == 1) {
                        GetBlockDetailsByBlockHashFromCallbackRIBS ret = new GetBlockDetailsByBlockHashFromCallbackRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetBlockDetailsByBlockHashFromCallbackRIBS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetBlockDetailsByBlockHashFromCallbackRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBST o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSX o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashFromCallbackRIBS(GetBlockDetailsByBlockHashFromCallbackRIBSZ2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSB", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSB>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSBC", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSBC>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSBSC", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSBSC>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSD", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSD>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSD2", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSD2>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSE", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSE>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSEC", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSEC>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSL", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSL>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBST", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBST>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSX", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSX>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSZ", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSZ>() {
        });
        schemas.put("GetBlockDetailsByBlockHashFromCallbackRIBSZ2", new GenericType<GetBlockDetailsByBlockHashFromCallbackRIBSZ2>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetBlockDetailsByBlockHashFromCallbackRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBST) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSX) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashFromCallbackRIBSZ2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2");
    }

    /**
     * Get the actual instance, which can be the following:
     * GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2
     *
     * @return The actual instance (GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSB`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSB`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSB`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSB getGetBlockDetailsByBlockHashFromCallbackRIBSB() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSBC`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSBC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSBC`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSBC getGetBlockDetailsByBlockHashFromCallbackRIBSBC() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSBSC`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSBSC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSBSC`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSBSC getGetBlockDetailsByBlockHashFromCallbackRIBSBSC() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSD`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSD`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSD`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSD getGetBlockDetailsByBlockHashFromCallbackRIBSD() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSD2`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSD2`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSD2`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSD2 getGetBlockDetailsByBlockHashFromCallbackRIBSD2() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSE`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSE`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSE`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSE getGetBlockDetailsByBlockHashFromCallbackRIBSE() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSEC`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSEC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSEC`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSEC getGetBlockDetailsByBlockHashFromCallbackRIBSEC() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSL`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSL`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSL`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSL getGetBlockDetailsByBlockHashFromCallbackRIBSL() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBST`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBST`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBST`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBST`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBST getGetBlockDetailsByBlockHashFromCallbackRIBST() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBST)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSX`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSX`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSX`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSX`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSX getGetBlockDetailsByBlockHashFromCallbackRIBSX() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSX)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSZ`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSZ`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSZ`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSZ getGetBlockDetailsByBlockHashFromCallbackRIBSZ() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSZ)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSZ2`. If the actual instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSZ2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashFromCallbackRIBSZ2`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashFromCallbackRIBSZ2`
     */
    public GetBlockDetailsByBlockHashFromCallbackRIBSZ2 getGetBlockDetailsByBlockHashFromCallbackRIBSZ2() throws ClassCastException {
        return (GetBlockDetailsByBlockHashFromCallbackRIBSZ2)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetBlockDetailsByBlockHashFromCallbackRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSB
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSBC
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSBC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSBSC
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSBSC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSD
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSD2
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSE
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSE failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSEC
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSEC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSL
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBST
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBST.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBST failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSX
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSX.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSX failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSZ
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashFromCallbackRIBSZ2
    try {
      GetBlockDetailsByBlockHashFromCallbackRIBSZ2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashFromCallbackRIBSZ2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetBlockDetailsByBlockHashFromCallbackRIBS with oneOf schemas: GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetBlockDetailsByBlockHashFromCallbackRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetBlockDetailsByBlockHashFromCallbackRIBS
  * @throws IOException if the JSON string is invalid with respect to GetBlockDetailsByBlockHashFromCallbackRIBS
  */
  public static GetBlockDetailsByBlockHashFromCallbackRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockDetailsByBlockHashFromCallbackRIBS.class);
  }

 /**
  * Convert an instance of GetBlockDetailsByBlockHashFromCallbackRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

