/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSB;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSBC;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSD;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSD2;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSE;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSEC;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSL;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSP;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBST;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSTBandwidthUsed;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSTEnergyUsed;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSX;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSZVoutInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVJoinSplitInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVinInner;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIOffer;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIReceive;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class GetTransactionDetailsByTransactionIDFromCallbackRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetTransactionDetailsByTransactionIDFromCallbackRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetTransactionDetailsByTransactionIDFromCallbackRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetTransactionDetailsByTransactionIDFromCallbackRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSB> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSB = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSB.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSBC> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSBC.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSD> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSD = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSD.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSD2> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSD2.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSE> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSE = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSE.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSEC> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSEC.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSL> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSL = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSL.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSP> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSP = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSP.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBST> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBST = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBST.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSX> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSX = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSX.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ.class));
            final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2> adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2.class));

            return (TypeAdapter<T>) new TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBS>() {
                @Override
                public void write(JsonWriter out, GetTransactionDetailsByTransactionIDFromCallbackRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSB`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSB) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSB.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSBC`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSBC) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSBC.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSBSC.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSD`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSD) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSD.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSD2`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSD2) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSD2.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSE`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSE) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSE.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSEC`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSEC) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSEC.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSL`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSL) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSL.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSP`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSP) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSP.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSP)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBST`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBST) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBST.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBST)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSX`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSX) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSX.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSX)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSZ) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSZ.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2`
                    if (value.getActualInstance() instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2) {
                        JsonObject obj = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSZ2.toJsonTree((GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GetTransactionDetailsByTransactionIDFromCallbackRIBSB, GetTransactionDetailsByTransactionIDFromCallbackRIBSBC, GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, GetTransactionDetailsByTransactionIDFromCallbackRIBSD, GetTransactionDetailsByTransactionIDFromCallbackRIBSD2, GetTransactionDetailsByTransactionIDFromCallbackRIBSE, GetTransactionDetailsByTransactionIDFromCallbackRIBSEC, GetTransactionDetailsByTransactionIDFromCallbackRIBSL, GetTransactionDetailsByTransactionIDFromCallbackRIBSP, GetTransactionDetailsByTransactionIDFromCallbackRIBST, GetTransactionDetailsByTransactionIDFromCallbackRIBSX, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2");
                }

                @Override
                public GetTransactionDetailsByTransactionIDFromCallbackRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSB'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSBC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSBC'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSD'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSD2'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSE'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSEC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSEC'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSL'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSP
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSP.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSP;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSP'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSP failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSP'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBST
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBST.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBST;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBST'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBST failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBST'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSX
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSX.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSX;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSX'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSX failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSX'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSZ'", e);
                    }

                    // deserialize GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetTransactionDetailsByTransactionIDFromCallbackRIBSZ2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2'", e);
                    }

                    if (match == 1) {
                        GetTransactionDetailsByTransactionIDFromCallbackRIBS ret = new GetTransactionDetailsByTransactionIDFromCallbackRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSP o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBST o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSX o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetTransactionDetailsByTransactionIDFromCallbackRIBS(GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSB", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSB>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSBC", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSBC>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSD", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSD>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSD2", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSD2>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSE", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSE>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSEC", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSEC>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSL", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSL>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSP", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSP>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBST", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBST>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSX", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSX>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSZ", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ>() {
        });
        schemas.put("GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2", new GenericType<GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetTransactionDetailsByTransactionIDFromCallbackRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GetTransactionDetailsByTransactionIDFromCallbackRIBSB, GetTransactionDetailsByTransactionIDFromCallbackRIBSBC, GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, GetTransactionDetailsByTransactionIDFromCallbackRIBSD, GetTransactionDetailsByTransactionIDFromCallbackRIBSD2, GetTransactionDetailsByTransactionIDFromCallbackRIBSE, GetTransactionDetailsByTransactionIDFromCallbackRIBSEC, GetTransactionDetailsByTransactionIDFromCallbackRIBSL, GetTransactionDetailsByTransactionIDFromCallbackRIBSP, GetTransactionDetailsByTransactionIDFromCallbackRIBST, GetTransactionDetailsByTransactionIDFromCallbackRIBSX, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSP) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBST) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSX) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GetTransactionDetailsByTransactionIDFromCallbackRIBSB, GetTransactionDetailsByTransactionIDFromCallbackRIBSBC, GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, GetTransactionDetailsByTransactionIDFromCallbackRIBSD, GetTransactionDetailsByTransactionIDFromCallbackRIBSD2, GetTransactionDetailsByTransactionIDFromCallbackRIBSE, GetTransactionDetailsByTransactionIDFromCallbackRIBSEC, GetTransactionDetailsByTransactionIDFromCallbackRIBSL, GetTransactionDetailsByTransactionIDFromCallbackRIBSP, GetTransactionDetailsByTransactionIDFromCallbackRIBST, GetTransactionDetailsByTransactionIDFromCallbackRIBSX, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2");
    }

    /**
     * Get the actual instance, which can be the following:
     * GetTransactionDetailsByTransactionIDFromCallbackRIBSB, GetTransactionDetailsByTransactionIDFromCallbackRIBSBC, GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, GetTransactionDetailsByTransactionIDFromCallbackRIBSD, GetTransactionDetailsByTransactionIDFromCallbackRIBSD2, GetTransactionDetailsByTransactionIDFromCallbackRIBSE, GetTransactionDetailsByTransactionIDFromCallbackRIBSEC, GetTransactionDetailsByTransactionIDFromCallbackRIBSL, GetTransactionDetailsByTransactionIDFromCallbackRIBSP, GetTransactionDetailsByTransactionIDFromCallbackRIBST, GetTransactionDetailsByTransactionIDFromCallbackRIBSX, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2
     *
     * @return The actual instance (GetTransactionDetailsByTransactionIDFromCallbackRIBSB, GetTransactionDetailsByTransactionIDFromCallbackRIBSBC, GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, GetTransactionDetailsByTransactionIDFromCallbackRIBSD, GetTransactionDetailsByTransactionIDFromCallbackRIBSD2, GetTransactionDetailsByTransactionIDFromCallbackRIBSE, GetTransactionDetailsByTransactionIDFromCallbackRIBSEC, GetTransactionDetailsByTransactionIDFromCallbackRIBSL, GetTransactionDetailsByTransactionIDFromCallbackRIBSP, GetTransactionDetailsByTransactionIDFromCallbackRIBST, GetTransactionDetailsByTransactionIDFromCallbackRIBSX, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSB`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSB`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSB`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSB getGetTransactionDetailsByTransactionIDFromCallbackRIBSB() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSBC`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSBC`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSBC`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSBC getGetTransactionDetailsByTransactionIDFromCallbackRIBSBC() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC getGetTransactionDetailsByTransactionIDFromCallbackRIBSBSC() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSD`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSD`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSD`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSD getGetTransactionDetailsByTransactionIDFromCallbackRIBSD() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSD2`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSD2`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSD2`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 getGetTransactionDetailsByTransactionIDFromCallbackRIBSD2() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSE`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSE`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSE`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSE getGetTransactionDetailsByTransactionIDFromCallbackRIBSE() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSEC`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSEC`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSEC`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSEC getGetTransactionDetailsByTransactionIDFromCallbackRIBSEC() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSL`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSL`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSL`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSL getGetTransactionDetailsByTransactionIDFromCallbackRIBSL() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSP`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSP`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSP`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSP`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSP getGetTransactionDetailsByTransactionIDFromCallbackRIBSP() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSP)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBST`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBST`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBST`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBST`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBST getGetTransactionDetailsByTransactionIDFromCallbackRIBST() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBST)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSX`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSX`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSX`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSX`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSX getGetTransactionDetailsByTransactionIDFromCallbackRIBSX() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSX)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSZ getGetTransactionDetailsByTransactionIDFromCallbackRIBSZ() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSZ)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2`. If the actual instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2`
     * @throws ClassCastException if the instance is not `GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2`
     */
    public GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 getGetTransactionDetailsByTransactionIDFromCallbackRIBSZ2() throws ClassCastException {
        return (GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetTransactionDetailsByTransactionIDFromCallbackRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSB
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSBC
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSBC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSD
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSD2
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSE
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSE failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSEC
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSEC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSL
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSP
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSP.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSP failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBST
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBST.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBST failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSX
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSX.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSX failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSZ
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2
    try {
      GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetTransactionDetailsByTransactionIDFromCallbackRIBS with oneOf schemas: GetTransactionDetailsByTransactionIDFromCallbackRIBSB, GetTransactionDetailsByTransactionIDFromCallbackRIBSBC, GetTransactionDetailsByTransactionIDFromCallbackRIBSBSC, GetTransactionDetailsByTransactionIDFromCallbackRIBSD, GetTransactionDetailsByTransactionIDFromCallbackRIBSD2, GetTransactionDetailsByTransactionIDFromCallbackRIBSE, GetTransactionDetailsByTransactionIDFromCallbackRIBSEC, GetTransactionDetailsByTransactionIDFromCallbackRIBSL, GetTransactionDetailsByTransactionIDFromCallbackRIBSP, GetTransactionDetailsByTransactionIDFromCallbackRIBST, GetTransactionDetailsByTransactionIDFromCallbackRIBSX, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ, GetTransactionDetailsByTransactionIDFromCallbackRIBSZ2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBS
  * @throws IOException if the JSON string is invalid with respect to GetTransactionDetailsByTransactionIDFromCallbackRIBS
  */
  public static GetTransactionDetailsByTransactionIDFromCallbackRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBS.class);
  }

 /**
  * Convert an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

