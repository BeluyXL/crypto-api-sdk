/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetExchangeRateByAssetsIDsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class GetExchangeRateByAssetsIDsRI {
  public static final String SERIALIZED_NAME_CALCULATION_TIMESTAMP = "calculationTimestamp";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TIMESTAMP)
  private Integer calculationTimestamp;

  public static final String SERIALIZED_NAME_FROM_ASSET_ID = "fromAssetId";
  @SerializedName(SERIALIZED_NAME_FROM_ASSET_ID)
  private String fromAssetId;

  public static final String SERIALIZED_NAME_FROM_ASSET_SYMBOL = "fromAssetSymbol";
  @SerializedName(SERIALIZED_NAME_FROM_ASSET_SYMBOL)
  private String fromAssetSymbol;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_TO_ASSET_ID = "toAssetId";
  @SerializedName(SERIALIZED_NAME_TO_ASSET_ID)
  private String toAssetId;

  public static final String SERIALIZED_NAME_TO_ASSET_SYMBOL = "toAssetSymbol";
  @SerializedName(SERIALIZED_NAME_TO_ASSET_SYMBOL)
  private String toAssetSymbol;

  public GetExchangeRateByAssetsIDsRI() { 
  }

  public GetExchangeRateByAssetsIDsRI calculationTimestamp(Integer calculationTimestamp) {
    
    this.calculationTimestamp = calculationTimestamp;
    return this;
  }

   /**
   * Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp.
   * @return calculationTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1618577849", required = true, value = "Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp.")

  public Integer getCalculationTimestamp() {
    return calculationTimestamp;
  }


  public void setCalculationTimestamp(Integer calculationTimestamp) {
    this.calculationTimestamp = calculationTimestamp;
  }


  public GetExchangeRateByAssetsIDsRI fromAssetId(String fromAssetId) {
    
    this.fromAssetId = fromAssetId;
    return this;
  }

   /**
   * Defines the base asset Reference ID to get a rate for.
   * @return fromAssetId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5b1ea92e584bf50020130612", required = true, value = "Defines the base asset Reference ID to get a rate for.")

  public String getFromAssetId() {
    return fromAssetId;
  }


  public void setFromAssetId(String fromAssetId) {
    this.fromAssetId = fromAssetId;
  }


  public GetExchangeRateByAssetsIDsRI fromAssetSymbol(String fromAssetSymbol) {
    
    this.fromAssetSymbol = fromAssetSymbol;
    return this;
  }

   /**
   * Defines the base asset symbol to get a rate for.
   * @return fromAssetSymbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTC", required = true, value = "Defines the base asset symbol to get a rate for.")

  public String getFromAssetSymbol() {
    return fromAssetSymbol;
  }


  public void setFromAssetSymbol(String fromAssetSymbol) {
    this.fromAssetSymbol = fromAssetSymbol;
  }


  public GetExchangeRateByAssetsIDsRI rate(String rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * Defines the exchange rate between assets calculated by weighted average of the last trades in every exchange for the last 24 hours by giving more weight to exchanges with higher volume.
   * @return rate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "54691.40481689715", required = true, value = "Defines the exchange rate between assets calculated by weighted average of the last trades in every exchange for the last 24 hours by giving more weight to exchanges with higher volume.")

  public String getRate() {
    return rate;
  }


  public void setRate(String rate) {
    this.rate = rate;
  }


  public GetExchangeRateByAssetsIDsRI toAssetId(String toAssetId) {
    
    this.toAssetId = toAssetId;
    return this;
  }

   /**
   * Defines the relation asset Reference ID in which the base asset rate will be displayed.
   * @return toAssetId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5b1ea92e584bf50020130615", required = true, value = "Defines the relation asset Reference ID in which the base asset rate will be displayed.")

  public String getToAssetId() {
    return toAssetId;
  }


  public void setToAssetId(String toAssetId) {
    this.toAssetId = toAssetId;
  }


  public GetExchangeRateByAssetsIDsRI toAssetSymbol(String toAssetSymbol) {
    
    this.toAssetSymbol = toAssetSymbol;
    return this;
  }

   /**
   * Defines the relation asset symbol in which the base asset rate will be displayed.
   * @return toAssetSymbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "Defines the relation asset symbol in which the base asset rate will be displayed.")

  public String getToAssetSymbol() {
    return toAssetSymbol;
  }


  public void setToAssetSymbol(String toAssetSymbol) {
    this.toAssetSymbol = toAssetSymbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetExchangeRateByAssetsIDsRI getExchangeRateByAssetsIDsRI = (GetExchangeRateByAssetsIDsRI) o;
    return Objects.equals(this.calculationTimestamp, getExchangeRateByAssetsIDsRI.calculationTimestamp) &&
        Objects.equals(this.fromAssetId, getExchangeRateByAssetsIDsRI.fromAssetId) &&
        Objects.equals(this.fromAssetSymbol, getExchangeRateByAssetsIDsRI.fromAssetSymbol) &&
        Objects.equals(this.rate, getExchangeRateByAssetsIDsRI.rate) &&
        Objects.equals(this.toAssetId, getExchangeRateByAssetsIDsRI.toAssetId) &&
        Objects.equals(this.toAssetSymbol, getExchangeRateByAssetsIDsRI.toAssetSymbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationTimestamp, fromAssetId, fromAssetSymbol, rate, toAssetId, toAssetSymbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetExchangeRateByAssetsIDsRI {\n");
    sb.append("    calculationTimestamp: ").append(toIndentedString(calculationTimestamp)).append("\n");
    sb.append("    fromAssetId: ").append(toIndentedString(fromAssetId)).append("\n");
    sb.append("    fromAssetSymbol: ").append(toIndentedString(fromAssetSymbol)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    toAssetId: ").append(toIndentedString(toAssetId)).append("\n");
    sb.append("    toAssetSymbol: ").append(toIndentedString(toAssetSymbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculationTimestamp");
    openapiFields.add("fromAssetId");
    openapiFields.add("fromAssetSymbol");
    openapiFields.add("rate");
    openapiFields.add("toAssetId");
    openapiFields.add("toAssetSymbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("calculationTimestamp");
    openapiRequiredFields.add("fromAssetId");
    openapiRequiredFields.add("fromAssetSymbol");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("toAssetId");
    openapiRequiredFields.add("toAssetSymbol");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetExchangeRateByAssetsIDsRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetExchangeRateByAssetsIDsRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetExchangeRateByAssetsIDsRI is not found in the empty JSON string", GetExchangeRateByAssetsIDsRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetExchangeRateByAssetsIDsRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetExchangeRateByAssetsIDsRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetExchangeRateByAssetsIDsRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("fromAssetId") != null && !jsonObj.get("fromAssetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromAssetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromAssetId").toString()));
      }
      if (jsonObj.get("fromAssetSymbol") != null && !jsonObj.get("fromAssetSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromAssetSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromAssetSymbol").toString()));
      }
      if (jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
      if (jsonObj.get("toAssetId") != null && !jsonObj.get("toAssetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toAssetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toAssetId").toString()));
      }
      if (jsonObj.get("toAssetSymbol") != null && !jsonObj.get("toAssetSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toAssetSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toAssetSymbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetExchangeRateByAssetsIDsRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetExchangeRateByAssetsIDsRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetExchangeRateByAssetsIDsRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetExchangeRateByAssetsIDsRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetExchangeRateByAssetsIDsRI>() {
           @Override
           public void write(JsonWriter out, GetExchangeRateByAssetsIDsRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetExchangeRateByAssetsIDsRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetExchangeRateByAssetsIDsRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetExchangeRateByAssetsIDsRI
  * @throws IOException if the JSON string is invalid with respect to GetExchangeRateByAssetsIDsRI
  */
  public static GetExchangeRateByAssetsIDsRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetExchangeRateByAssetsIDsRI.class);
  }

 /**
  * Convert an instance of GetExchangeRateByAssetsIDsRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

