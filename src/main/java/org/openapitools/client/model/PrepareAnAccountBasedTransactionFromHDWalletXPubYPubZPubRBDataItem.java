/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private String additionalData;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  /**
   * Representation of the transaction type
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    LEGACY_TRANSACTION("legacy-transaction"),
    
    ACCESS_LIST_TRANSACTION("access-list-transaction"),
    
    GAS_FEE_MARKET_TRANSACTION("gas-fee-market-transaction");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private TransactionTypeEnum transactionType;

  public static final String SERIALIZED_NAME_XPUB = "xpub";
  @SerializedName(SERIALIZED_NAME_XPUB)
  private String xpub;

  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem() { 
  }

  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem additionalData(String additionalData) {
    
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Representation of the additional data.
   * @return additionalData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "yourAdditionalDataHere", value = "Representation of the additional data.")

  public String getAdditionalData() {
    return additionalData;
  }


  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Representation of the amount of the transaction
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.000003", required = true, value = "Representation of the amount of the transaction")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem fee(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee getFee() {
    return fee;
  }


  public void setFee(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee) {
    this.fee = fee;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Representation of the nonce value
   * @return nonce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Representation of the nonce value")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem recipient(String recipient) {
    
    this.recipient = recipient;
    return this;
  }

   /**
   * Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
   * @return recipient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x041c594a0cc194e826bef5411b29c7f27001b7e3", required = true, value = "Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")

  public String getRecipient() {
    return recipient;
  }


  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem sender(String sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list.
   * @return sender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x03654A9E78771442CAdf8DB37ae60D6a12bAEa9f", required = true, value = "Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list.")

  public String getSender() {
    return sender;
  }


  public void setSender(String sender) {
    this.sender = sender;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem transactionType(TransactionTypeEnum transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Representation of the transaction type
   * @return transactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "access-list-transaction", value = "Representation of the transaction type")

  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem xpub(String xpub) {
    
    this.xpub = xpub;
    return this;
  }

   /**
   * Defines the account extended publicly known key which is used to derive all child public keys.
   * @return xpub
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "xpub6CsGdqTDEVRnLmpWN218HBwJqfhqSx46iA8ByzEA5Bz9jfwU3TSg9U7ambKgJyykvCraHQ6sAFAddMGFdPzhXrRanKbHnnkbDTyRPyn5gRJ", required = true, value = "Defines the account extended publicly known key which is used to derive all child public keys.")

  public String getXpub() {
    return xpub;
  }


  public void setXpub(String xpub) {
    this.xpub = xpub;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem = (PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) o;
    return Objects.equals(this.additionalData, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.additionalData) &&
        Objects.equals(this.amount, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.amount) &&
        Objects.equals(this.fee, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.fee) &&
        Objects.equals(this.nonce, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.nonce) &&
        Objects.equals(this.recipient, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.recipient) &&
        Objects.equals(this.sender, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.sender) &&
        Objects.equals(this.transactionType, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.transactionType) &&
        Objects.equals(this.xpub, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.xpub);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalData, amount, fee, nonce, recipient, sender, transactionType, xpub);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    xpub: ").append(toIndentedString(xpub)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalData");
    openapiFields.add("amount");
    openapiFields.add("fee");
    openapiFields.add("nonce");
    openapiFields.add("recipient");
    openapiFields.add("sender");
    openapiFields.add("transactionType");
    openapiFields.add("xpub");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("recipient");
    openapiRequiredFields.add("sender");
    openapiRequiredFields.add("xpub");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem is not found in the empty JSON string", PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      // validate the optional field `fee`
      if (jsonObj.getAsJsonObject("fee") != null) {
        PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee.validateJsonObject(jsonObj.getAsJsonObject("fee"));
      }
      if (jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if (jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if (jsonObj.get("xpub") != null && !jsonObj.get("xpub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xpub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xpub").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem>() {
           @Override
           public void write(JsonWriter out, PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
  * @throws IOException if the JSON string is invalid with respect to PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
  */
  public static PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.class);
  }

 /**
  * Convert an instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRBDataItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

