/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetWalletAssetDetailsRIConfirmedBalance;
import org.openapitools.client.model.GetWalletAssetDetailsRIFungibleTokensInner;
import org.openapitools.client.model.GetWalletAssetDetailsRINonFungibleTokensInner;
import org.openapitools.client.model.GetWalletAssetDetailsRIRecievedConfirmedAmount;
import org.openapitools.client.model.GetWalletAssetDetailsRISentConfirmedAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetWalletAssetDetailsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class GetWalletAssetDetailsRI {
  public static final String SERIALIZED_NAME_CONFIRMED_BALANCE = "confirmedBalance";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_BALANCE)
  private GetWalletAssetDetailsRIConfirmedBalance confirmedBalance;

  public static final String SERIALIZED_NAME_DEPOSIT_ADDRESSES_COUNT = "depositAddressesCount";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_ADDRESSES_COUNT)
  private Integer depositAddressesCount;

  public static final String SERIALIZED_NAME_FUNGIBLE_TOKENS = "fungibleTokens";
  @SerializedName(SERIALIZED_NAME_FUNGIBLE_TOKENS)
  private List<GetWalletAssetDetailsRIFungibleTokensInner> fungibleTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NON_FUNGIBLE_TOKENS = "nonFungibleTokens";
  @SerializedName(SERIALIZED_NAME_NON_FUNGIBLE_TOKENS)
  private List<GetWalletAssetDetailsRINonFungibleTokensInner> nonFungibleTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIEVED_CONFIRMED_AMOUNT = "recievedConfirmedAmount";
  @SerializedName(SERIALIZED_NAME_RECIEVED_CONFIRMED_AMOUNT)
  private GetWalletAssetDetailsRIRecievedConfirmedAmount recievedConfirmedAmount;

  public static final String SERIALIZED_NAME_SENT_CONFIRMED_AMOUNT = "sentConfirmedAmount";
  @SerializedName(SERIALIZED_NAME_SENT_CONFIRMED_AMOUNT)
  private GetWalletAssetDetailsRISentConfirmedAmount sentConfirmedAmount;

  public GetWalletAssetDetailsRI() { 
  }

  public GetWalletAssetDetailsRI confirmedBalance(GetWalletAssetDetailsRIConfirmedBalance confirmedBalance) {
    
    this.confirmedBalance = confirmedBalance;
    return this;
  }

   /**
   * Get confirmedBalance
   * @return confirmedBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetWalletAssetDetailsRIConfirmedBalance getConfirmedBalance() {
    return confirmedBalance;
  }


  public void setConfirmedBalance(GetWalletAssetDetailsRIConfirmedBalance confirmedBalance) {
    this.confirmedBalance = confirmedBalance;
  }


  public GetWalletAssetDetailsRI depositAddressesCount(Integer depositAddressesCount) {
    
    this.depositAddressesCount = depositAddressesCount;
    return this;
  }

   /**
   * Specifies the count of deposit addresses in the Wallet.
   * @return depositAddressesCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "Specifies the count of deposit addresses in the Wallet.")

  public Integer getDepositAddressesCount() {
    return depositAddressesCount;
  }


  public void setDepositAddressesCount(Integer depositAddressesCount) {
    this.depositAddressesCount = depositAddressesCount;
  }


  public GetWalletAssetDetailsRI fungibleTokens(List<GetWalletAssetDetailsRIFungibleTokensInner> fungibleTokens) {
    
    this.fungibleTokens = fungibleTokens;
    return this;
  }

  public GetWalletAssetDetailsRI addFungibleTokensItem(GetWalletAssetDetailsRIFungibleTokensInner fungibleTokensItem) {
    this.fungibleTokens.add(fungibleTokensItem);
    return this;
  }

   /**
   * Represents fungible tokens&#39;es detailed information
   * @return fungibleTokens
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents fungible tokens'es detailed information")

  public List<GetWalletAssetDetailsRIFungibleTokensInner> getFungibleTokens() {
    return fungibleTokens;
  }


  public void setFungibleTokens(List<GetWalletAssetDetailsRIFungibleTokensInner> fungibleTokens) {
    this.fungibleTokens = fungibleTokens;
  }


  public GetWalletAssetDetailsRI name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Defines the name of the Wallet given to it by the user.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "main vault", required = true, value = "Defines the name of the Wallet given to it by the user.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GetWalletAssetDetailsRI nonFungibleTokens(List<GetWalletAssetDetailsRINonFungibleTokensInner> nonFungibleTokens) {
    
    this.nonFungibleTokens = nonFungibleTokens;
    return this;
  }

  public GetWalletAssetDetailsRI addNonFungibleTokensItem(GetWalletAssetDetailsRINonFungibleTokensInner nonFungibleTokensItem) {
    this.nonFungibleTokens.add(nonFungibleTokensItem);
    return this;
  }

   /**
   * Represents non-fungible tokens&#39;es detailed information.
   * @return nonFungibleTokens
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents non-fungible tokens'es detailed information.")

  public List<GetWalletAssetDetailsRINonFungibleTokensInner> getNonFungibleTokens() {
    return nonFungibleTokens;
  }


  public void setNonFungibleTokens(List<GetWalletAssetDetailsRINonFungibleTokensInner> nonFungibleTokens) {
    this.nonFungibleTokens = nonFungibleTokens;
  }


  public GetWalletAssetDetailsRI recievedConfirmedAmount(GetWalletAssetDetailsRIRecievedConfirmedAmount recievedConfirmedAmount) {
    
    this.recievedConfirmedAmount = recievedConfirmedAmount;
    return this;
  }

   /**
   * Get recievedConfirmedAmount
   * @return recievedConfirmedAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetWalletAssetDetailsRIRecievedConfirmedAmount getRecievedConfirmedAmount() {
    return recievedConfirmedAmount;
  }


  public void setRecievedConfirmedAmount(GetWalletAssetDetailsRIRecievedConfirmedAmount recievedConfirmedAmount) {
    this.recievedConfirmedAmount = recievedConfirmedAmount;
  }


  public GetWalletAssetDetailsRI sentConfirmedAmount(GetWalletAssetDetailsRISentConfirmedAmount sentConfirmedAmount) {
    
    this.sentConfirmedAmount = sentConfirmedAmount;
    return this;
  }

   /**
   * Get sentConfirmedAmount
   * @return sentConfirmedAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetWalletAssetDetailsRISentConfirmedAmount getSentConfirmedAmount() {
    return sentConfirmedAmount;
  }


  public void setSentConfirmedAmount(GetWalletAssetDetailsRISentConfirmedAmount sentConfirmedAmount) {
    this.sentConfirmedAmount = sentConfirmedAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWalletAssetDetailsRI getWalletAssetDetailsRI = (GetWalletAssetDetailsRI) o;
    return Objects.equals(this.confirmedBalance, getWalletAssetDetailsRI.confirmedBalance) &&
        Objects.equals(this.depositAddressesCount, getWalletAssetDetailsRI.depositAddressesCount) &&
        Objects.equals(this.fungibleTokens, getWalletAssetDetailsRI.fungibleTokens) &&
        Objects.equals(this.name, getWalletAssetDetailsRI.name) &&
        Objects.equals(this.nonFungibleTokens, getWalletAssetDetailsRI.nonFungibleTokens) &&
        Objects.equals(this.recievedConfirmedAmount, getWalletAssetDetailsRI.recievedConfirmedAmount) &&
        Objects.equals(this.sentConfirmedAmount, getWalletAssetDetailsRI.sentConfirmedAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmedBalance, depositAddressesCount, fungibleTokens, name, nonFungibleTokens, recievedConfirmedAmount, sentConfirmedAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWalletAssetDetailsRI {\n");
    sb.append("    confirmedBalance: ").append(toIndentedString(confirmedBalance)).append("\n");
    sb.append("    depositAddressesCount: ").append(toIndentedString(depositAddressesCount)).append("\n");
    sb.append("    fungibleTokens: ").append(toIndentedString(fungibleTokens)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonFungibleTokens: ").append(toIndentedString(nonFungibleTokens)).append("\n");
    sb.append("    recievedConfirmedAmount: ").append(toIndentedString(recievedConfirmedAmount)).append("\n");
    sb.append("    sentConfirmedAmount: ").append(toIndentedString(sentConfirmedAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confirmedBalance");
    openapiFields.add("depositAddressesCount");
    openapiFields.add("fungibleTokens");
    openapiFields.add("name");
    openapiFields.add("nonFungibleTokens");
    openapiFields.add("recievedConfirmedAmount");
    openapiFields.add("sentConfirmedAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confirmedBalance");
    openapiRequiredFields.add("depositAddressesCount");
    openapiRequiredFields.add("fungibleTokens");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nonFungibleTokens");
    openapiRequiredFields.add("recievedConfirmedAmount");
    openapiRequiredFields.add("sentConfirmedAmount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetWalletAssetDetailsRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetWalletAssetDetailsRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWalletAssetDetailsRI is not found in the empty JSON string", GetWalletAssetDetailsRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetWalletAssetDetailsRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWalletAssetDetailsRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetWalletAssetDetailsRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `confirmedBalance`
      if (jsonObj.getAsJsonObject("confirmedBalance") != null) {
        GetWalletAssetDetailsRIConfirmedBalance.validateJsonObject(jsonObj.getAsJsonObject("confirmedBalance"));
      }
      JsonArray jsonArrayfungibleTokens = jsonObj.getAsJsonArray("fungibleTokens");
      if (jsonArrayfungibleTokens != null) {
        // ensure the json data is an array
        if (!jsonObj.get("fungibleTokens").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `fungibleTokens` to be an array in the JSON string but got `%s`", jsonObj.get("fungibleTokens").toString()));
        }

        // validate the optional field `fungibleTokens` (array)
        for (int i = 0; i < jsonArrayfungibleTokens.size(); i++) {
          GetWalletAssetDetailsRIFungibleTokensInner.validateJsonObject(jsonArrayfungibleTokens.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArraynonFungibleTokens = jsonObj.getAsJsonArray("nonFungibleTokens");
      if (jsonArraynonFungibleTokens != null) {
        // ensure the json data is an array
        if (!jsonObj.get("nonFungibleTokens").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `nonFungibleTokens` to be an array in the JSON string but got `%s`", jsonObj.get("nonFungibleTokens").toString()));
        }

        // validate the optional field `nonFungibleTokens` (array)
        for (int i = 0; i < jsonArraynonFungibleTokens.size(); i++) {
          GetWalletAssetDetailsRINonFungibleTokensInner.validateJsonObject(jsonArraynonFungibleTokens.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `recievedConfirmedAmount`
      if (jsonObj.getAsJsonObject("recievedConfirmedAmount") != null) {
        GetWalletAssetDetailsRIRecievedConfirmedAmount.validateJsonObject(jsonObj.getAsJsonObject("recievedConfirmedAmount"));
      }
      // validate the optional field `sentConfirmedAmount`
      if (jsonObj.getAsJsonObject("sentConfirmedAmount") != null) {
        GetWalletAssetDetailsRISentConfirmedAmount.validateJsonObject(jsonObj.getAsJsonObject("sentConfirmedAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWalletAssetDetailsRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWalletAssetDetailsRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWalletAssetDetailsRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWalletAssetDetailsRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWalletAssetDetailsRI>() {
           @Override
           public void write(JsonWriter out, GetWalletAssetDetailsRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWalletAssetDetailsRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetWalletAssetDetailsRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetWalletAssetDetailsRI
  * @throws IOException if the JSON string is invalid with respect to GetWalletAssetDetailsRI
  */
  public static GetWalletAssetDetailsRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWalletAssetDetailsRI.class);
  }

 /**
  * Convert an instance of GetWalletAssetDetailsRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

