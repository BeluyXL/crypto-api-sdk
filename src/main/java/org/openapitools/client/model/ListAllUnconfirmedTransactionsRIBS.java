/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedOutput;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedSpend;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVin;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVout;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSB;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSBC;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSBSC;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSD;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSD2;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSE;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSEC;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSECFee;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSL;
import org.openapitools.client.model.ListAllUnconfirmedTransactionsRIBSZ;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSBSCGasPrice;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSZVJoinSplit;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class ListAllUnconfirmedTransactionsRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ListAllUnconfirmedTransactionsRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListAllUnconfirmedTransactionsRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListAllUnconfirmedTransactionsRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSB> adapterListAllUnconfirmedTransactionsRIBSB = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSB.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSBC> adapterListAllUnconfirmedTransactionsRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSBC.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSBSC> adapterListAllUnconfirmedTransactionsRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSBSC.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSD> adapterListAllUnconfirmedTransactionsRIBSD = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSD.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSD2> adapterListAllUnconfirmedTransactionsRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSD2.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSE> adapterListAllUnconfirmedTransactionsRIBSE = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSE.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSEC> adapterListAllUnconfirmedTransactionsRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSEC.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSL> adapterListAllUnconfirmedTransactionsRIBSL = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSL.class));
            final TypeAdapter<ListAllUnconfirmedTransactionsRIBSZ> adapterListAllUnconfirmedTransactionsRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(ListAllUnconfirmedTransactionsRIBSZ.class));

            return (TypeAdapter<T>) new TypeAdapter<ListAllUnconfirmedTransactionsRIBS>() {
                @Override
                public void write(JsonWriter out, ListAllUnconfirmedTransactionsRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSB`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSB) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSB.toJsonTree((ListAllUnconfirmedTransactionsRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSBC`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSBC) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSBC.toJsonTree((ListAllUnconfirmedTransactionsRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSBSC`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSBSC) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSBSC.toJsonTree((ListAllUnconfirmedTransactionsRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSD`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSD) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSD.toJsonTree((ListAllUnconfirmedTransactionsRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSD2`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSD2) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSD2.toJsonTree((ListAllUnconfirmedTransactionsRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSE`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSE) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSE.toJsonTree((ListAllUnconfirmedTransactionsRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSEC`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSEC) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSEC.toJsonTree((ListAllUnconfirmedTransactionsRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSL`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSL) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSL.toJsonTree((ListAllUnconfirmedTransactionsRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListAllUnconfirmedTransactionsRIBSZ`
                    if (value.getActualInstance() instanceof ListAllUnconfirmedTransactionsRIBSZ) {
                        JsonObject obj = adapterListAllUnconfirmedTransactionsRIBSZ.toJsonTree((ListAllUnconfirmedTransactionsRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ListAllUnconfirmedTransactionsRIBSB, ListAllUnconfirmedTransactionsRIBSBC, ListAllUnconfirmedTransactionsRIBSBSC, ListAllUnconfirmedTransactionsRIBSD, ListAllUnconfirmedTransactionsRIBSD2, ListAllUnconfirmedTransactionsRIBSE, ListAllUnconfirmedTransactionsRIBSEC, ListAllUnconfirmedTransactionsRIBSL, ListAllUnconfirmedTransactionsRIBSZ");
                }

                @Override
                public ListAllUnconfirmedTransactionsRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ListAllUnconfirmedTransactionsRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSB'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSBC'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSBSC'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSD'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSD2'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSE'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSEC'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSL'", e);
                    }

                    // deserialize ListAllUnconfirmedTransactionsRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAllUnconfirmedTransactionsRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAllUnconfirmedTransactionsRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAllUnconfirmedTransactionsRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAllUnconfirmedTransactionsRIBSZ'", e);
                    }

                    if (match == 1) {
                        ListAllUnconfirmedTransactionsRIBS ret = new ListAllUnconfirmedTransactionsRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ListAllUnconfirmedTransactionsRIBS: %d classes match result, expected 1. JSON: %s", match, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ListAllUnconfirmedTransactionsRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListAllUnconfirmedTransactionsRIBS(ListAllUnconfirmedTransactionsRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ListAllUnconfirmedTransactionsRIBSB", new GenericType<ListAllUnconfirmedTransactionsRIBSB>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSBC", new GenericType<ListAllUnconfirmedTransactionsRIBSBC>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSBSC", new GenericType<ListAllUnconfirmedTransactionsRIBSBSC>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSD", new GenericType<ListAllUnconfirmedTransactionsRIBSD>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSD2", new GenericType<ListAllUnconfirmedTransactionsRIBSD2>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSE", new GenericType<ListAllUnconfirmedTransactionsRIBSE>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSEC", new GenericType<ListAllUnconfirmedTransactionsRIBSEC>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSL", new GenericType<ListAllUnconfirmedTransactionsRIBSL>() {
        });
        schemas.put("ListAllUnconfirmedTransactionsRIBSZ", new GenericType<ListAllUnconfirmedTransactionsRIBSZ>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ListAllUnconfirmedTransactionsRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ListAllUnconfirmedTransactionsRIBSB, ListAllUnconfirmedTransactionsRIBSBC, ListAllUnconfirmedTransactionsRIBSBSC, ListAllUnconfirmedTransactionsRIBSD, ListAllUnconfirmedTransactionsRIBSD2, ListAllUnconfirmedTransactionsRIBSE, ListAllUnconfirmedTransactionsRIBSEC, ListAllUnconfirmedTransactionsRIBSL, ListAllUnconfirmedTransactionsRIBSZ
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ListAllUnconfirmedTransactionsRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListAllUnconfirmedTransactionsRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ListAllUnconfirmedTransactionsRIBSB, ListAllUnconfirmedTransactionsRIBSBC, ListAllUnconfirmedTransactionsRIBSBSC, ListAllUnconfirmedTransactionsRIBSD, ListAllUnconfirmedTransactionsRIBSD2, ListAllUnconfirmedTransactionsRIBSE, ListAllUnconfirmedTransactionsRIBSEC, ListAllUnconfirmedTransactionsRIBSL, ListAllUnconfirmedTransactionsRIBSZ");
    }

    /**
     * Get the actual instance, which can be the following:
     * ListAllUnconfirmedTransactionsRIBSB, ListAllUnconfirmedTransactionsRIBSBC, ListAllUnconfirmedTransactionsRIBSBSC, ListAllUnconfirmedTransactionsRIBSD, ListAllUnconfirmedTransactionsRIBSD2, ListAllUnconfirmedTransactionsRIBSE, ListAllUnconfirmedTransactionsRIBSEC, ListAllUnconfirmedTransactionsRIBSL, ListAllUnconfirmedTransactionsRIBSZ
     *
     * @return The actual instance (ListAllUnconfirmedTransactionsRIBSB, ListAllUnconfirmedTransactionsRIBSBC, ListAllUnconfirmedTransactionsRIBSBSC, ListAllUnconfirmedTransactionsRIBSD, ListAllUnconfirmedTransactionsRIBSD2, ListAllUnconfirmedTransactionsRIBSE, ListAllUnconfirmedTransactionsRIBSEC, ListAllUnconfirmedTransactionsRIBSL, ListAllUnconfirmedTransactionsRIBSZ)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSB`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSB`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSB`
     */
    public ListAllUnconfirmedTransactionsRIBSB getListAllUnconfirmedTransactionsRIBSB() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSBC`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSBC`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSBC`
     */
    public ListAllUnconfirmedTransactionsRIBSBC getListAllUnconfirmedTransactionsRIBSBC() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSBSC`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSBSC`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSBSC`
     */
    public ListAllUnconfirmedTransactionsRIBSBSC getListAllUnconfirmedTransactionsRIBSBSC() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSD`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSD`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSD`
     */
    public ListAllUnconfirmedTransactionsRIBSD getListAllUnconfirmedTransactionsRIBSD() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSD2`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSD2`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSD2`
     */
    public ListAllUnconfirmedTransactionsRIBSD2 getListAllUnconfirmedTransactionsRIBSD2() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSE`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSE`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSE`
     */
    public ListAllUnconfirmedTransactionsRIBSE getListAllUnconfirmedTransactionsRIBSE() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSEC`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSEC`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSEC`
     */
    public ListAllUnconfirmedTransactionsRIBSEC getListAllUnconfirmedTransactionsRIBSEC() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSL`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSL`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSL`
     */
    public ListAllUnconfirmedTransactionsRIBSL getListAllUnconfirmedTransactionsRIBSL() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAllUnconfirmedTransactionsRIBSZ`. If the actual instance is not `ListAllUnconfirmedTransactionsRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAllUnconfirmedTransactionsRIBSZ`
     * @throws ClassCastException if the instance is not `ListAllUnconfirmedTransactionsRIBSZ`
     */
    public ListAllUnconfirmedTransactionsRIBSZ getListAllUnconfirmedTransactionsRIBSZ() throws ClassCastException {
        return (ListAllUnconfirmedTransactionsRIBSZ)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAllUnconfirmedTransactionsRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    // validate the json string with ListAllUnconfirmedTransactionsRIBSB
    try {
      ListAllUnconfirmedTransactionsRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSBC
    try {
      ListAllUnconfirmedTransactionsRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSBSC
    try {
      ListAllUnconfirmedTransactionsRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSD
    try {
      ListAllUnconfirmedTransactionsRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSD2
    try {
      ListAllUnconfirmedTransactionsRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSE
    try {
      ListAllUnconfirmedTransactionsRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSEC
    try {
      ListAllUnconfirmedTransactionsRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSL
    try {
      ListAllUnconfirmedTransactionsRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListAllUnconfirmedTransactionsRIBSZ
    try {
      ListAllUnconfirmedTransactionsRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ListAllUnconfirmedTransactionsRIBS with oneOf schemas: ListAllUnconfirmedTransactionsRIBSB, ListAllUnconfirmedTransactionsRIBSBC, ListAllUnconfirmedTransactionsRIBSBSC, ListAllUnconfirmedTransactionsRIBSD, ListAllUnconfirmedTransactionsRIBSD2, ListAllUnconfirmedTransactionsRIBSE, ListAllUnconfirmedTransactionsRIBSEC, ListAllUnconfirmedTransactionsRIBSL, ListAllUnconfirmedTransactionsRIBSZ. %d class(es) match the result, expected 1. JSON: %s", validCount, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ListAllUnconfirmedTransactionsRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAllUnconfirmedTransactionsRIBS
  * @throws IOException if the JSON string is invalid with respect to ListAllUnconfirmedTransactionsRIBS
  */
  public static ListAllUnconfirmedTransactionsRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAllUnconfirmedTransactionsRIBS.class);
  }

 /**
  * Convert an instance of ListAllUnconfirmedTransactionsRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

