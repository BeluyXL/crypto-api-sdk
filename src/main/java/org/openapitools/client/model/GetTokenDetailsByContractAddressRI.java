/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetTokenDetailsByContractAddressRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class GetTokenDetailsByContractAddressRI {
  public static final String SERIALIZED_NAME_TOKEN_DECIMALS = "tokenDecimals";
  @SerializedName(SERIALIZED_NAME_TOKEN_DECIMALS)
  private String tokenDecimals;

  public static final String SERIALIZED_NAME_TOKEN_NAME = "tokenName";
  @SerializedName(SERIALIZED_NAME_TOKEN_NAME)
  private String tokenName;

  public static final String SERIALIZED_NAME_TOKEN_SYMBOL = "tokenSymbol";
  @SerializedName(SERIALIZED_NAME_TOKEN_SYMBOL)
  private String tokenSymbol;

  public static final String SERIALIZED_NAME_TOKEN_TYPE = "tokenType";
  @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
  private String tokenType;

  public static final String SERIALIZED_NAME_TOTAL_SUPPLY = "totalSupply";
  @SerializedName(SERIALIZED_NAME_TOTAL_SUPPLY)
  private String totalSupply;

  public GetTokenDetailsByContractAddressRI() { 
  }

  public GetTokenDetailsByContractAddressRI tokenDecimals(String tokenDecimals) {
    
    this.tokenDecimals = tokenDecimals;
    return this;
  }

   /**
   * Defines the number of decimals that the token possesses.
   * @return tokenDecimals
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "18", required = true, value = "Defines the number of decimals that the token possesses.")

  public String getTokenDecimals() {
    return tokenDecimals;
  }


  public void setTokenDecimals(String tokenDecimals) {
    this.tokenDecimals = tokenDecimals;
  }


  public GetTokenDetailsByContractAddressRI tokenName(String tokenName) {
    
    this.tokenName = tokenName;
    return this;
  }

   /**
   * Specifies the token&#39;s name.
   * @return tokenName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Band Protocol", value = "Specifies the token's name.")

  public String getTokenName() {
    return tokenName;
  }


  public void setTokenName(String tokenName) {
    this.tokenName = tokenName;
  }


  public GetTokenDetailsByContractAddressRI tokenSymbol(String tokenSymbol) {
    
    this.tokenSymbol = tokenSymbol;
    return this;
  }

   /**
   * Defines the unique symbol of the token.
   * @return tokenSymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BAND", value = "Defines the unique symbol of the token.")

  public String getTokenSymbol() {
    return tokenSymbol;
  }


  public void setTokenSymbol(String tokenSymbol) {
    this.tokenSymbol = tokenSymbol;
  }


  public GetTokenDetailsByContractAddressRI tokenType(String tokenType) {
    
    this.tokenType = tokenType;
    return this;
  }

   /**
   * Defines the type of the token.
   * @return tokenType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ERC-20", required = true, value = "Defines the type of the token.")

  public String getTokenType() {
    return tokenType;
  }


  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }


  public GetTokenDetailsByContractAddressRI totalSupply(String totalSupply) {
    
    this.totalSupply = totalSupply;
    return this;
  }

   /**
   * Defines the total number of tokens created that exist on the market minus the ones that have been burned.
   * @return totalSupply
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000000", required = true, value = "Defines the total number of tokens created that exist on the market minus the ones that have been burned.")

  public String getTotalSupply() {
    return totalSupply;
  }


  public void setTotalSupply(String totalSupply) {
    this.totalSupply = totalSupply;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTokenDetailsByContractAddressRI getTokenDetailsByContractAddressRI = (GetTokenDetailsByContractAddressRI) o;
    return Objects.equals(this.tokenDecimals, getTokenDetailsByContractAddressRI.tokenDecimals) &&
        Objects.equals(this.tokenName, getTokenDetailsByContractAddressRI.tokenName) &&
        Objects.equals(this.tokenSymbol, getTokenDetailsByContractAddressRI.tokenSymbol) &&
        Objects.equals(this.tokenType, getTokenDetailsByContractAddressRI.tokenType) &&
        Objects.equals(this.totalSupply, getTokenDetailsByContractAddressRI.totalSupply);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenDecimals, tokenName, tokenSymbol, tokenType, totalSupply);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTokenDetailsByContractAddressRI {\n");
    sb.append("    tokenDecimals: ").append(toIndentedString(tokenDecimals)).append("\n");
    sb.append("    tokenName: ").append(toIndentedString(tokenName)).append("\n");
    sb.append("    tokenSymbol: ").append(toIndentedString(tokenSymbol)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("    totalSupply: ").append(toIndentedString(totalSupply)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tokenDecimals");
    openapiFields.add("tokenName");
    openapiFields.add("tokenSymbol");
    openapiFields.add("tokenType");
    openapiFields.add("totalSupply");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tokenDecimals");
    openapiRequiredFields.add("tokenType");
    openapiRequiredFields.add("totalSupply");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetTokenDetailsByContractAddressRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetTokenDetailsByContractAddressRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTokenDetailsByContractAddressRI is not found in the empty JSON string", GetTokenDetailsByContractAddressRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetTokenDetailsByContractAddressRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTokenDetailsByContractAddressRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTokenDetailsByContractAddressRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("tokenDecimals") != null && !jsonObj.get("tokenDecimals").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenDecimals` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenDecimals").toString()));
      }
      if (jsonObj.get("tokenName") != null && !jsonObj.get("tokenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenName").toString()));
      }
      if (jsonObj.get("tokenSymbol") != null && !jsonObj.get("tokenSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenSymbol").toString()));
      }
      if (jsonObj.get("tokenType") != null && !jsonObj.get("tokenType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenType").toString()));
      }
      if (jsonObj.get("totalSupply") != null && !jsonObj.get("totalSupply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSupply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSupply").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTokenDetailsByContractAddressRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTokenDetailsByContractAddressRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTokenDetailsByContractAddressRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTokenDetailsByContractAddressRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTokenDetailsByContractAddressRI>() {
           @Override
           public void write(JsonWriter out, GetTokenDetailsByContractAddressRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTokenDetailsByContractAddressRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetTokenDetailsByContractAddressRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetTokenDetailsByContractAddressRI
  * @throws IOException if the JSON string is invalid with respect to GetTokenDetailsByContractAddressRI
  */
  public static GetTokenDetailsByContractAddressRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTokenDetailsByContractAddressRI.class);
  }

 /**
  * Convert an instance of GetTokenDetailsByContractAddressRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

