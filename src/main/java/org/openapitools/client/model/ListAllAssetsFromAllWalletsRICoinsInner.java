/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListAllAssetsFromAllWalletsRICoinsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class ListAllAssetsFromAllWalletsRICoinsInner {
  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_CONFIRMED_BALANCE = "confirmedBalance";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_BALANCE)
  private String confirmedBalance;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_TOTAL_RECEIVED = "totalReceived";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIVED)
  private String totalReceived;

  public static final String SERIALIZED_NAME_TOTAL_SPENT = "totalSpent";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPENT)
  private String totalSpent;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public ListAllAssetsFromAllWalletsRICoinsInner() { 
  }

  public ListAllAssetsFromAllWalletsRICoinsInner blockchain(String blockchain) {
    
    this.blockchain = blockchain;
    return this;
  }

   /**
   * Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
   * @return blockchain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bitcoin", required = true, value = "Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")

  public String getBlockchain() {
    return blockchain;
  }


  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public ListAllAssetsFromAllWalletsRICoinsInner confirmedBalance(String confirmedBalance) {
    
    this.confirmedBalance = confirmedBalance;
    return this;
  }

   /**
   * Defines the total balance of the address that is confirmed. It doesn&#39;t include unconfirmed transactions.
   * @return confirmedBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.00009179", required = true, value = "Defines the total balance of the address that is confirmed. It doesn't include unconfirmed transactions.")

  public String getConfirmedBalance() {
    return confirmedBalance;
  }


  public void setConfirmedBalance(String confirmedBalance) {
    this.confirmedBalance = confirmedBalance;
  }


  public ListAllAssetsFromAllWalletsRICoinsInner network(String network) {
    
    this.network = network;
    return this;
  }

   /**
   * Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
   * @return network
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "testnet", required = true, value = "Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.")

  public String getNetwork() {
    return network;
  }


  public void setNetwork(String network) {
    this.network = network;
  }


  public ListAllAssetsFromAllWalletsRICoinsInner totalReceived(String totalReceived) {
    
    this.totalReceived = totalReceived;
    return this;
  }

   /**
   * Defines the total amount of all coins received to the address, based on confirmed transactions.
   * @return totalReceived
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5.6", required = true, value = "Defines the total amount of all coins received to the address, based on confirmed transactions.")

  public String getTotalReceived() {
    return totalReceived;
  }


  public void setTotalReceived(String totalReceived) {
    this.totalReceived = totalReceived;
  }


  public ListAllAssetsFromAllWalletsRICoinsInner totalSpent(String totalSpent) {
    
    this.totalSpent = totalSpent;
    return this;
  }

   /**
   * Defines the total amount of all spent by this address coins, based on confirmed transactions.
   * @return totalSpent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2.1", required = true, value = "Defines the total amount of all spent by this address coins, based on confirmed transactions.")

  public String getTotalSpent() {
    return totalSpent;
  }


  public void setTotalSpent(String totalSpent) {
    this.totalSpent = totalSpent;
  }


  public ListAllAssetsFromAllWalletsRICoinsInner unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Represents the unit of the confirmed balance.
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTC", required = true, value = "Represents the unit of the confirmed balance.")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAllAssetsFromAllWalletsRICoinsInner listAllAssetsFromAllWalletsRICoinsInner = (ListAllAssetsFromAllWalletsRICoinsInner) o;
    return Objects.equals(this.blockchain, listAllAssetsFromAllWalletsRICoinsInner.blockchain) &&
        Objects.equals(this.confirmedBalance, listAllAssetsFromAllWalletsRICoinsInner.confirmedBalance) &&
        Objects.equals(this.network, listAllAssetsFromAllWalletsRICoinsInner.network) &&
        Objects.equals(this.totalReceived, listAllAssetsFromAllWalletsRICoinsInner.totalReceived) &&
        Objects.equals(this.totalSpent, listAllAssetsFromAllWalletsRICoinsInner.totalSpent) &&
        Objects.equals(this.unit, listAllAssetsFromAllWalletsRICoinsInner.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockchain, confirmedBalance, network, totalReceived, totalSpent, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAllAssetsFromAllWalletsRICoinsInner {\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    confirmedBalance: ").append(toIndentedString(confirmedBalance)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    totalReceived: ").append(toIndentedString(totalReceived)).append("\n");
    sb.append("    totalSpent: ").append(toIndentedString(totalSpent)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockchain");
    openapiFields.add("confirmedBalance");
    openapiFields.add("network");
    openapiFields.add("totalReceived");
    openapiFields.add("totalSpent");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blockchain");
    openapiRequiredFields.add("confirmedBalance");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("totalReceived");
    openapiRequiredFields.add("totalSpent");
    openapiRequiredFields.add("unit");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAllAssetsFromAllWalletsRICoinsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListAllAssetsFromAllWalletsRICoinsInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAllAssetsFromAllWalletsRICoinsInner is not found in the empty JSON string", ListAllAssetsFromAllWalletsRICoinsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAllAssetsFromAllWalletsRICoinsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAllAssetsFromAllWalletsRICoinsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAllAssetsFromAllWalletsRICoinsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if (jsonObj.get("confirmedBalance") != null && !jsonObj.get("confirmedBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmedBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmedBalance").toString()));
      }
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (jsonObj.get("totalReceived") != null && !jsonObj.get("totalReceived").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalReceived` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalReceived").toString()));
      }
      if (jsonObj.get("totalSpent") != null && !jsonObj.get("totalSpent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSpent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSpent").toString()));
      }
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAllAssetsFromAllWalletsRICoinsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAllAssetsFromAllWalletsRICoinsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAllAssetsFromAllWalletsRICoinsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAllAssetsFromAllWalletsRICoinsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAllAssetsFromAllWalletsRICoinsInner>() {
           @Override
           public void write(JsonWriter out, ListAllAssetsFromAllWalletsRICoinsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAllAssetsFromAllWalletsRICoinsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAllAssetsFromAllWalletsRICoinsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAllAssetsFromAllWalletsRICoinsInner
  * @throws IOException if the JSON string is invalid with respect to ListAllAssetsFromAllWalletsRICoinsInner
  */
  public static ListAllAssetsFromAllWalletsRICoinsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAllAssetsFromAllWalletsRICoinsInner.class);
  }

 /**
  * Convert an instance of ListAllAssetsFromAllWalletsRICoinsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

