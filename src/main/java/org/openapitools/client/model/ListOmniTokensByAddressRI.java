/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListOmniTokensByAddressRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class ListOmniTokensByAddressRI {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private String balance;

  public static final String SERIALIZED_NAME_FROZEN = "frozen";
  @SerializedName(SERIALIZED_NAME_FROZEN)
  private String frozen;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTY_ID = "propertyId";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  private Integer propertyId;

  public static final String SERIALIZED_NAME_RESERVED = "reserved";
  @SerializedName(SERIALIZED_NAME_RESERVED)
  private String reserved;

  public ListOmniTokensByAddressRI() { 
  }

  public ListOmniTokensByAddressRI balance(String balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Defines the balance of the Omni tokens to send in the address.
   * @return balance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "29", required = true, value = "Defines the balance of the Omni tokens to send in the address.")

  public String getBalance() {
    return balance;
  }


  public void setBalance(String balance) {
    this.balance = balance;
  }


  public ListOmniTokensByAddressRI frozen(String frozen) {
    
    this.frozen = frozen;
    return this;
  }

   /**
   * Defines the amount frozen by the issuer (applies to managed properties only).
   * @return frozen
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Defines the amount frozen by the issuer (applies to managed properties only).")

  public String getFrozen() {
    return frozen;
  }


  public void setFrozen(String frozen) {
    this.frozen = frozen;
  }


  public ListOmniTokensByAddressRI name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Defines the name of the Omni tokens to send.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Omni tokens", required = true, value = "Defines the name of the Omni tokens to send.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ListOmniTokensByAddressRI propertyId(Integer propertyId) {
    
    this.propertyId = propertyId;
    return this;
  }

   /**
   * Represents the identifier of the tokens to send.
   * @return propertyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "Represents the identifier of the tokens to send.")

  public Integer getPropertyId() {
    return propertyId;
  }


  public void setPropertyId(Integer propertyId) {
    this.propertyId = propertyId;
  }


  public ListOmniTokensByAddressRI reserved(String reserved) {
    
    this.reserved = reserved;
    return this;
  }

   /**
   * Represents the amount reserved by sell offers and accepts.
   * @return reserved
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Represents the amount reserved by sell offers and accepts.")

  public String getReserved() {
    return reserved;
  }


  public void setReserved(String reserved) {
    this.reserved = reserved;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListOmniTokensByAddressRI listOmniTokensByAddressRI = (ListOmniTokensByAddressRI) o;
    return Objects.equals(this.balance, listOmniTokensByAddressRI.balance) &&
        Objects.equals(this.frozen, listOmniTokensByAddressRI.frozen) &&
        Objects.equals(this.name, listOmniTokensByAddressRI.name) &&
        Objects.equals(this.propertyId, listOmniTokensByAddressRI.propertyId) &&
        Objects.equals(this.reserved, listOmniTokensByAddressRI.reserved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, frozen, name, propertyId, reserved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListOmniTokensByAddressRI {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("frozen");
    openapiFields.add("name");
    openapiFields.add("propertyId");
    openapiFields.add("reserved");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("frozen");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("propertyId");
    openapiRequiredFields.add("reserved");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListOmniTokensByAddressRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListOmniTokensByAddressRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListOmniTokensByAddressRI is not found in the empty JSON string", ListOmniTokensByAddressRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListOmniTokensByAddressRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListOmniTokensByAddressRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListOmniTokensByAddressRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("balance") != null && !jsonObj.get("balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balance").toString()));
      }
      if (jsonObj.get("frozen") != null && !jsonObj.get("frozen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frozen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frozen").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("reserved") != null && !jsonObj.get("reserved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reserved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reserved").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListOmniTokensByAddressRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListOmniTokensByAddressRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListOmniTokensByAddressRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListOmniTokensByAddressRI.class));

       return (TypeAdapter<T>) new TypeAdapter<ListOmniTokensByAddressRI>() {
           @Override
           public void write(JsonWriter out, ListOmniTokensByAddressRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListOmniTokensByAddressRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListOmniTokensByAddressRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListOmniTokensByAddressRI
  * @throws IOException if the JSON string is invalid with respect to ListOmniTokensByAddressRI
  */
  public static ListOmniTokensByAddressRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListOmniTokensByAddressRI.class);
  }

 /**
  * Convert an instance of ListOmniTokensByAddressRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

