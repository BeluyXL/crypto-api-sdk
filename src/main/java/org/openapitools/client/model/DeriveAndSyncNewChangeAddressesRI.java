/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * DeriveAndSyncNewChangeAddressesRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class DeriveAndSyncNewChangeAddressesRI {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADDRESS_FORMAT = "addressFormat";
  @SerializedName(SERIALIZED_NAME_ADDRESS_FORMAT)
  private String addressFormat;

  /**
   * Defines the address type.
   */
  @JsonAdapter(AddressTypeEnum.Adapter.class)
  public enum AddressTypeEnum {
    CHANGE("change");

    private String value;

    AddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressTypeEnum fromValue(String value) {
      for (AddressTypeEnum b : AddressTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddressTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private AddressTypeEnum addressType;

  /**
   * Represents the derivation type.
   */
  @JsonAdapter(DerivationTypeEnum.Adapter.class)
  public enum DerivationTypeEnum {
    ACCOUNT("account"),
    
    BIP32("bip32");

    private String value;

    DerivationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DerivationTypeEnum fromValue(String value) {
      for (DerivationTypeEnum b : DerivationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DerivationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DerivationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DerivationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DerivationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DERIVATION_TYPE = "derivationType";
  @SerializedName(SERIALIZED_NAME_DERIVATION_TYPE)
  private DerivationTypeEnum derivationType;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public DeriveAndSyncNewChangeAddressesRI() { 
  }

  public DeriveAndSyncNewChangeAddressesRI address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Represents the public address, which is a compressed and shortened form of a public key.
   * @return address
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "tb1q2sy5l2vn4p648g3ttjxegghp6w9nycvdxap4ef", required = true, value = "Represents the public address, which is a compressed and shortened form of a public key.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public DeriveAndSyncNewChangeAddressesRI addressFormat(String addressFormat) {
    
    this.addressFormat = addressFormat;
    return this;
  }

   /**
   * Represents the format of the address.
   * @return addressFormat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "P2WPKH", required = true, value = "Represents the format of the address.")

  public String getAddressFormat() {
    return addressFormat;
  }


  public void setAddressFormat(String addressFormat) {
    this.addressFormat = addressFormat;
  }


  public DeriveAndSyncNewChangeAddressesRI addressType(AddressTypeEnum addressType) {
    
    this.addressType = addressType;
    return this;
  }

   /**
   * Defines the address type.
   * @return addressType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "change", required = true, value = "Defines the address type.")

  public AddressTypeEnum getAddressType() {
    return addressType;
  }


  public void setAddressType(AddressTypeEnum addressType) {
    this.addressType = addressType;
  }


  public DeriveAndSyncNewChangeAddressesRI derivationType(DerivationTypeEnum derivationType) {
    
    this.derivationType = derivationType;
    return this;
  }

   /**
   * Represents the derivation type.
   * @return derivationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bip32", required = true, value = "Represents the derivation type.")

  public DerivationTypeEnum getDerivationType() {
    return derivationType;
  }


  public void setDerivationType(DerivationTypeEnum derivationType) {
    this.derivationType = derivationType;
  }


  public DeriveAndSyncNewChangeAddressesRI index(String index) {
    
    this.index = index;
    return this;
  }

   /**
   * Represents the output index. It refers to the UTXO sequence in the transaction outputs (vout).
   * @return index
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "Represents the output index. It refers to the UTXO sequence in the transaction outputs (vout).")

  public String getIndex() {
    return index;
  }


  public void setIndex(String index) {
    this.index = index;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeriveAndSyncNewChangeAddressesRI deriveAndSyncNewChangeAddressesRI = (DeriveAndSyncNewChangeAddressesRI) o;
    return Objects.equals(this.address, deriveAndSyncNewChangeAddressesRI.address) &&
        Objects.equals(this.addressFormat, deriveAndSyncNewChangeAddressesRI.addressFormat) &&
        Objects.equals(this.addressType, deriveAndSyncNewChangeAddressesRI.addressType) &&
        Objects.equals(this.derivationType, deriveAndSyncNewChangeAddressesRI.derivationType) &&
        Objects.equals(this.index, deriveAndSyncNewChangeAddressesRI.index);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, addressFormat, addressType, derivationType, index);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeriveAndSyncNewChangeAddressesRI {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    addressFormat: ").append(toIndentedString(addressFormat)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    derivationType: ").append(toIndentedString(derivationType)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("addressFormat");
    openapiFields.add("addressType");
    openapiFields.add("derivationType");
    openapiFields.add("index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("addressFormat");
    openapiRequiredFields.add("addressType");
    openapiRequiredFields.add("derivationType");
    openapiRequiredFields.add("index");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeriveAndSyncNewChangeAddressesRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DeriveAndSyncNewChangeAddressesRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeriveAndSyncNewChangeAddressesRI is not found in the empty JSON string", DeriveAndSyncNewChangeAddressesRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeriveAndSyncNewChangeAddressesRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeriveAndSyncNewChangeAddressesRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeriveAndSyncNewChangeAddressesRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (jsonObj.get("addressFormat") != null && !jsonObj.get("addressFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressFormat").toString()));
      }
      if (jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      if (jsonObj.get("derivationType") != null && !jsonObj.get("derivationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derivationType").toString()));
      }
      if (jsonObj.get("index") != null && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeriveAndSyncNewChangeAddressesRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeriveAndSyncNewChangeAddressesRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeriveAndSyncNewChangeAddressesRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeriveAndSyncNewChangeAddressesRI.class));

       return (TypeAdapter<T>) new TypeAdapter<DeriveAndSyncNewChangeAddressesRI>() {
           @Override
           public void write(JsonWriter out, DeriveAndSyncNewChangeAddressesRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeriveAndSyncNewChangeAddressesRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeriveAndSyncNewChangeAddressesRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeriveAndSyncNewChangeAddressesRI
  * @throws IOException if the JSON string is invalid with respect to DeriveAndSyncNewChangeAddressesRI
  */
  public static DeriveAndSyncNewChangeAddressesRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeriveAndSyncNewChangeAddressesRI.class);
  }

 /**
  * Convert an instance of DeriveAndSyncNewChangeAddressesRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

