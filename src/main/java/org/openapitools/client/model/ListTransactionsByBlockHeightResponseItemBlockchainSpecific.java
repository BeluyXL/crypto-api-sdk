/*
 * Crypto APIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVin;
import org.openapitools.client.model.ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVout;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoin;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificBitcoinCash;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDash;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificDogecoin;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereum;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassic;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassicGasPrice;
import org.openapitools.client.model.ListTransactionsByBlockHeightResponseItemBlockchainSpecificLitecoin;

/**
 * ListTransactionsByBlockHeightResponseItemBlockchainSpecific
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-21T16:59:17.199745Z[Etc/UTC]")
public class ListTransactionsByBlockHeightResponseItemBlockchainSpecific {
  public static final String SERIALIZED_NAME_LOCKTIME = "locktime";
  @SerializedName(SERIALIZED_NAME_LOCKTIME)
  private Integer locktime;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_V_SIZE = "vSize";
  @SerializedName(SERIALIZED_NAME_V_SIZE)
  private Integer vSize;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_VIN = "vin";
  @SerializedName(SERIALIZED_NAME_VIN)
  private List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVin> vin = new ArrayList<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVin>();

  public static final String SERIALIZED_NAME_VOUT = "vout";
  @SerializedName(SERIALIZED_NAME_VOUT)
  private List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVout> vout = new ArrayList<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVout>();

  public static final String SERIALIZED_NAME_CONTRACT = "contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  private String contract;

  public static final String SERIALIZED_NAME_GAS_LIMIT = "gasLimit";
  @SerializedName(SERIALIZED_NAME_GAS_LIMIT)
  private String gasLimit;

  public static final String SERIALIZED_NAME_GAS_PRICE = "gasPrice";
  @SerializedName(SERIALIZED_NAME_GAS_PRICE)
  private ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassicGasPrice gasPrice;

  public static final String SERIALIZED_NAME_GAS_USED = "gasUsed";
  @SerializedName(SERIALIZED_NAME_GAS_USED)
  private String gasUsed;

  public static final String SERIALIZED_NAME_INPUT_DATA = "inputData";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA)
  private String inputData;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  private String transactionStatus;

  public static final String SERIALIZED_NAME_VSIZE = "vsize";
  @SerializedName(SERIALIZED_NAME_VSIZE)
  private Integer vsize;


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific locktime(Integer locktime) {
    
    this.locktime = locktime;
    return this;
  }

   /**
   * Represents the time at which a particular transaction can be added to the blockchain.
   * @return locktime
  **/
  @ApiModelProperty(example = "1781965", required = true, value = "Represents the time at which a particular transaction can be added to the blockchain.")

  public Integer getLocktime() {
    return locktime;
  }


  public void setLocktime(Integer locktime) {
    this.locktime = locktime;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Represents the total size of this transaction.
   * @return size
  **/
  @ApiModelProperty(example = "248", required = true, value = "Represents the total size of this transaction.")

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific vSize(Integer vSize) {
    
    this.vSize = vSize;
    return this;
  }

   /**
   * Represents the virtual size of this transaction.
   * @return vSize
  **/
  @ApiModelProperty(example = "166", required = true, value = "Represents the virtual size of this transaction.")

  public Integer getvSize() {
    return vSize;
  }


  public void setvSize(Integer vSize) {
    this.vSize = vSize;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Represents the total size of this transaction.
   * @return version
  **/
  @ApiModelProperty(example = "1", required = true, value = "Represents the total size of this transaction.")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific vin(List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVin> vin) {
    
    this.vin = vin;
    return this;
  }

  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific addVinItem(ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVin vinItem) {
    this.vin.add(vinItem);
    return this;
  }

   /**
   * Represents the transaction inputs.
   * @return vin
  **/
  @ApiModelProperty(required = true, value = "Represents the transaction inputs.")

  public List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVin> getVin() {
    return vin;
  }


  public void setVin(List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVin> vin) {
    this.vin = vin;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific vout(List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVout> vout) {
    
    this.vout = vout;
    return this;
  }

  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific addVoutItem(ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVout voutItem) {
    this.vout.add(voutItem);
    return this;
  }

   /**
   * Represents the transaction outputs.
   * @return vout
  **/
  @ApiModelProperty(required = true, value = "Represents the transaction outputs.")

  public List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVout> getVout() {
    return vout;
  }


  public void setVout(List<ListTransactionsByBlockHashResponseItemBlockchainSpecificBitcoinCashVout> vout) {
    this.vout = vout;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific contract(String contract) {
    
    this.contract = contract;
    return this;
  }

   /**
   * Represents the specific transaction contract.
   * @return contract
  **/
  @ApiModelProperty(required = true, value = "Represents the specific transaction contract.")

  public String getContract() {
    return contract;
  }


  public void setContract(String contract) {
    this.contract = contract;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific gasLimit(String gasLimit) {
    
    this.gasLimit = gasLimit;
    return this;
  }

   /**
   * Represents the amount of gas used by this specific transaction alone.
   * @return gasLimit
  **/
  @ApiModelProperty(example = "21000", required = true, value = "Represents the amount of gas used by this specific transaction alone.")

  public String getGasLimit() {
    return gasLimit;
  }


  public void setGasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific gasPrice(ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassicGasPrice gasPrice) {
    
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * Get gasPrice
   * @return gasPrice
  **/
  @ApiModelProperty(required = true, value = "")

  public ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassicGasPrice getGasPrice() {
    return gasPrice;
  }


  public void setGasPrice(ListTransactionsByBlockHeightResponseItemBlockchainSpecificEthereumClassicGasPrice gasPrice) {
    this.gasPrice = gasPrice;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific gasUsed(String gasUsed) {
    
    this.gasUsed = gasUsed;
    return this;
  }

   /**
   * Represents the exact unit of gas that was used for the transaction.
   * @return gasUsed
  **/
  @ApiModelProperty(example = "21000", required = true, value = "Represents the exact unit of gas that was used for the transaction.")

  public String getGasUsed() {
    return gasUsed;
  }


  public void setGasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific inputData(String inputData) {
    
    this.inputData = inputData;
    return this;
  }

   /**
   * Represents additional information that is required for the transaction.
   * @return inputData
  **/
  @ApiModelProperty(example = "0x67a5cd0600000000000000000000000031f42841c2db5173425b5223809cf3a38fede360", required = true, value = "Represents additional information that is required for the transaction.")

  public String getInputData() {
    return inputData;
  }


  public void setInputData(String inputData) {
    this.inputData = inputData;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender&#39;s address.
   * @return nonce
  **/
  @ApiModelProperty(example = "15", required = true, value = "Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific transactionStatus(String transactionStatus) {
    
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * Represents the status of this transaction.
   * @return transactionStatus
  **/
  @ApiModelProperty(required = true, value = "Represents the status of this transaction.")

  public String getTransactionStatus() {
    return transactionStatus;
  }


  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public ListTransactionsByBlockHeightResponseItemBlockchainSpecific vsize(Integer vsize) {
    
    this.vsize = vsize;
    return this;
  }

   /**
   * Represents the virtual size of this transaction.
   * @return vsize
  **/
  @ApiModelProperty(example = "141", required = true, value = "Represents the virtual size of this transaction.")

  public Integer getVsize() {
    return vsize;
  }


  public void setVsize(Integer vsize) {
    this.vsize = vsize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTransactionsByBlockHeightResponseItemBlockchainSpecific listTransactionsByBlockHeightResponseItemBlockchainSpecific = (ListTransactionsByBlockHeightResponseItemBlockchainSpecific) o;
    return Objects.equals(this.locktime, listTransactionsByBlockHeightResponseItemBlockchainSpecific.locktime) &&
        Objects.equals(this.size, listTransactionsByBlockHeightResponseItemBlockchainSpecific.size) &&
        Objects.equals(this.vSize, listTransactionsByBlockHeightResponseItemBlockchainSpecific.vSize) &&
        Objects.equals(this.version, listTransactionsByBlockHeightResponseItemBlockchainSpecific.version) &&
        Objects.equals(this.vin, listTransactionsByBlockHeightResponseItemBlockchainSpecific.vin) &&
        Objects.equals(this.vout, listTransactionsByBlockHeightResponseItemBlockchainSpecific.vout) &&
        Objects.equals(this.contract, listTransactionsByBlockHeightResponseItemBlockchainSpecific.contract) &&
        Objects.equals(this.gasLimit, listTransactionsByBlockHeightResponseItemBlockchainSpecific.gasLimit) &&
        Objects.equals(this.gasPrice, listTransactionsByBlockHeightResponseItemBlockchainSpecific.gasPrice) &&
        Objects.equals(this.gasUsed, listTransactionsByBlockHeightResponseItemBlockchainSpecific.gasUsed) &&
        Objects.equals(this.inputData, listTransactionsByBlockHeightResponseItemBlockchainSpecific.inputData) &&
        Objects.equals(this.nonce, listTransactionsByBlockHeightResponseItemBlockchainSpecific.nonce) &&
        Objects.equals(this.transactionStatus, listTransactionsByBlockHeightResponseItemBlockchainSpecific.transactionStatus) &&
        Objects.equals(this.vsize, listTransactionsByBlockHeightResponseItemBlockchainSpecific.vsize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locktime, size, vSize, version, vin, vout, contract, gasLimit, gasPrice, gasUsed, inputData, nonce, transactionStatus, vsize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTransactionsByBlockHeightResponseItemBlockchainSpecific {\n");
    sb.append("    locktime: ").append(toIndentedString(locktime)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    vSize: ").append(toIndentedString(vSize)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    vout: ").append(toIndentedString(vout)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    inputData: ").append(toIndentedString(inputData)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    vsize: ").append(toIndentedString(vsize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

