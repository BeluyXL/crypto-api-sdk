/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListHDWalletXPubYPubZPubUTXOsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class ListHDWalletXPubYPubZPubUTXOsRI {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADDRESS_PATH = "addressPath";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PATH)
  private String addressPath;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_DERIVATION = "derivation";
  @SerializedName(SERIALIZED_NAME_DERIVATION)
  private String derivation;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "isAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_IS_CONFIRMED = "isConfirmed";
  @SerializedName(SERIALIZED_NAME_IS_CONFIRMED)
  private Boolean isConfirmed;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public ListHDWalletXPubYPubZPubUTXOsRI() { 
  }

  public ListHDWalletXPubYPubZPubUTXOsRI address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Represents the public address, which is a compressed and shortened form of a public key.
   * @return address
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "muZxmnQiz8gZgpYmUoTHpD2CFTHWYEjTwB", required = true, value = "Represents the public address, which is a compressed and shortened form of a public key.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI addressPath(String addressPath) {
    
    this.addressPath = addressPath;
    return this;
  }

   /**
   * Defines a data which tells a Hierarchical Deterministic wallet how to derive a specific key within a tree of keys.
   * @return addressPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "m/0/5", required = true, value = "Defines a data which tells a Hierarchical Deterministic wallet how to derive a specific key within a tree of keys.")

  public String getAddressPath() {
    return addressPath;
  }


  public void setAddressPath(String addressPath) {
    this.addressPath = addressPath;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Represents the UTXO amount value.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.0005", required = true, value = "Represents the UTXO amount value.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI derivation(String derivation) {
    
    this.derivation = derivation;
    return this;
  }

   /**
   * The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly.
   * @return derivation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACCOUNT", required = true, value = "The way how the HD walled derives, for example when the type is ACCOUNT, it derives change and receive addresses while when the type is BIP32 it derives directly.")

  public String getDerivation() {
    return derivation;
  }


  public void setDerivation(String derivation) {
    this.derivation = derivation;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI index(Integer index) {
    
    this.index = index;
    return this;
  }

   /**
   * Represents the output index. It refers to the UTXO sequence in the transaction outputs (vout).
   * @return index
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "Represents the output index. It refers to the UTXO sequence in the transaction outputs (vout).")

  public Integer getIndex() {
    return index;
  }


  public void setIndex(Integer index) {
    this.index = index;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI isAvailable(Boolean isAvailable) {
    
    this.isAvailable = isAvailable;
    return this;
  }

   /**
   * Represents if the UTXO has been used from another unconfirmed transaction. If it is - the value will be \&quot;false\&quot;.
   * @return isAvailable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Represents if the UTXO has been used from another unconfirmed transaction. If it is - the value will be \"false\".")

  public Boolean getIsAvailable() {
    return isAvailable;
  }


  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI isConfirmed(Boolean isConfirmed) {
    
    this.isConfirmed = isConfirmed;
    return this;
  }

   /**
   * Represents the state of the transaction whether it is confirmed or not confirmed.
   * @return isConfirmed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Represents the state of the transaction whether it is confirmed or not confirmed.")

  public Boolean getIsConfirmed() {
    return isConfirmed;
  }


  public void setIsConfirmed(Boolean isConfirmed) {
    this.isConfirmed = isConfirmed;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI referenceId(String referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Represents the reference id of the record. It may be used for the startingAfter pagination attribute.
   * @return referenceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5b1ea92e584bf50020130615", required = true, value = "Represents the reference id of the record. It may be used for the startingAfter pagination attribute.")

  public String getReferenceId() {
    return referenceId;
  }


  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public ListHDWalletXPubYPubZPubUTXOsRI transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "06af8234602b97f497496039a6eb99810db1287ce8aa3c501894dcd03bd4e544", required = true, value = "Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListHDWalletXPubYPubZPubUTXOsRI listHDWalletXPubYPubZPubUTXOsRI = (ListHDWalletXPubYPubZPubUTXOsRI) o;
    return Objects.equals(this.address, listHDWalletXPubYPubZPubUTXOsRI.address) &&
        Objects.equals(this.addressPath, listHDWalletXPubYPubZPubUTXOsRI.addressPath) &&
        Objects.equals(this.amount, listHDWalletXPubYPubZPubUTXOsRI.amount) &&
        Objects.equals(this.derivation, listHDWalletXPubYPubZPubUTXOsRI.derivation) &&
        Objects.equals(this.index, listHDWalletXPubYPubZPubUTXOsRI.index) &&
        Objects.equals(this.isAvailable, listHDWalletXPubYPubZPubUTXOsRI.isAvailable) &&
        Objects.equals(this.isConfirmed, listHDWalletXPubYPubZPubUTXOsRI.isConfirmed) &&
        Objects.equals(this.referenceId, listHDWalletXPubYPubZPubUTXOsRI.referenceId) &&
        Objects.equals(this.transactionId, listHDWalletXPubYPubZPubUTXOsRI.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, addressPath, amount, derivation, index, isAvailable, isConfirmed, referenceId, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListHDWalletXPubYPubZPubUTXOsRI {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    addressPath: ").append(toIndentedString(addressPath)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    derivation: ").append(toIndentedString(derivation)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    isConfirmed: ").append(toIndentedString(isConfirmed)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("addressPath");
    openapiFields.add("amount");
    openapiFields.add("derivation");
    openapiFields.add("index");
    openapiFields.add("isAvailable");
    openapiFields.add("isConfirmed");
    openapiFields.add("referenceId");
    openapiFields.add("transactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("addressPath");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("derivation");
    openapiRequiredFields.add("index");
    openapiRequiredFields.add("isAvailable");
    openapiRequiredFields.add("isConfirmed");
    openapiRequiredFields.add("referenceId");
    openapiRequiredFields.add("transactionId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListHDWalletXPubYPubZPubUTXOsRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListHDWalletXPubYPubZPubUTXOsRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListHDWalletXPubYPubZPubUTXOsRI is not found in the empty JSON string", ListHDWalletXPubYPubZPubUTXOsRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListHDWalletXPubYPubZPubUTXOsRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListHDWalletXPubYPubZPubUTXOsRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListHDWalletXPubYPubZPubUTXOsRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (jsonObj.get("addressPath") != null && !jsonObj.get("addressPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPath").toString()));
      }
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (jsonObj.get("derivation") != null && !jsonObj.get("derivation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derivation").toString()));
      }
      if (jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if (jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListHDWalletXPubYPubZPubUTXOsRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListHDWalletXPubYPubZPubUTXOsRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListHDWalletXPubYPubZPubUTXOsRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListHDWalletXPubYPubZPubUTXOsRI.class));

       return (TypeAdapter<T>) new TypeAdapter<ListHDWalletXPubYPubZPubUTXOsRI>() {
           @Override
           public void write(JsonWriter out, ListHDWalletXPubYPubZPubUTXOsRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListHDWalletXPubYPubZPubUTXOsRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListHDWalletXPubYPubZPubUTXOsRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListHDWalletXPubYPubZPubUTXOsRI
  * @throws IOException if the JSON string is invalid with respect to ListHDWalletXPubYPubZPubUTXOsRI
  */
  public static ListHDWalletXPubYPubZPubUTXOsRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListHDWalletXPubYPubZPubUTXOsRI.class);
  }

 /**
  * Convert an instance of ListHDWalletXPubYPubZPubUTXOsRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

