/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ListAssetsDetailsRIAssetLogo;
import org.openapitools.client.model.ListAssetsDetailsRILatestRate;
import org.openapitools.client.model.ListAssetsDetailsRIS;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListAssetsDetailsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class ListAssetsDetailsRI {
  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  public static final String SERIALIZED_NAME_ASSET_LOGO = "assetLogo";
  @SerializedName(SERIALIZED_NAME_ASSET_LOGO)
  private ListAssetsDetailsRIAssetLogo assetLogo;

  public static final String SERIALIZED_NAME_ASSET_NAME = "assetName";
  @SerializedName(SERIALIZED_NAME_ASSET_NAME)
  private String assetName;

  public static final String SERIALIZED_NAME_ASSET_ORIGINAL_SYMBOL = "assetOriginalSymbol";
  @SerializedName(SERIALIZED_NAME_ASSET_ORIGINAL_SYMBOL)
  private String assetOriginalSymbol;

  public static final String SERIALIZED_NAME_ASSET_SYMBOL = "assetSymbol";
  @SerializedName(SERIALIZED_NAME_ASSET_SYMBOL)
  private String assetSymbol;

  /**
   * Defines the type of the supported asset. This could be either \&quot;crypto\&quot; or \&quot;fiat\&quot;.
   */
  @JsonAdapter(AssetTypeEnum.Adapter.class)
  public enum AssetTypeEnum {
    FIAT("fiat"),
    
    CRYPTO("crypto");

    private String value;

    AssetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetTypeEnum fromValue(String value) {
      for (AssetTypeEnum b : AssetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ASSET_TYPE = "assetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private AssetTypeEnum assetType;

  public static final String SERIALIZED_NAME_LATEST_RATE = "latestRate";
  @SerializedName(SERIALIZED_NAME_LATEST_RATE)
  private ListAssetsDetailsRILatestRate latestRate;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SPECIFIC_DATA = "specificData";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_DATA)
  private ListAssetsDetailsRIS specificData;

  public ListAssetsDetailsRI() { 
  }

  public ListAssetsDetailsRI assetId(String assetId) {
    
    this.assetId = assetId;
    return this;
  }

   /**
   * Defines the unique ID of the specific asset.
   * @return assetId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5b1ea92e584bf50020130615", required = true, value = "Defines the unique ID of the specific asset.")

  public String getAssetId() {
    return assetId;
  }


  public void setAssetId(String assetId) {
    this.assetId = assetId;
  }


  public ListAssetsDetailsRI assetLogo(ListAssetsDetailsRIAssetLogo assetLogo) {
    
    this.assetLogo = assetLogo;
    return this;
  }

   /**
   * Get assetLogo
   * @return assetLogo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListAssetsDetailsRIAssetLogo getAssetLogo() {
    return assetLogo;
  }


  public void setAssetLogo(ListAssetsDetailsRIAssetLogo assetLogo) {
    this.assetLogo = assetLogo;
  }


  public ListAssetsDetailsRI assetName(String assetName) {
    
    this.assetName = assetName;
    return this;
  }

   /**
   * Specifies the name of the asset in question.
   * @return assetName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Bitcoin", required = true, value = "Specifies the name of the asset in question.")

  public String getAssetName() {
    return assetName;
  }


  public void setAssetName(String assetName) {
    this.assetName = assetName;
  }


  public ListAssetsDetailsRI assetOriginalSymbol(String assetOriginalSymbol) {
    
    this.assetOriginalSymbol = assetOriginalSymbol;
    return this;
  }

   /**
   * Specifies the asset&#39;s original symbol as introduced by its founders.
   * @return assetOriginalSymbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTC", required = true, value = "Specifies the asset's original symbol as introduced by its founders.")

  public String getAssetOriginalSymbol() {
    return assetOriginalSymbol;
  }


  public void setAssetOriginalSymbol(String assetOriginalSymbol) {
    this.assetOriginalSymbol = assetOriginalSymbol;
  }


  public ListAssetsDetailsRI assetSymbol(String assetSymbol) {
    
    this.assetSymbol = assetSymbol;
    return this;
  }

   /**
   * Specifies the asset&#39;s unique symbol in the Crypto APIs listings.
   * @return assetSymbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTC", required = true, value = "Specifies the asset's unique symbol in the Crypto APIs listings.")

  public String getAssetSymbol() {
    return assetSymbol;
  }


  public void setAssetSymbol(String assetSymbol) {
    this.assetSymbol = assetSymbol;
  }


  public ListAssetsDetailsRI assetType(AssetTypeEnum assetType) {
    
    this.assetType = assetType;
    return this;
  }

   /**
   * Defines the type of the supported asset. This could be either \&quot;crypto\&quot; or \&quot;fiat\&quot;.
   * @return assetType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "crypto", required = true, value = "Defines the type of the supported asset. This could be either \"crypto\" or \"fiat\".")

  public AssetTypeEnum getAssetType() {
    return assetType;
  }


  public void setAssetType(AssetTypeEnum assetType) {
    this.assetType = assetType;
  }


  public ListAssetsDetailsRI latestRate(ListAssetsDetailsRILatestRate latestRate) {
    
    this.latestRate = latestRate;
    return this;
  }

   /**
   * Get latestRate
   * @return latestRate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListAssetsDetailsRILatestRate getLatestRate() {
    return latestRate;
  }


  public void setLatestRate(ListAssetsDetailsRILatestRate latestRate) {
    this.latestRate = latestRate;
  }


  public ListAssetsDetailsRI slug(String slug) {
    
    this.slug = slug;
    return this;
  }

   /**
   * Represents the asset&#x60;s unique slug string in Crypto APIs listings.
   * @return slug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "tether", value = "Represents the asset`s unique slug string in Crypto APIs listings.")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    this.slug = slug;
  }


  public ListAssetsDetailsRI specificData(ListAssetsDetailsRIS specificData) {
    
    this.specificData = specificData;
    return this;
  }

   /**
   * Get specificData
   * @return specificData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListAssetsDetailsRIS getSpecificData() {
    return specificData;
  }


  public void setSpecificData(ListAssetsDetailsRIS specificData) {
    this.specificData = specificData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAssetsDetailsRI listAssetsDetailsRI = (ListAssetsDetailsRI) o;
    return Objects.equals(this.assetId, listAssetsDetailsRI.assetId) &&
        Objects.equals(this.assetLogo, listAssetsDetailsRI.assetLogo) &&
        Objects.equals(this.assetName, listAssetsDetailsRI.assetName) &&
        Objects.equals(this.assetOriginalSymbol, listAssetsDetailsRI.assetOriginalSymbol) &&
        Objects.equals(this.assetSymbol, listAssetsDetailsRI.assetSymbol) &&
        Objects.equals(this.assetType, listAssetsDetailsRI.assetType) &&
        Objects.equals(this.latestRate, listAssetsDetailsRI.latestRate) &&
        Objects.equals(this.slug, listAssetsDetailsRI.slug) &&
        Objects.equals(this.specificData, listAssetsDetailsRI.specificData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetId, assetLogo, assetName, assetOriginalSymbol, assetSymbol, assetType, latestRate, slug, specificData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAssetsDetailsRI {\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    assetLogo: ").append(toIndentedString(assetLogo)).append("\n");
    sb.append("    assetName: ").append(toIndentedString(assetName)).append("\n");
    sb.append("    assetOriginalSymbol: ").append(toIndentedString(assetOriginalSymbol)).append("\n");
    sb.append("    assetSymbol: ").append(toIndentedString(assetSymbol)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    latestRate: ").append(toIndentedString(latestRate)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    specificData: ").append(toIndentedString(specificData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetId");
    openapiFields.add("assetLogo");
    openapiFields.add("assetName");
    openapiFields.add("assetOriginalSymbol");
    openapiFields.add("assetSymbol");
    openapiFields.add("assetType");
    openapiFields.add("latestRate");
    openapiFields.add("slug");
    openapiFields.add("specificData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assetId");
    openapiRequiredFields.add("assetLogo");
    openapiRequiredFields.add("assetName");
    openapiRequiredFields.add("assetOriginalSymbol");
    openapiRequiredFields.add("assetSymbol");
    openapiRequiredFields.add("assetType");
    openapiRequiredFields.add("latestRate");
    openapiRequiredFields.add("specificData");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAssetsDetailsRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListAssetsDetailsRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAssetsDetailsRI is not found in the empty JSON string", ListAssetsDetailsRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAssetsDetailsRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAssetsDetailsRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAssetsDetailsRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
      }
      // validate the optional field `assetLogo`
      if (jsonObj.getAsJsonObject("assetLogo") != null) {
        ListAssetsDetailsRIAssetLogo.validateJsonObject(jsonObj.getAsJsonObject("assetLogo"));
      }
      if (jsonObj.get("assetName") != null && !jsonObj.get("assetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetName").toString()));
      }
      if (jsonObj.get("assetOriginalSymbol") != null && !jsonObj.get("assetOriginalSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetOriginalSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetOriginalSymbol").toString()));
      }
      if (jsonObj.get("assetSymbol") != null && !jsonObj.get("assetSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetSymbol").toString()));
      }
      if (jsonObj.get("assetType") != null && !jsonObj.get("assetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetType").toString()));
      }
      // validate the optional field `latestRate`
      if (jsonObj.getAsJsonObject("latestRate") != null) {
        ListAssetsDetailsRILatestRate.validateJsonObject(jsonObj.getAsJsonObject("latestRate"));
      }
      if (jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // validate the optional field `specificData`
      if (jsonObj.getAsJsonObject("specificData") != null) {
        ListAssetsDetailsRIS.validateJsonObject(jsonObj.getAsJsonObject("specificData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAssetsDetailsRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAssetsDetailsRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAssetsDetailsRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAssetsDetailsRI.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAssetsDetailsRI>() {
           @Override
           public void write(JsonWriter out, ListAssetsDetailsRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAssetsDetailsRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAssetsDetailsRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAssetsDetailsRI
  * @throws IOException if the JSON string is invalid with respect to ListAssetsDetailsRI
  */
  public static ListAssetsDetailsRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAssetsDetailsRI.class);
  }

 /**
  * Convert an instance of ListAssetsDetailsRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

