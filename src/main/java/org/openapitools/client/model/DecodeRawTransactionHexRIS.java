/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DecodeRawTransactionHexRISB;
import org.openapitools.client.model.DecodeRawTransactionHexRISB2;
import org.openapitools.client.model.DecodeRawTransactionHexRISB22;
import org.openapitools.client.model.DecodeRawTransactionHexRISD;
import org.openapitools.client.model.DecodeRawTransactionHexRISD2;
import org.openapitools.client.model.DecodeRawTransactionHexRISE;
import org.openapitools.client.model.DecodeRawTransactionHexRISE2;
import org.openapitools.client.model.DecodeRawTransactionHexRISL;
import org.openapitools.client.model.DecodeRawTransactionHexRISZ;
import org.openapitools.client.model.DecodeRawTransactionHexRISZVinInner;
import org.openapitools.client.model.DecodeRawTransactionHexRISZVoutInner;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class DecodeRawTransactionHexRIS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DecodeRawTransactionHexRIS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DecodeRawTransactionHexRIS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DecodeRawTransactionHexRIS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DecodeRawTransactionHexRISB> adapterDecodeRawTransactionHexRISB = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISB.class));
            final TypeAdapter<DecodeRawTransactionHexRISB2> adapterDecodeRawTransactionHexRISB2 = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISB2.class));
            final TypeAdapter<DecodeRawTransactionHexRISB22> adapterDecodeRawTransactionHexRISB22 = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISB22.class));
            final TypeAdapter<DecodeRawTransactionHexRISD> adapterDecodeRawTransactionHexRISD = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISD.class));
            final TypeAdapter<DecodeRawTransactionHexRISD2> adapterDecodeRawTransactionHexRISD2 = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISD2.class));
            final TypeAdapter<DecodeRawTransactionHexRISE> adapterDecodeRawTransactionHexRISE = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISE.class));
            final TypeAdapter<DecodeRawTransactionHexRISE2> adapterDecodeRawTransactionHexRISE2 = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISE2.class));
            final TypeAdapter<DecodeRawTransactionHexRISL> adapterDecodeRawTransactionHexRISL = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISL.class));
            final TypeAdapter<DecodeRawTransactionHexRISZ> adapterDecodeRawTransactionHexRISZ = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISZ.class));

            return (TypeAdapter<T>) new TypeAdapter<DecodeRawTransactionHexRIS>() {
                @Override
                public void write(JsonWriter out, DecodeRawTransactionHexRIS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISB`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISB) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISB.toJsonTree((DecodeRawTransactionHexRISB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISB2`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISB2) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISB2.toJsonTree((DecodeRawTransactionHexRISB2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISB22`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISB22) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISB22.toJsonTree((DecodeRawTransactionHexRISB22)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISD`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISD) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISD.toJsonTree((DecodeRawTransactionHexRISD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISD2`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISD2) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISD2.toJsonTree((DecodeRawTransactionHexRISD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISE`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISE) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISE.toJsonTree((DecodeRawTransactionHexRISE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISE2`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISE2) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISE2.toJsonTree((DecodeRawTransactionHexRISE2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISL`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISL) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISL.toJsonTree((DecodeRawTransactionHexRISL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DecodeRawTransactionHexRISZ`
                    if (value.getActualInstance() instanceof DecodeRawTransactionHexRISZ) {
                        JsonObject obj = adapterDecodeRawTransactionHexRISZ.toJsonTree((DecodeRawTransactionHexRISZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: DecodeRawTransactionHexRISB, DecodeRawTransactionHexRISB2, DecodeRawTransactionHexRISB22, DecodeRawTransactionHexRISD, DecodeRawTransactionHexRISD2, DecodeRawTransactionHexRISE, DecodeRawTransactionHexRISE2, DecodeRawTransactionHexRISL, DecodeRawTransactionHexRISZ");
                }

                @Override
                public DecodeRawTransactionHexRIS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize DecodeRawTransactionHexRISB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISB.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISB'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISB2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISB2.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISB2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISB2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISB2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISB2'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISB22
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISB22.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISB22;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISB22'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISB22 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISB22'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISD.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISD'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISD2'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISE.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISE'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISE2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISE2.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISE2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISE2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISE2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISE2'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISL.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISL'", e);
                    }

                    // deserialize DecodeRawTransactionHexRISZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DecodeRawTransactionHexRISZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterDecodeRawTransactionHexRISZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DecodeRawTransactionHexRISZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DecodeRawTransactionHexRISZ'", e);
                    }

                    if (match == 1) {
                        DecodeRawTransactionHexRIS ret = new DecodeRawTransactionHexRIS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DecodeRawTransactionHexRIS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public DecodeRawTransactionHexRIS() {
        super("oneOf", Boolean.FALSE);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISB2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISB22 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISE2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexRIS(DecodeRawTransactionHexRISZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("DecodeRawTransactionHexRISB", new GenericType<DecodeRawTransactionHexRISB>() {
        });
        schemas.put("DecodeRawTransactionHexRISB2", new GenericType<DecodeRawTransactionHexRISB2>() {
        });
        schemas.put("DecodeRawTransactionHexRISB22", new GenericType<DecodeRawTransactionHexRISB22>() {
        });
        schemas.put("DecodeRawTransactionHexRISD", new GenericType<DecodeRawTransactionHexRISD>() {
        });
        schemas.put("DecodeRawTransactionHexRISD2", new GenericType<DecodeRawTransactionHexRISD2>() {
        });
        schemas.put("DecodeRawTransactionHexRISE", new GenericType<DecodeRawTransactionHexRISE>() {
        });
        schemas.put("DecodeRawTransactionHexRISE2", new GenericType<DecodeRawTransactionHexRISE2>() {
        });
        schemas.put("DecodeRawTransactionHexRISL", new GenericType<DecodeRawTransactionHexRISL>() {
        });
        schemas.put("DecodeRawTransactionHexRISZ", new GenericType<DecodeRawTransactionHexRISZ>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return DecodeRawTransactionHexRIS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * DecodeRawTransactionHexRISB, DecodeRawTransactionHexRISB2, DecodeRawTransactionHexRISB22, DecodeRawTransactionHexRISD, DecodeRawTransactionHexRISD2, DecodeRawTransactionHexRISE, DecodeRawTransactionHexRISE2, DecodeRawTransactionHexRISL, DecodeRawTransactionHexRISZ
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof DecodeRawTransactionHexRISB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISB2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISB22) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISE2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DecodeRawTransactionHexRISZ) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be DecodeRawTransactionHexRISB, DecodeRawTransactionHexRISB2, DecodeRawTransactionHexRISB22, DecodeRawTransactionHexRISD, DecodeRawTransactionHexRISD2, DecodeRawTransactionHexRISE, DecodeRawTransactionHexRISE2, DecodeRawTransactionHexRISL, DecodeRawTransactionHexRISZ");
    }

    /**
     * Get the actual instance, which can be the following:
     * DecodeRawTransactionHexRISB, DecodeRawTransactionHexRISB2, DecodeRawTransactionHexRISB22, DecodeRawTransactionHexRISD, DecodeRawTransactionHexRISD2, DecodeRawTransactionHexRISE, DecodeRawTransactionHexRISE2, DecodeRawTransactionHexRISL, DecodeRawTransactionHexRISZ
     *
     * @return The actual instance (DecodeRawTransactionHexRISB, DecodeRawTransactionHexRISB2, DecodeRawTransactionHexRISB22, DecodeRawTransactionHexRISD, DecodeRawTransactionHexRISD2, DecodeRawTransactionHexRISE, DecodeRawTransactionHexRISE2, DecodeRawTransactionHexRISL, DecodeRawTransactionHexRISZ)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISB`. If the actual instance is not `DecodeRawTransactionHexRISB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISB`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISB`
     */
    public DecodeRawTransactionHexRISB getDecodeRawTransactionHexRISB() throws ClassCastException {
        return (DecodeRawTransactionHexRISB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISB2`. If the actual instance is not `DecodeRawTransactionHexRISB2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISB2`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISB2`
     */
    public DecodeRawTransactionHexRISB2 getDecodeRawTransactionHexRISB2() throws ClassCastException {
        return (DecodeRawTransactionHexRISB2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISB22`. If the actual instance is not `DecodeRawTransactionHexRISB22`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISB22`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISB22`
     */
    public DecodeRawTransactionHexRISB22 getDecodeRawTransactionHexRISB22() throws ClassCastException {
        return (DecodeRawTransactionHexRISB22)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISD`. If the actual instance is not `DecodeRawTransactionHexRISD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISD`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISD`
     */
    public DecodeRawTransactionHexRISD getDecodeRawTransactionHexRISD() throws ClassCastException {
        return (DecodeRawTransactionHexRISD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISD2`. If the actual instance is not `DecodeRawTransactionHexRISD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISD2`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISD2`
     */
    public DecodeRawTransactionHexRISD2 getDecodeRawTransactionHexRISD2() throws ClassCastException {
        return (DecodeRawTransactionHexRISD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISE`. If the actual instance is not `DecodeRawTransactionHexRISE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISE`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISE`
     */
    public DecodeRawTransactionHexRISE getDecodeRawTransactionHexRISE() throws ClassCastException {
        return (DecodeRawTransactionHexRISE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISE2`. If the actual instance is not `DecodeRawTransactionHexRISE2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISE2`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISE2`
     */
    public DecodeRawTransactionHexRISE2 getDecodeRawTransactionHexRISE2() throws ClassCastException {
        return (DecodeRawTransactionHexRISE2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISL`. If the actual instance is not `DecodeRawTransactionHexRISL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISL`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISL`
     */
    public DecodeRawTransactionHexRISL getDecodeRawTransactionHexRISL() throws ClassCastException {
        return (DecodeRawTransactionHexRISL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DecodeRawTransactionHexRISZ`. If the actual instance is not `DecodeRawTransactionHexRISZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DecodeRawTransactionHexRISZ`
     * @throws ClassCastException if the instance is not `DecodeRawTransactionHexRISZ`
     */
    public DecodeRawTransactionHexRISZ getDecodeRawTransactionHexRISZ() throws ClassCastException {
        return (DecodeRawTransactionHexRISZ)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DecodeRawTransactionHexRIS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with DecodeRawTransactionHexRISB
    try {
      DecodeRawTransactionHexRISB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISB2
    try {
      DecodeRawTransactionHexRISB2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISB2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISB22
    try {
      DecodeRawTransactionHexRISB22.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISB22 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISD
    try {
      DecodeRawTransactionHexRISD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISD2
    try {
      DecodeRawTransactionHexRISD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISE
    try {
      DecodeRawTransactionHexRISE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISE failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISE2
    try {
      DecodeRawTransactionHexRISE2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISE2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISL
    try {
      DecodeRawTransactionHexRISL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DecodeRawTransactionHexRISZ
    try {
      DecodeRawTransactionHexRISZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DecodeRawTransactionHexRISZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for DecodeRawTransactionHexRIS with oneOf schemas: DecodeRawTransactionHexRISB, DecodeRawTransactionHexRISB2, DecodeRawTransactionHexRISB22, DecodeRawTransactionHexRISD, DecodeRawTransactionHexRISD2, DecodeRawTransactionHexRISE, DecodeRawTransactionHexRISE2, DecodeRawTransactionHexRISL, DecodeRawTransactionHexRISZ. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of DecodeRawTransactionHexRIS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DecodeRawTransactionHexRIS
  * @throws IOException if the JSON string is invalid with respect to DecodeRawTransactionHexRIS
  */
  public static DecodeRawTransactionHexRIS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecodeRawTransactionHexRIS.class);
  }

 /**
  * Convert an instance of DecodeRawTransactionHexRIS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

