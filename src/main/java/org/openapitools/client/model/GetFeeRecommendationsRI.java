/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetFeeRecommendationsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class GetFeeRecommendationsRI {
  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_FAST = "fast";
  @SerializedName(SERIALIZED_NAME_FAST)
  private String fast;

  public static final String SERIALIZED_NAME_SLOW = "slow";
  @SerializedName(SERIALIZED_NAME_SLOW)
  private String slow;

  public static final String SERIALIZED_NAME_STANDARD = "standard";
  @SerializedName(SERIALIZED_NAME_STANDARD)
  private String standard;

  public GetFeeRecommendationsRI() { 
  }

  public GetFeeRecommendationsRI unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Currency unit
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTC", required = true, value = "Currency unit")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    this.unit = unit;
  }


  public GetFeeRecommendationsRI fast(String fast) {
    
    this.fast = fast;
    return this;
  }

   /**
   * Fast fee per byte calculated from unconfirmed transactions
   * @return fast
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.000025", required = true, value = "Fast fee per byte calculated from unconfirmed transactions")

  public String getFast() {
    return fast;
  }


  public void setFast(String fast) {
    this.fast = fast;
  }


  public GetFeeRecommendationsRI slow(String slow) {
    
    this.slow = slow;
    return this;
  }

   /**
   * Slow fee per byte calculated from unconfirmed transactions
   * @return slow
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.000010", required = true, value = "Slow fee per byte calculated from unconfirmed transactions")

  public String getSlow() {
    return slow;
  }


  public void setSlow(String slow) {
    this.slow = slow;
  }


  public GetFeeRecommendationsRI standard(String standard) {
    
    this.standard = standard;
    return this;
  }

   /**
   * Standard fee per byte calculated from unconfirmed transactions
   * @return standard
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.000015", required = true, value = "Standard fee per byte calculated from unconfirmed transactions")

  public String getStandard() {
    return standard;
  }


  public void setStandard(String standard) {
    this.standard = standard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFeeRecommendationsRI getFeeRecommendationsRI = (GetFeeRecommendationsRI) o;
    return Objects.equals(this.unit, getFeeRecommendationsRI.unit) &&
        Objects.equals(this.fast, getFeeRecommendationsRI.fast) &&
        Objects.equals(this.slow, getFeeRecommendationsRI.slow) &&
        Objects.equals(this.standard, getFeeRecommendationsRI.standard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unit, fast, slow, standard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFeeRecommendationsRI {\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    fast: ").append(toIndentedString(fast)).append("\n");
    sb.append("    slow: ").append(toIndentedString(slow)).append("\n");
    sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unit");
    openapiFields.add("fast");
    openapiFields.add("slow");
    openapiFields.add("standard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("unit");
    openapiRequiredFields.add("fast");
    openapiRequiredFields.add("slow");
    openapiRequiredFields.add("standard");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetFeeRecommendationsRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetFeeRecommendationsRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFeeRecommendationsRI is not found in the empty JSON string", GetFeeRecommendationsRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetFeeRecommendationsRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFeeRecommendationsRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetFeeRecommendationsRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (jsonObj.get("fast") != null && !jsonObj.get("fast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fast").toString()));
      }
      if (jsonObj.get("slow") != null && !jsonObj.get("slow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slow").toString()));
      }
      if (jsonObj.get("standard") != null && !jsonObj.get("standard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFeeRecommendationsRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFeeRecommendationsRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFeeRecommendationsRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFeeRecommendationsRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFeeRecommendationsRI>() {
           @Override
           public void write(JsonWriter out, GetFeeRecommendationsRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFeeRecommendationsRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetFeeRecommendationsRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetFeeRecommendationsRI
  * @throws IOException if the JSON string is invalid with respect to GetFeeRecommendationsRI
  */
  public static GetFeeRecommendationsRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFeeRecommendationsRI.class);
  }

 /**
  * Convert an instance of GetFeeRecommendationsRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

