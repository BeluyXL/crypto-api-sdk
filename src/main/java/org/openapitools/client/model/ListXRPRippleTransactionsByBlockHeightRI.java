/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ListXRPRippleTransactionsByBlockHeightRIFee;
import org.openapitools.client.model.ListXRPRippleTransactionsByBlockHeightRIOffer;
import org.openapitools.client.model.ListXRPRippleTransactionsByBlockHeightRIReceive;
import org.openapitools.client.model.ListXRPRippleTransactionsByBlockHeightRIRecipientsInner;
import org.openapitools.client.model.ListXRPRippleTransactionsByBlockHeightRISendersInner;
import org.openapitools.client.model.ListXRPRippleTransactionsByBlockHeightRIValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListXRPRippleTransactionsByBlockHeightRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class ListXRPRippleTransactionsByBlockHeightRI {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private String additionalData;

  public static final String SERIALIZED_NAME_DESTINATION_TAG = "destinationTag";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TAG)
  private Long destinationTag;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_MINED_IN_BLOCK_HASH = "minedInBlockHash";
  @SerializedName(SERIALIZED_NAME_MINED_IN_BLOCK_HASH)
  private String minedInBlockHash;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<ListXRPRippleTransactionsByBlockHeightRIRecipientsInner> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENDERS = "senders";
  @SerializedName(SERIALIZED_NAME_SENDERS)
  private List<ListXRPRippleTransactionsByBlockHeightRISendersInner> senders = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Long sequence;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "transactionHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  private String transactionHash;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private ListXRPRippleTransactionsByBlockHeightRIFee fee;

  public static final String SERIALIZED_NAME_OFFER = "offer";
  @SerializedName(SERIALIZED_NAME_OFFER)
  private ListXRPRippleTransactionsByBlockHeightRIOffer offer;

  public static final String SERIALIZED_NAME_RECEIVE = "receive";
  @SerializedName(SERIALIZED_NAME_RECEIVE)
  private ListXRPRippleTransactionsByBlockHeightRIReceive receive;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private ListXRPRippleTransactionsByBlockHeightRIValue value;

  public ListXRPRippleTransactionsByBlockHeightRI() { 
  }

  public ListXRPRippleTransactionsByBlockHeightRI additionalData(String additionalData) {
    
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Get additionalData
   * @return additionalData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "r4CmvbkDWGt9AZmkfuubmiSdsxGZFxAKBY", value = "")

  public String getAdditionalData() {
    return additionalData;
  }


  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }


  public ListXRPRippleTransactionsByBlockHeightRI destinationTag(Long destinationTag) {
    
    this.destinationTag = destinationTag;
    return this;
  }

   /**
   * Get destinationTag
   * @return destinationTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3999472835", value = "")

  public Long getDestinationTag() {
    return destinationTag;
  }


  public void setDestinationTag(Long destinationTag) {
    this.destinationTag = destinationTag;
  }


  public ListXRPRippleTransactionsByBlockHeightRI index(Integer index) {
    
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3", required = true, value = "")

  public Integer getIndex() {
    return index;
  }


  public void setIndex(Integer index) {
    this.index = index;
  }


  public ListXRPRippleTransactionsByBlockHeightRI minedInBlockHash(String minedInBlockHash) {
    
    this.minedInBlockHash = minedInBlockHash;
    return this;
  }

   /**
   * Get minedInBlockHash
   * @return minedInBlockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "14754656235f865a74eba27791fd41a47bdfe07fe811ff6d78f53db32e129e39", required = true, value = "")

  public String getMinedInBlockHash() {
    return minedInBlockHash;
  }


  public void setMinedInBlockHash(String minedInBlockHash) {
    this.minedInBlockHash = minedInBlockHash;
  }


  public ListXRPRippleTransactionsByBlockHeightRI recipients(List<ListXRPRippleTransactionsByBlockHeightRIRecipientsInner> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public ListXRPRippleTransactionsByBlockHeightRI addRecipientsItem(ListXRPRippleTransactionsByBlockHeightRIRecipientsInner recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Object Array representation of transaction receivers
   * @return recipients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Object Array representation of transaction receivers")

  public List<ListXRPRippleTransactionsByBlockHeightRIRecipientsInner> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<ListXRPRippleTransactionsByBlockHeightRIRecipientsInner> recipients) {
    this.recipients = recipients;
  }


  public ListXRPRippleTransactionsByBlockHeightRI senders(List<ListXRPRippleTransactionsByBlockHeightRISendersInner> senders) {
    
    this.senders = senders;
    return this;
  }

  public ListXRPRippleTransactionsByBlockHeightRI addSendersItem(ListXRPRippleTransactionsByBlockHeightRISendersInner sendersItem) {
    this.senders.add(sendersItem);
    return this;
  }

   /**
   * Object Array representation of transaction senders
   * @return senders
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Object Array representation of transaction senders")

  public List<ListXRPRippleTransactionsByBlockHeightRISendersInner> getSenders() {
    return senders;
  }


  public void setSenders(List<ListXRPRippleTransactionsByBlockHeightRISendersInner> senders) {
    this.senders = senders;
  }


  public ListXRPRippleTransactionsByBlockHeightRI sequence(Long sequence) {
    
    this.sequence = sequence;
    return this;
  }

   /**
   * Get sequence
   * @return sequence
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "32568", required = true, value = "")

  public Long getSequence() {
    return sequence;
  }


  public void setSequence(Long sequence) {
    this.sequence = sequence;
  }


  public ListXRPRippleTransactionsByBlockHeightRI status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "tesSUCCESS", required = true, value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ListXRPRippleTransactionsByBlockHeightRI timestamp(Integer timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "236589", required = true, value = "Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.")

  public Integer getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }


  public ListXRPRippleTransactionsByBlockHeightRI transactionHash(String transactionHash) {
    
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Get transactionHash
   * @return transactionHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ba3bc1337071c8e73b441fe12a1911f4365d7ea82cace7c8ecba3ee9f364978b", required = true, value = "")

  public String getTransactionHash() {
    return transactionHash;
  }


  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public ListXRPRippleTransactionsByBlockHeightRI type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Payment", required = true, value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public ListXRPRippleTransactionsByBlockHeightRI fee(ListXRPRippleTransactionsByBlockHeightRIFee fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListXRPRippleTransactionsByBlockHeightRIFee getFee() {
    return fee;
  }


  public void setFee(ListXRPRippleTransactionsByBlockHeightRIFee fee) {
    this.fee = fee;
  }


  public ListXRPRippleTransactionsByBlockHeightRI offer(ListXRPRippleTransactionsByBlockHeightRIOffer offer) {
    
    this.offer = offer;
    return this;
  }

   /**
   * Get offer
   * @return offer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListXRPRippleTransactionsByBlockHeightRIOffer getOffer() {
    return offer;
  }


  public void setOffer(ListXRPRippleTransactionsByBlockHeightRIOffer offer) {
    this.offer = offer;
  }


  public ListXRPRippleTransactionsByBlockHeightRI receive(ListXRPRippleTransactionsByBlockHeightRIReceive receive) {
    
    this.receive = receive;
    return this;
  }

   /**
   * Get receive
   * @return receive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListXRPRippleTransactionsByBlockHeightRIReceive getReceive() {
    return receive;
  }


  public void setReceive(ListXRPRippleTransactionsByBlockHeightRIReceive receive) {
    this.receive = receive;
  }


  public ListXRPRippleTransactionsByBlockHeightRI value(ListXRPRippleTransactionsByBlockHeightRIValue value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListXRPRippleTransactionsByBlockHeightRIValue getValue() {
    return value;
  }


  public void setValue(ListXRPRippleTransactionsByBlockHeightRIValue value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListXRPRippleTransactionsByBlockHeightRI listXRPRippleTransactionsByBlockHeightRI = (ListXRPRippleTransactionsByBlockHeightRI) o;
    return Objects.equals(this.additionalData, listXRPRippleTransactionsByBlockHeightRI.additionalData) &&
        Objects.equals(this.destinationTag, listXRPRippleTransactionsByBlockHeightRI.destinationTag) &&
        Objects.equals(this.index, listXRPRippleTransactionsByBlockHeightRI.index) &&
        Objects.equals(this.minedInBlockHash, listXRPRippleTransactionsByBlockHeightRI.minedInBlockHash) &&
        Objects.equals(this.recipients, listXRPRippleTransactionsByBlockHeightRI.recipients) &&
        Objects.equals(this.senders, listXRPRippleTransactionsByBlockHeightRI.senders) &&
        Objects.equals(this.sequence, listXRPRippleTransactionsByBlockHeightRI.sequence) &&
        Objects.equals(this.status, listXRPRippleTransactionsByBlockHeightRI.status) &&
        Objects.equals(this.timestamp, listXRPRippleTransactionsByBlockHeightRI.timestamp) &&
        Objects.equals(this.transactionHash, listXRPRippleTransactionsByBlockHeightRI.transactionHash) &&
        Objects.equals(this.type, listXRPRippleTransactionsByBlockHeightRI.type) &&
        Objects.equals(this.fee, listXRPRippleTransactionsByBlockHeightRI.fee) &&
        Objects.equals(this.offer, listXRPRippleTransactionsByBlockHeightRI.offer) &&
        Objects.equals(this.receive, listXRPRippleTransactionsByBlockHeightRI.receive) &&
        Objects.equals(this.value, listXRPRippleTransactionsByBlockHeightRI.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalData, destinationTag, index, minedInBlockHash, recipients, senders, sequence, status, timestamp, transactionHash, type, fee, offer, receive, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListXRPRippleTransactionsByBlockHeightRI {\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    destinationTag: ").append(toIndentedString(destinationTag)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    minedInBlockHash: ").append(toIndentedString(minedInBlockHash)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    senders: ").append(toIndentedString(senders)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    receive: ").append(toIndentedString(receive)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalData");
    openapiFields.add("destinationTag");
    openapiFields.add("index");
    openapiFields.add("minedInBlockHash");
    openapiFields.add("recipients");
    openapiFields.add("senders");
    openapiFields.add("sequence");
    openapiFields.add("status");
    openapiFields.add("timestamp");
    openapiFields.add("transactionHash");
    openapiFields.add("type");
    openapiFields.add("fee");
    openapiFields.add("offer");
    openapiFields.add("receive");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("index");
    openapiRequiredFields.add("minedInBlockHash");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("senders");
    openapiRequiredFields.add("sequence");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("transactionHash");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("offer");
    openapiRequiredFields.add("receive");
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListXRPRippleTransactionsByBlockHeightRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListXRPRippleTransactionsByBlockHeightRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListXRPRippleTransactionsByBlockHeightRI is not found in the empty JSON string", ListXRPRippleTransactionsByBlockHeightRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListXRPRippleTransactionsByBlockHeightRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListXRPRippleTransactionsByBlockHeightRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListXRPRippleTransactionsByBlockHeightRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      if (jsonObj.get("minedInBlockHash") != null && !jsonObj.get("minedInBlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minedInBlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minedInBlockHash").toString()));
      }
      JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
      if (jsonArrayrecipients != null) {
        // ensure the json data is an array
        if (!jsonObj.get("recipients").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
        }

        // validate the optional field `recipients` (array)
        for (int i = 0; i < jsonArrayrecipients.size(); i++) {
          ListXRPRippleTransactionsByBlockHeightRIRecipientsInner.validateJsonObject(jsonArrayrecipients.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraysenders = jsonObj.getAsJsonArray("senders");
      if (jsonArraysenders != null) {
        // ensure the json data is an array
        if (!jsonObj.get("senders").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `senders` to be an array in the JSON string but got `%s`", jsonObj.get("senders").toString()));
        }

        // validate the optional field `senders` (array)
        for (int i = 0; i < jsonArraysenders.size(); i++) {
          ListXRPRippleTransactionsByBlockHeightRISendersInner.validateJsonObject(jsonArraysenders.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("transactionHash") != null && !jsonObj.get("transactionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionHash").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `fee`
      if (jsonObj.getAsJsonObject("fee") != null) {
        ListXRPRippleTransactionsByBlockHeightRIFee.validateJsonObject(jsonObj.getAsJsonObject("fee"));
      }
      // validate the optional field `offer`
      if (jsonObj.getAsJsonObject("offer") != null) {
        ListXRPRippleTransactionsByBlockHeightRIOffer.validateJsonObject(jsonObj.getAsJsonObject("offer"));
      }
      // validate the optional field `receive`
      if (jsonObj.getAsJsonObject("receive") != null) {
        ListXRPRippleTransactionsByBlockHeightRIReceive.validateJsonObject(jsonObj.getAsJsonObject("receive"));
      }
      // validate the optional field `value`
      if (jsonObj.getAsJsonObject("value") != null) {
        ListXRPRippleTransactionsByBlockHeightRIValue.validateJsonObject(jsonObj.getAsJsonObject("value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListXRPRippleTransactionsByBlockHeightRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListXRPRippleTransactionsByBlockHeightRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListXRPRippleTransactionsByBlockHeightRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListXRPRippleTransactionsByBlockHeightRI.class));

       return (TypeAdapter<T>) new TypeAdapter<ListXRPRippleTransactionsByBlockHeightRI>() {
           @Override
           public void write(JsonWriter out, ListXRPRippleTransactionsByBlockHeightRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListXRPRippleTransactionsByBlockHeightRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListXRPRippleTransactionsByBlockHeightRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListXRPRippleTransactionsByBlockHeightRI
  * @throws IOException if the JSON string is invalid with respect to ListXRPRippleTransactionsByBlockHeightRI
  */
  public static ListXRPRippleTransactionsByBlockHeightRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListXRPRippleTransactionsByBlockHeightRI.class);
  }

 /**
  * Convert an instance of ListXRPRippleTransactionsByBlockHeightRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

