/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSBSCGasPrice;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVJoinSplitInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSB;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSBC;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSBSC;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSD;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSD2;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSE;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSEC;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSL;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSZ;
import org.openapitools.client.model.GetWalletTransactionDetailsByTransactionIDRIBSZVinInner;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSZVoutInner;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class GetWalletTransactionDetailsByTransactionIDRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetWalletTransactionDetailsByTransactionIDRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetWalletTransactionDetailsByTransactionIDRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetWalletTransactionDetailsByTransactionIDRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSB> adapterGetWalletTransactionDetailsByTransactionIDRIBSB = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSB.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSBC> adapterGetWalletTransactionDetailsByTransactionIDRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSBC.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSBSC> adapterGetWalletTransactionDetailsByTransactionIDRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSBSC.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSD> adapterGetWalletTransactionDetailsByTransactionIDRIBSD = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSD.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSD2> adapterGetWalletTransactionDetailsByTransactionIDRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSD2.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSE> adapterGetWalletTransactionDetailsByTransactionIDRIBSE = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSE.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSEC> adapterGetWalletTransactionDetailsByTransactionIDRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSEC.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSL> adapterGetWalletTransactionDetailsByTransactionIDRIBSL = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSL.class));
            final TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBSZ> adapterGetWalletTransactionDetailsByTransactionIDRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(GetWalletTransactionDetailsByTransactionIDRIBSZ.class));

            return (TypeAdapter<T>) new TypeAdapter<GetWalletTransactionDetailsByTransactionIDRIBS>() {
                @Override
                public void write(JsonWriter out, GetWalletTransactionDetailsByTransactionIDRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSB`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSB) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSB.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSBC`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSBC) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSBC.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSBSC`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSBSC) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSBSC.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSD`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSD) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSD.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSD2`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSD2) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSD2.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSE`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSE) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSE.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSEC`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSEC) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSEC.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSL`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSL) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSL.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetWalletTransactionDetailsByTransactionIDRIBSZ`
                    if (value.getActualInstance() instanceof GetWalletTransactionDetailsByTransactionIDRIBSZ) {
                        JsonObject obj = adapterGetWalletTransactionDetailsByTransactionIDRIBSZ.toJsonTree((GetWalletTransactionDetailsByTransactionIDRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBSZ");
                }

                @Override
                public GetWalletTransactionDetailsByTransactionIDRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSB'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSBC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSBC'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSBSC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSBSC'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSD'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSD2'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSE'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSEC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSEC'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSL'", e);
                    }

                    // deserialize GetWalletTransactionDetailsByTransactionIDRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetWalletTransactionDetailsByTransactionIDRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetWalletTransactionDetailsByTransactionIDRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetWalletTransactionDetailsByTransactionIDRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetWalletTransactionDetailsByTransactionIDRIBSZ'", e);
                    }

                    if (match == 1) {
                        GetWalletTransactionDetailsByTransactionIDRIBS ret = new GetWalletTransactionDetailsByTransactionIDRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetWalletTransactionDetailsByTransactionIDRIBS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetWalletTransactionDetailsByTransactionIDRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetWalletTransactionDetailsByTransactionIDRIBS(GetWalletTransactionDetailsByTransactionIDRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSB", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSB>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSBC", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSBC>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSBSC", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSBSC>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSD", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSD>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSD2", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSD2>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSE", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSE>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSEC", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSEC>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSL", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSL>() {
        });
        schemas.put("GetWalletTransactionDetailsByTransactionIDRIBSZ", new GenericType<GetWalletTransactionDetailsByTransactionIDRIBSZ>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetWalletTransactionDetailsByTransactionIDRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBSZ
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetWalletTransactionDetailsByTransactionIDRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBSZ");
    }

    /**
     * Get the actual instance, which can be the following:
     * GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBSZ
     *
     * @return The actual instance (GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBSZ)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSB`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSB`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSB`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSB getGetWalletTransactionDetailsByTransactionIDRIBSB() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSBC`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSBC`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSBC`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSBC getGetWalletTransactionDetailsByTransactionIDRIBSBC() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSBSC`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSBSC`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSBSC`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSBSC getGetWalletTransactionDetailsByTransactionIDRIBSBSC() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSD`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSD`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSD`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSD getGetWalletTransactionDetailsByTransactionIDRIBSD() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSD2`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSD2`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSD2`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSD2 getGetWalletTransactionDetailsByTransactionIDRIBSD2() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSE`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSE`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSE`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSE getGetWalletTransactionDetailsByTransactionIDRIBSE() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSEC`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSEC`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSEC`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSEC getGetWalletTransactionDetailsByTransactionIDRIBSEC() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSL`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSL`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSL`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSL getGetWalletTransactionDetailsByTransactionIDRIBSL() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSZ`. If the actual instance is not `GetWalletTransactionDetailsByTransactionIDRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetWalletTransactionDetailsByTransactionIDRIBSZ`
     * @throws ClassCastException if the instance is not `GetWalletTransactionDetailsByTransactionIDRIBSZ`
     */
    public GetWalletTransactionDetailsByTransactionIDRIBSZ getGetWalletTransactionDetailsByTransactionIDRIBSZ() throws ClassCastException {
        return (GetWalletTransactionDetailsByTransactionIDRIBSZ)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetWalletTransactionDetailsByTransactionIDRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSB
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSBC
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSBC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSBSC
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSBSC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSD
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSD2
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSE
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSE failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSEC
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSEC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSL
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetWalletTransactionDetailsByTransactionIDRIBSZ
    try {
      GetWalletTransactionDetailsByTransactionIDRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetWalletTransactionDetailsByTransactionIDRIBSZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetWalletTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBSZ. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetWalletTransactionDetailsByTransactionIDRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetWalletTransactionDetailsByTransactionIDRIBS
  * @throws IOException if the JSON string is invalid with respect to GetWalletTransactionDetailsByTransactionIDRIBS
  */
  public static GetWalletTransactionDetailsByTransactionIDRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWalletTransactionDetailsByTransactionIDRIBS.class);
  }

 /**
  * Convert an instance of GetWalletTransactionDetailsByTransactionIDRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

