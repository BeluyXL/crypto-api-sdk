/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ListAllAssetsFromAllWalletsRICoinsInner;
import org.openapitools.client.model.ListAllAssetsFromAllWalletsRIFungibleTokensInner;
import org.openapitools.client.model.ListAllAssetsFromAllWalletsRINonFungibleTokensInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListAllAssetsFromAllWalletsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class ListAllAssetsFromAllWalletsRI {
  public static final String SERIALIZED_NAME_COINS = "coins";
  @SerializedName(SERIALIZED_NAME_COINS)
  private List<ListAllAssetsFromAllWalletsRICoinsInner> coins = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNGIBLE_TOKENS = "fungibleTokens";
  @SerializedName(SERIALIZED_NAME_FUNGIBLE_TOKENS)
  private List<ListAllAssetsFromAllWalletsRIFungibleTokensInner> fungibleTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_FUNGIBLE_TOKENS = "nonFungibleTokens";
  @SerializedName(SERIALIZED_NAME_NON_FUNGIBLE_TOKENS)
  private List<ListAllAssetsFromAllWalletsRINonFungibleTokensInner> nonFungibleTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public static final String SERIALIZED_NAME_WALLET_NAME = "walletName";
  @SerializedName(SERIALIZED_NAME_WALLET_NAME)
  private String walletName;

  public ListAllAssetsFromAllWalletsRI() { 
  }

  public ListAllAssetsFromAllWalletsRI coins(List<ListAllAssetsFromAllWalletsRICoinsInner> coins) {
    
    this.coins = coins;
    return this;
  }

  public ListAllAssetsFromAllWalletsRI addCoinsItem(ListAllAssetsFromAllWalletsRICoinsInner coinsItem) {
    this.coins.add(coinsItem);
    return this;
  }

   /**
   * Get coins
   * @return coins
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ListAllAssetsFromAllWalletsRICoinsInner> getCoins() {
    return coins;
  }


  public void setCoins(List<ListAllAssetsFromAllWalletsRICoinsInner> coins) {
    this.coins = coins;
  }


  public ListAllAssetsFromAllWalletsRI fungibleTokens(List<ListAllAssetsFromAllWalletsRIFungibleTokensInner> fungibleTokens) {
    
    this.fungibleTokens = fungibleTokens;
    return this;
  }

  public ListAllAssetsFromAllWalletsRI addFungibleTokensItem(ListAllAssetsFromAllWalletsRIFungibleTokensInner fungibleTokensItem) {
    this.fungibleTokens.add(fungibleTokensItem);
    return this;
  }

   /**
   * Represents fungible tokens&#39;es detailed information
   * @return fungibleTokens
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents fungible tokens'es detailed information")

  public List<ListAllAssetsFromAllWalletsRIFungibleTokensInner> getFungibleTokens() {
    return fungibleTokens;
  }


  public void setFungibleTokens(List<ListAllAssetsFromAllWalletsRIFungibleTokensInner> fungibleTokens) {
    this.fungibleTokens = fungibleTokens;
  }


  public ListAllAssetsFromAllWalletsRI nonFungibleTokens(List<ListAllAssetsFromAllWalletsRINonFungibleTokensInner> nonFungibleTokens) {
    
    this.nonFungibleTokens = nonFungibleTokens;
    return this;
  }

  public ListAllAssetsFromAllWalletsRI addNonFungibleTokensItem(ListAllAssetsFromAllWalletsRINonFungibleTokensInner nonFungibleTokensItem) {
    this.nonFungibleTokens.add(nonFungibleTokensItem);
    return this;
  }

   /**
   * Represents non-fungible tokens&#39;es detailed information.
   * @return nonFungibleTokens
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents non-fungible tokens'es detailed information.")

  public List<ListAllAssetsFromAllWalletsRINonFungibleTokensInner> getNonFungibleTokens() {
    return nonFungibleTokens;
  }


  public void setNonFungibleTokens(List<ListAllAssetsFromAllWalletsRINonFungibleTokensInner> nonFungibleTokens) {
    this.nonFungibleTokens = nonFungibleTokens;
  }


  public ListAllAssetsFromAllWalletsRI walletId(String walletId) {
    
    this.walletId = walletId;
    return this;
  }

   /**
   * Defines the unique ID of the Wallet.
   * @return walletId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "60c9d9921c38030006675ff6", required = true, value = "Defines the unique ID of the Wallet.")

  public String getWalletId() {
    return walletId;
  }


  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }


  public ListAllAssetsFromAllWalletsRI walletName(String walletName) {
    
    this.walletName = walletName;
    return this;
  }

   /**
   * Represents the name of the wallet.
   * @return walletName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "exampleName", required = true, value = "Represents the name of the wallet.")

  public String getWalletName() {
    return walletName;
  }


  public void setWalletName(String walletName) {
    this.walletName = walletName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAllAssetsFromAllWalletsRI listAllAssetsFromAllWalletsRI = (ListAllAssetsFromAllWalletsRI) o;
    return Objects.equals(this.coins, listAllAssetsFromAllWalletsRI.coins) &&
        Objects.equals(this.fungibleTokens, listAllAssetsFromAllWalletsRI.fungibleTokens) &&
        Objects.equals(this.nonFungibleTokens, listAllAssetsFromAllWalletsRI.nonFungibleTokens) &&
        Objects.equals(this.walletId, listAllAssetsFromAllWalletsRI.walletId) &&
        Objects.equals(this.walletName, listAllAssetsFromAllWalletsRI.walletName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coins, fungibleTokens, nonFungibleTokens, walletId, walletName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAllAssetsFromAllWalletsRI {\n");
    sb.append("    coins: ").append(toIndentedString(coins)).append("\n");
    sb.append("    fungibleTokens: ").append(toIndentedString(fungibleTokens)).append("\n");
    sb.append("    nonFungibleTokens: ").append(toIndentedString(nonFungibleTokens)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    walletName: ").append(toIndentedString(walletName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coins");
    openapiFields.add("fungibleTokens");
    openapiFields.add("nonFungibleTokens");
    openapiFields.add("walletId");
    openapiFields.add("walletName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("coins");
    openapiRequiredFields.add("fungibleTokens");
    openapiRequiredFields.add("nonFungibleTokens");
    openapiRequiredFields.add("walletId");
    openapiRequiredFields.add("walletName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAllAssetsFromAllWalletsRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListAllAssetsFromAllWalletsRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAllAssetsFromAllWalletsRI is not found in the empty JSON string", ListAllAssetsFromAllWalletsRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAllAssetsFromAllWalletsRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAllAssetsFromAllWalletsRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAllAssetsFromAllWalletsRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArraycoins = jsonObj.getAsJsonArray("coins");
      if (jsonArraycoins != null) {
        // ensure the json data is an array
        if (!jsonObj.get("coins").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `coins` to be an array in the JSON string but got `%s`", jsonObj.get("coins").toString()));
        }

        // validate the optional field `coins` (array)
        for (int i = 0; i < jsonArraycoins.size(); i++) {
          ListAllAssetsFromAllWalletsRICoinsInner.validateJsonObject(jsonArraycoins.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayfungibleTokens = jsonObj.getAsJsonArray("fungibleTokens");
      if (jsonArrayfungibleTokens != null) {
        // ensure the json data is an array
        if (!jsonObj.get("fungibleTokens").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `fungibleTokens` to be an array in the JSON string but got `%s`", jsonObj.get("fungibleTokens").toString()));
        }

        // validate the optional field `fungibleTokens` (array)
        for (int i = 0; i < jsonArrayfungibleTokens.size(); i++) {
          ListAllAssetsFromAllWalletsRIFungibleTokensInner.validateJsonObject(jsonArrayfungibleTokens.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraynonFungibleTokens = jsonObj.getAsJsonArray("nonFungibleTokens");
      if (jsonArraynonFungibleTokens != null) {
        // ensure the json data is an array
        if (!jsonObj.get("nonFungibleTokens").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `nonFungibleTokens` to be an array in the JSON string but got `%s`", jsonObj.get("nonFungibleTokens").toString()));
        }

        // validate the optional field `nonFungibleTokens` (array)
        for (int i = 0; i < jsonArraynonFungibleTokens.size(); i++) {
          ListAllAssetsFromAllWalletsRINonFungibleTokensInner.validateJsonObject(jsonArraynonFungibleTokens.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if (jsonObj.get("walletName") != null && !jsonObj.get("walletName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAllAssetsFromAllWalletsRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAllAssetsFromAllWalletsRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAllAssetsFromAllWalletsRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAllAssetsFromAllWalletsRI.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAllAssetsFromAllWalletsRI>() {
           @Override
           public void write(JsonWriter out, ListAllAssetsFromAllWalletsRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAllAssetsFromAllWalletsRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAllAssetsFromAllWalletsRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAllAssetsFromAllWalletsRI
  * @throws IOException if the JSON string is invalid with respect to ListAllAssetsFromAllWalletsRI
  */
  public static ListAllAssetsFromAllWalletsRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAllAssetsFromAllWalletsRI.class);
  }

 /**
  * Convert an instance of ListAllAssetsFromAllWalletsRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

