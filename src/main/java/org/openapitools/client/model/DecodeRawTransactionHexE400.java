/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.BannedIpAddressDetailsInner;
import org.openapitools.client.model.InvalidBlockchain;
import org.openapitools.client.model.InvalidNetwork;
import org.openapitools.client.model.InvalidPagination;
import org.openapitools.client.model.InvalidTransactionHex;
import org.openapitools.client.model.LimitGreaterThanAllowed;
import org.openapitools.client.model.UriNotFound;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class DecodeRawTransactionHexE400 extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DecodeRawTransactionHexE400.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DecodeRawTransactionHexE400.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DecodeRawTransactionHexE400' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InvalidBlockchain> adapterInvalidBlockchain = gson.getDelegateAdapter(this, TypeToken.get(InvalidBlockchain.class));
            final TypeAdapter<InvalidNetwork> adapterInvalidNetwork = gson.getDelegateAdapter(this, TypeToken.get(InvalidNetwork.class));
            final TypeAdapter<InvalidPagination> adapterInvalidPagination = gson.getDelegateAdapter(this, TypeToken.get(InvalidPagination.class));
            final TypeAdapter<InvalidTransactionHex> adapterInvalidTransactionHex = gson.getDelegateAdapter(this, TypeToken.get(InvalidTransactionHex.class));
            final TypeAdapter<LimitGreaterThanAllowed> adapterLimitGreaterThanAllowed = gson.getDelegateAdapter(this, TypeToken.get(LimitGreaterThanAllowed.class));
            final TypeAdapter<UriNotFound> adapterUriNotFound = gson.getDelegateAdapter(this, TypeToken.get(UriNotFound.class));

            return (TypeAdapter<T>) new TypeAdapter<DecodeRawTransactionHexE400>() {
                @Override
                public void write(JsonWriter out, DecodeRawTransactionHexE400 value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `InvalidBlockchain`
                    if (value.getActualInstance() instanceof InvalidBlockchain) {
                        JsonObject obj = adapterInvalidBlockchain.toJsonTree((InvalidBlockchain)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `InvalidNetwork`
                    if (value.getActualInstance() instanceof InvalidNetwork) {
                        JsonObject obj = adapterInvalidNetwork.toJsonTree((InvalidNetwork)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `InvalidPagination`
                    if (value.getActualInstance() instanceof InvalidPagination) {
                        JsonObject obj = adapterInvalidPagination.toJsonTree((InvalidPagination)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `InvalidTransactionHex`
                    if (value.getActualInstance() instanceof InvalidTransactionHex) {
                        JsonObject obj = adapterInvalidTransactionHex.toJsonTree((InvalidTransactionHex)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `LimitGreaterThanAllowed`
                    if (value.getActualInstance() instanceof LimitGreaterThanAllowed) {
                        JsonObject obj = adapterLimitGreaterThanAllowed.toJsonTree((LimitGreaterThanAllowed)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UriNotFound`
                    if (value.getActualInstance() instanceof UriNotFound) {
                        JsonObject obj = adapterUriNotFound.toJsonTree((UriNotFound)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: InvalidBlockchain, InvalidNetwork, InvalidPagination, InvalidTransactionHex, LimitGreaterThanAllowed, UriNotFound");
                }

                @Override
                public DecodeRawTransactionHexE400 read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize InvalidBlockchain
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InvalidBlockchain.validateJsonObject(jsonObject);
                        actualAdapter = adapterInvalidBlockchain;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InvalidBlockchain'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InvalidBlockchain failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InvalidBlockchain'", e);
                    }

                    // deserialize InvalidNetwork
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InvalidNetwork.validateJsonObject(jsonObject);
                        actualAdapter = adapterInvalidNetwork;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InvalidNetwork'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InvalidNetwork failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InvalidNetwork'", e);
                    }

                    // deserialize InvalidPagination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InvalidPagination.validateJsonObject(jsonObject);
                        actualAdapter = adapterInvalidPagination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InvalidPagination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InvalidPagination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InvalidPagination'", e);
                    }

                    // deserialize InvalidTransactionHex
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InvalidTransactionHex.validateJsonObject(jsonObject);
                        actualAdapter = adapterInvalidTransactionHex;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InvalidTransactionHex'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InvalidTransactionHex failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InvalidTransactionHex'", e);
                    }

                    // deserialize LimitGreaterThanAllowed
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LimitGreaterThanAllowed.validateJsonObject(jsonObject);
                        actualAdapter = adapterLimitGreaterThanAllowed;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LimitGreaterThanAllowed'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LimitGreaterThanAllowed failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LimitGreaterThanAllowed'", e);
                    }

                    // deserialize UriNotFound
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UriNotFound.validateJsonObject(jsonObject);
                        actualAdapter = adapterUriNotFound;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UriNotFound'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UriNotFound failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UriNotFound'", e);
                    }

                    if (match == 1) {
                        DecodeRawTransactionHexE400 ret = new DecodeRawTransactionHexE400();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DecodeRawTransactionHexE400: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public DecodeRawTransactionHexE400() {
        super("oneOf", Boolean.FALSE);
    }

    public DecodeRawTransactionHexE400(InvalidBlockchain o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexE400(InvalidNetwork o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexE400(InvalidPagination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexE400(InvalidTransactionHex o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexE400(LimitGreaterThanAllowed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DecodeRawTransactionHexE400(UriNotFound o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("InvalidBlockchain", new GenericType<InvalidBlockchain>() {
        });
        schemas.put("InvalidNetwork", new GenericType<InvalidNetwork>() {
        });
        schemas.put("InvalidPagination", new GenericType<InvalidPagination>() {
        });
        schemas.put("InvalidTransactionHex", new GenericType<InvalidTransactionHex>() {
        });
        schemas.put("LimitGreaterThanAllowed", new GenericType<LimitGreaterThanAllowed>() {
        });
        schemas.put("UriNotFound", new GenericType<UriNotFound>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return DecodeRawTransactionHexE400.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * InvalidBlockchain, InvalidNetwork, InvalidPagination, InvalidTransactionHex, LimitGreaterThanAllowed, UriNotFound
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof InvalidBlockchain) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InvalidNetwork) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InvalidPagination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InvalidTransactionHex) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LimitGreaterThanAllowed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UriNotFound) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be InvalidBlockchain, InvalidNetwork, InvalidPagination, InvalidTransactionHex, LimitGreaterThanAllowed, UriNotFound");
    }

    /**
     * Get the actual instance, which can be the following:
     * InvalidBlockchain, InvalidNetwork, InvalidPagination, InvalidTransactionHex, LimitGreaterThanAllowed, UriNotFound
     *
     * @return The actual instance (InvalidBlockchain, InvalidNetwork, InvalidPagination, InvalidTransactionHex, LimitGreaterThanAllowed, UriNotFound)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `InvalidBlockchain`. If the actual instance is not `InvalidBlockchain`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InvalidBlockchain`
     * @throws ClassCastException if the instance is not `InvalidBlockchain`
     */
    public InvalidBlockchain getInvalidBlockchain() throws ClassCastException {
        return (InvalidBlockchain)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InvalidNetwork`. If the actual instance is not `InvalidNetwork`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InvalidNetwork`
     * @throws ClassCastException if the instance is not `InvalidNetwork`
     */
    public InvalidNetwork getInvalidNetwork() throws ClassCastException {
        return (InvalidNetwork)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InvalidPagination`. If the actual instance is not `InvalidPagination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InvalidPagination`
     * @throws ClassCastException if the instance is not `InvalidPagination`
     */
    public InvalidPagination getInvalidPagination() throws ClassCastException {
        return (InvalidPagination)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InvalidTransactionHex`. If the actual instance is not `InvalidTransactionHex`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InvalidTransactionHex`
     * @throws ClassCastException if the instance is not `InvalidTransactionHex`
     */
    public InvalidTransactionHex getInvalidTransactionHex() throws ClassCastException {
        return (InvalidTransactionHex)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LimitGreaterThanAllowed`. If the actual instance is not `LimitGreaterThanAllowed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LimitGreaterThanAllowed`
     * @throws ClassCastException if the instance is not `LimitGreaterThanAllowed`
     */
    public LimitGreaterThanAllowed getLimitGreaterThanAllowed() throws ClassCastException {
        return (LimitGreaterThanAllowed)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UriNotFound`. If the actual instance is not `UriNotFound`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UriNotFound`
     * @throws ClassCastException if the instance is not `UriNotFound`
     */
    public UriNotFound getUriNotFound() throws ClassCastException {
        return (UriNotFound)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DecodeRawTransactionHexE400
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with InvalidBlockchain
    try {
      InvalidBlockchain.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for InvalidBlockchain failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with InvalidNetwork
    try {
      InvalidNetwork.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for InvalidNetwork failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with InvalidPagination
    try {
      InvalidPagination.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for InvalidPagination failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with InvalidTransactionHex
    try {
      InvalidTransactionHex.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for InvalidTransactionHex failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with LimitGreaterThanAllowed
    try {
      LimitGreaterThanAllowed.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for LimitGreaterThanAllowed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UriNotFound
    try {
      UriNotFound.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UriNotFound failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for DecodeRawTransactionHexE400 with oneOf schemas: InvalidBlockchain, InvalidNetwork, InvalidPagination, InvalidTransactionHex, LimitGreaterThanAllowed, UriNotFound. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of DecodeRawTransactionHexE400 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DecodeRawTransactionHexE400
  * @throws IOException if the JSON string is invalid with respect to DecodeRawTransactionHexE400
  */
  public static DecodeRawTransactionHexE400 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecodeRawTransactionHexE400.class);
  }

 /**
  * Convert an instance of DecodeRawTransactionHexE400 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

