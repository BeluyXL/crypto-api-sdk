/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIOffer;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIReceive;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * XRP
 */
@ApiModel(description = "XRP")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class GetTransactionDetailsByTransactionIDFromCallbackRIBSX {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private String additionalData;

  public static final String SERIALIZED_NAME_DESTINATION_TAG = "destinationTag";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TAG)
  private Long destinationTag;

  public static final String SERIALIZED_NAME_OFFER = "offer";
  @SerializedName(SERIALIZED_NAME_OFFER)
  private GetXRPRippleTransactionDetailsByTransactionIDRIOffer offer;

  public static final String SERIALIZED_NAME_RECEIVE = "receive";
  @SerializedName(SERIALIZED_NAME_RECEIVE)
  private GetXRPRippleTransactionDetailsByTransactionIDRIReceive receive;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Long sequence;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue value;

  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX() { 
  }

  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX additionalData(String additionalData) {
    
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Represents additional data that may be needed.
   * @return additionalData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "rPmPErQe4g9725pcNxJpuvKkdqTESTQ6Tu", required = true, value = "Represents additional data that may be needed.")

  public String getAdditionalData() {
    return additionalData;
  }


  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }


  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX destinationTag(Long destinationTag) {
    
    this.destinationTag = destinationTag;
    return this;
  }

   /**
   * Defines the destination tag value.
   * @return destinationTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3999472835", value = "Defines the destination tag value.")

  public Long getDestinationTag() {
    return destinationTag;
  }


  public void setDestinationTag(Long destinationTag) {
    this.destinationTag = destinationTag;
  }


  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX offer(GetXRPRippleTransactionDetailsByTransactionIDRIOffer offer) {
    
    this.offer = offer;
    return this;
  }

   /**
   * Get offer
   * @return offer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetXRPRippleTransactionDetailsByTransactionIDRIOffer getOffer() {
    return offer;
  }


  public void setOffer(GetXRPRippleTransactionDetailsByTransactionIDRIOffer offer) {
    this.offer = offer;
  }


  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX receive(GetXRPRippleTransactionDetailsByTransactionIDRIReceive receive) {
    
    this.receive = receive;
    return this;
  }

   /**
   * Get receive
   * @return receive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetXRPRippleTransactionDetailsByTransactionIDRIReceive getReceive() {
    return receive;
  }


  public void setReceive(GetXRPRippleTransactionDetailsByTransactionIDRIReceive receive) {
    this.receive = receive;
  }


  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX sequence(Long sequence) {
    
    this.sequence = sequence;
    return this;
  }

   /**
   * Defines the transaction input&#39;s sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.
   * @return sequence
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4294967295", required = true, value = "Defines the transaction input's sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.")

  public Long getSequence() {
    return sequence;
  }


  public void setSequence(Long sequence) {
    this.sequence = sequence;
  }


  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Defines the status of the transaction.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "tesSUCCESS", required = true, value = "Defines the status of the transaction.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines the type of the transaction.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Payment", required = true, value = "Defines the type of the transaction.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public GetTransactionDetailsByTransactionIDFromCallbackRIBSX value(GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue getValue() {
    return value;
  }


  public void setValue(GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTransactionDetailsByTransactionIDFromCallbackRIBSX getTransactionDetailsByTransactionIDFromCallbackRIBSX = (GetTransactionDetailsByTransactionIDFromCallbackRIBSX) o;
    return Objects.equals(this.additionalData, getTransactionDetailsByTransactionIDFromCallbackRIBSX.additionalData) &&
        Objects.equals(this.destinationTag, getTransactionDetailsByTransactionIDFromCallbackRIBSX.destinationTag) &&
        Objects.equals(this.offer, getTransactionDetailsByTransactionIDFromCallbackRIBSX.offer) &&
        Objects.equals(this.receive, getTransactionDetailsByTransactionIDFromCallbackRIBSX.receive) &&
        Objects.equals(this.sequence, getTransactionDetailsByTransactionIDFromCallbackRIBSX.sequence) &&
        Objects.equals(this.status, getTransactionDetailsByTransactionIDFromCallbackRIBSX.status) &&
        Objects.equals(this.type, getTransactionDetailsByTransactionIDFromCallbackRIBSX.type) &&
        Objects.equals(this.value, getTransactionDetailsByTransactionIDFromCallbackRIBSX.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalData, destinationTag, offer, receive, sequence, status, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTransactionDetailsByTransactionIDFromCallbackRIBSX {\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    destinationTag: ").append(toIndentedString(destinationTag)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    receive: ").append(toIndentedString(receive)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalData");
    openapiFields.add("destinationTag");
    openapiFields.add("offer");
    openapiFields.add("receive");
    openapiFields.add("sequence");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalData");
    openapiRequiredFields.add("offer");
    openapiRequiredFields.add("receive");
    openapiRequiredFields.add("sequence");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetTransactionDetailsByTransactionIDFromCallbackRIBSX
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetTransactionDetailsByTransactionIDFromCallbackRIBSX.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTransactionDetailsByTransactionIDFromCallbackRIBSX is not found in the empty JSON string", GetTransactionDetailsByTransactionIDFromCallbackRIBSX.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetTransactionDetailsByTransactionIDFromCallbackRIBSX.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTransactionDetailsByTransactionIDFromCallbackRIBSX` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTransactionDetailsByTransactionIDFromCallbackRIBSX.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      // validate the optional field `offer`
      if (jsonObj.getAsJsonObject("offer") != null) {
        GetXRPRippleTransactionDetailsByTransactionIDRIOffer.validateJsonObject(jsonObj.getAsJsonObject("offer"));
      }
      // validate the optional field `receive`
      if (jsonObj.getAsJsonObject("receive") != null) {
        GetXRPRippleTransactionDetailsByTransactionIDRIReceive.validateJsonObject(jsonObj.getAsJsonObject("receive"));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `value`
      if (jsonObj.getAsJsonObject("value") != null) {
        GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue.validateJsonObject(jsonObj.getAsJsonObject("value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTransactionDetailsByTransactionIDFromCallbackRIBSX.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTransactionDetailsByTransactionIDFromCallbackRIBSX' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSX> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionDetailsByTransactionIDFromCallbackRIBSX.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTransactionDetailsByTransactionIDFromCallbackRIBSX>() {
           @Override
           public void write(JsonWriter out, GetTransactionDetailsByTransactionIDFromCallbackRIBSX value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTransactionDetailsByTransactionIDFromCallbackRIBSX read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX
  * @throws IOException if the JSON string is invalid with respect to GetTransactionDetailsByTransactionIDFromCallbackRIBSX
  */
  public static GetTransactionDetailsByTransactionIDFromCallbackRIBSX fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTransactionDetailsByTransactionIDFromCallbackRIBSX.class);
  }

 /**
  * Convert an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

