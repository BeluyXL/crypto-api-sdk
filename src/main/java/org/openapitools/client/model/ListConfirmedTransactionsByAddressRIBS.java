/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVoutInner;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSB;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSBC;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSBSC;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSBSCGasPrice;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSD;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSD2;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSE;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSEC;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSL;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSZ;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSZVJoinSplitInner;
import org.openapitools.client.model.ListConfirmedTransactionsByAddressRIBSZVinInner;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class ListConfirmedTransactionsByAddressRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ListConfirmedTransactionsByAddressRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListConfirmedTransactionsByAddressRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListConfirmedTransactionsByAddressRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSB> adapterListConfirmedTransactionsByAddressRIBSB = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSB.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSBC> adapterListConfirmedTransactionsByAddressRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSBC.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSBSC> adapterListConfirmedTransactionsByAddressRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSBSC.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSD> adapterListConfirmedTransactionsByAddressRIBSD = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSD.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSD2> adapterListConfirmedTransactionsByAddressRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSD2.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSE> adapterListConfirmedTransactionsByAddressRIBSE = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSE.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSEC> adapterListConfirmedTransactionsByAddressRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSEC.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSL> adapterListConfirmedTransactionsByAddressRIBSL = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSL.class));
            final TypeAdapter<ListConfirmedTransactionsByAddressRIBSZ> adapterListConfirmedTransactionsByAddressRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(ListConfirmedTransactionsByAddressRIBSZ.class));

            return (TypeAdapter<T>) new TypeAdapter<ListConfirmedTransactionsByAddressRIBS>() {
                @Override
                public void write(JsonWriter out, ListConfirmedTransactionsByAddressRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSB`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSB) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSB.toJsonTree((ListConfirmedTransactionsByAddressRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSBC`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSBC) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSBC.toJsonTree((ListConfirmedTransactionsByAddressRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSBSC`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSBSC) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSBSC.toJsonTree((ListConfirmedTransactionsByAddressRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSD`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSD) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSD.toJsonTree((ListConfirmedTransactionsByAddressRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSD2`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSD2) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSD2.toJsonTree((ListConfirmedTransactionsByAddressRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSE`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSE) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSE.toJsonTree((ListConfirmedTransactionsByAddressRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSEC`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSEC) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSEC.toJsonTree((ListConfirmedTransactionsByAddressRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSL`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSL) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSL.toJsonTree((ListConfirmedTransactionsByAddressRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListConfirmedTransactionsByAddressRIBSZ`
                    if (value.getActualInstance() instanceof ListConfirmedTransactionsByAddressRIBSZ) {
                        JsonObject obj = adapterListConfirmedTransactionsByAddressRIBSZ.toJsonTree((ListConfirmedTransactionsByAddressRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSZ");
                }

                @Override
                public ListConfirmedTransactionsByAddressRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ListConfirmedTransactionsByAddressRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSB'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSBC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSBC'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSBSC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSBSC'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSD'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSD2'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSE'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSEC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSEC'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSL'", e);
                    }

                    // deserialize ListConfirmedTransactionsByAddressRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListConfirmedTransactionsByAddressRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterListConfirmedTransactionsByAddressRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListConfirmedTransactionsByAddressRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListConfirmedTransactionsByAddressRIBSZ'", e);
                    }

                    if (match == 1) {
                        ListConfirmedTransactionsByAddressRIBS ret = new ListConfirmedTransactionsByAddressRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ListConfirmedTransactionsByAddressRIBS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ListConfirmedTransactionsByAddressRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListConfirmedTransactionsByAddressRIBS(ListConfirmedTransactionsByAddressRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ListConfirmedTransactionsByAddressRIBSB", new GenericType<ListConfirmedTransactionsByAddressRIBSB>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSBC", new GenericType<ListConfirmedTransactionsByAddressRIBSBC>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSBSC", new GenericType<ListConfirmedTransactionsByAddressRIBSBSC>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSD", new GenericType<ListConfirmedTransactionsByAddressRIBSD>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSD2", new GenericType<ListConfirmedTransactionsByAddressRIBSD2>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSE", new GenericType<ListConfirmedTransactionsByAddressRIBSE>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSEC", new GenericType<ListConfirmedTransactionsByAddressRIBSEC>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSL", new GenericType<ListConfirmedTransactionsByAddressRIBSL>() {
        });
        schemas.put("ListConfirmedTransactionsByAddressRIBSZ", new GenericType<ListConfirmedTransactionsByAddressRIBSZ>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ListConfirmedTransactionsByAddressRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSZ
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ListConfirmedTransactionsByAddressRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListConfirmedTransactionsByAddressRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSZ");
    }

    /**
     * Get the actual instance, which can be the following:
     * ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSZ
     *
     * @return The actual instance (ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSZ)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSB`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSB`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSB`
     */
    public ListConfirmedTransactionsByAddressRIBSB getListConfirmedTransactionsByAddressRIBSB() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSBC`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSBC`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSBC`
     */
    public ListConfirmedTransactionsByAddressRIBSBC getListConfirmedTransactionsByAddressRIBSBC() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSBSC`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSBSC`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSBSC`
     */
    public ListConfirmedTransactionsByAddressRIBSBSC getListConfirmedTransactionsByAddressRIBSBSC() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSD`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSD`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSD`
     */
    public ListConfirmedTransactionsByAddressRIBSD getListConfirmedTransactionsByAddressRIBSD() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSD2`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSD2`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSD2`
     */
    public ListConfirmedTransactionsByAddressRIBSD2 getListConfirmedTransactionsByAddressRIBSD2() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSE`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSE`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSE`
     */
    public ListConfirmedTransactionsByAddressRIBSE getListConfirmedTransactionsByAddressRIBSE() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSEC`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSEC`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSEC`
     */
    public ListConfirmedTransactionsByAddressRIBSEC getListConfirmedTransactionsByAddressRIBSEC() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSL`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSL`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSL`
     */
    public ListConfirmedTransactionsByAddressRIBSL getListConfirmedTransactionsByAddressRIBSL() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListConfirmedTransactionsByAddressRIBSZ`. If the actual instance is not `ListConfirmedTransactionsByAddressRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListConfirmedTransactionsByAddressRIBSZ`
     * @throws ClassCastException if the instance is not `ListConfirmedTransactionsByAddressRIBSZ`
     */
    public ListConfirmedTransactionsByAddressRIBSZ getListConfirmedTransactionsByAddressRIBSZ() throws ClassCastException {
        return (ListConfirmedTransactionsByAddressRIBSZ)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListConfirmedTransactionsByAddressRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ListConfirmedTransactionsByAddressRIBSB
    try {
      ListConfirmedTransactionsByAddressRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSBC
    try {
      ListConfirmedTransactionsByAddressRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSBC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSBSC
    try {
      ListConfirmedTransactionsByAddressRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSBSC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSD
    try {
      ListConfirmedTransactionsByAddressRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSD2
    try {
      ListConfirmedTransactionsByAddressRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSE
    try {
      ListConfirmedTransactionsByAddressRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSE failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSEC
    try {
      ListConfirmedTransactionsByAddressRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSEC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSL
    try {
      ListConfirmedTransactionsByAddressRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListConfirmedTransactionsByAddressRIBSZ
    try {
      ListConfirmedTransactionsByAddressRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListConfirmedTransactionsByAddressRIBSZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ListConfirmedTransactionsByAddressRIBS with oneOf schemas: ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSZ. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ListConfirmedTransactionsByAddressRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListConfirmedTransactionsByAddressRIBS
  * @throws IOException if the JSON string is invalid with respect to ListConfirmedTransactionsByAddressRIBS
  */
  public static ListConfirmedTransactionsByAddressRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListConfirmedTransactionsByAddressRIBS.class);
  }

 /**
  * Convert an instance of ListConfirmedTransactionsByAddressRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

