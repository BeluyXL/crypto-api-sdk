/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIFee;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIOffer;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIReceive;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIRecipientsInner;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRISendersInner;
import org.openapitools.client.model.GetXRPRippleTransactionDetailsByTransactionIDRIValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetXRPRippleTransactionDetailsByTransactionIDRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class GetXRPRippleTransactionDetailsByTransactionIDRI {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private String additionalData;

  public static final String SERIALIZED_NAME_DESTINATION_TAG = "destinationTag";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TAG)
  private Long destinationTag;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_MINED_IN_BLOCK_HASH = "minedInBlockHash";
  @SerializedName(SERIALIZED_NAME_MINED_IN_BLOCK_HASH)
  private String minedInBlockHash;

  public static final String SERIALIZED_NAME_MINED_IN_BLOCK_HEIGHT = "minedInBlockHeight";
  @SerializedName(SERIALIZED_NAME_MINED_IN_BLOCK_HEIGHT)
  private String minedInBlockHeight;

  public static final String SERIALIZED_NAME_OFFER = "offer";
  @SerializedName(SERIALIZED_NAME_OFFER)
  private GetXRPRippleTransactionDetailsByTransactionIDRIOffer offer;

  public static final String SERIALIZED_NAME_RECEIVE = "receive";
  @SerializedName(SERIALIZED_NAME_RECEIVE)
  private GetXRPRippleTransactionDetailsByTransactionIDRIReceive receive;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<GetXRPRippleTransactionDetailsByTransactionIDRIRecipientsInner> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENDERS = "senders";
  @SerializedName(SERIALIZED_NAME_SENDERS)
  private List<GetXRPRippleTransactionDetailsByTransactionIDRISendersInner> senders = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Long sequence;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "transactionHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  private String transactionHash;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private GetXRPRippleTransactionDetailsByTransactionIDRIFee fee;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private GetXRPRippleTransactionDetailsByTransactionIDRIValue value;

  public GetXRPRippleTransactionDetailsByTransactionIDRI() { 
  }

  public GetXRPRippleTransactionDetailsByTransactionIDRI additionalData(String additionalData) {
    
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Represents additional data that may be needed.
   * @return additionalData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "rPmPErQe4g9725pcNxJpuvKkdqTESTQ6Tu", required = true, value = "Represents additional data that may be needed.")

  public String getAdditionalData() {
    return additionalData;
  }


  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI destinationTag(Long destinationTag) {
    
    this.destinationTag = destinationTag;
    return this;
  }

   /**
   * Get destinationTag
   * @return destinationTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3999472835", value = "")

  public Long getDestinationTag() {
    return destinationTag;
  }


  public void setDestinationTag(Long destinationTag) {
    this.destinationTag = destinationTag;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI index(String index) {
    
    this.index = index;
    return this;
  }

   /**
   * Defines the index of the transaction, i.e. the consecutive place it takes in the blockchain.
   * @return index
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "Defines the index of the transaction, i.e. the consecutive place it takes in the blockchain.")

  public String getIndex() {
    return index;
  }


  public void setIndex(String index) {
    this.index = index;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI minedInBlockHash(String minedInBlockHash) {
    
    this.minedInBlockHash = minedInBlockHash;
    return this;
  }

   /**
   * Represents the hash of the block where this transaction was mined/confirmed for first time. The hash is defined as a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
   * @return minedInBlockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3f7af58d6cf1cd9020fb285d8e3e215131800d5109e42647ffd9b3aeae59df33", required = true, value = "Represents the hash of the block where this transaction was mined/confirmed for first time. The hash is defined as a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.")

  public String getMinedInBlockHash() {
    return minedInBlockHash;
  }


  public void setMinedInBlockHash(String minedInBlockHash) {
    this.minedInBlockHash = minedInBlockHash;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI minedInBlockHeight(String minedInBlockHeight) {
    
    this.minedInBlockHeight = minedInBlockHeight;
    return this;
  }

   /**
   * Represents the hight of the block where this transaction was mined/confirmed for first time. The height is defined as the number of blocks in the blockchain preceding this specific block.
   * @return minedInBlockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "15973802", required = true, value = "Represents the hight of the block where this transaction was mined/confirmed for first time. The height is defined as the number of blocks in the blockchain preceding this specific block.")

  public String getMinedInBlockHeight() {
    return minedInBlockHeight;
  }


  public void setMinedInBlockHeight(String minedInBlockHeight) {
    this.minedInBlockHeight = minedInBlockHeight;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI offer(GetXRPRippleTransactionDetailsByTransactionIDRIOffer offer) {
    
    this.offer = offer;
    return this;
  }

   /**
   * Get offer
   * @return offer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetXRPRippleTransactionDetailsByTransactionIDRIOffer getOffer() {
    return offer;
  }


  public void setOffer(GetXRPRippleTransactionDetailsByTransactionIDRIOffer offer) {
    this.offer = offer;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI receive(GetXRPRippleTransactionDetailsByTransactionIDRIReceive receive) {
    
    this.receive = receive;
    return this;
  }

   /**
   * Get receive
   * @return receive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetXRPRippleTransactionDetailsByTransactionIDRIReceive getReceive() {
    return receive;
  }


  public void setReceive(GetXRPRippleTransactionDetailsByTransactionIDRIReceive receive) {
    this.receive = receive;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI recipients(List<GetXRPRippleTransactionDetailsByTransactionIDRIRecipientsInner> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public GetXRPRippleTransactionDetailsByTransactionIDRI addRecipientsItem(GetXRPRippleTransactionDetailsByTransactionIDRIRecipientsInner recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Represents an object of addresses that receive the transactions.
   * @return recipients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents an object of addresses that receive the transactions.")

  public List<GetXRPRippleTransactionDetailsByTransactionIDRIRecipientsInner> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<GetXRPRippleTransactionDetailsByTransactionIDRIRecipientsInner> recipients) {
    this.recipients = recipients;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI senders(List<GetXRPRippleTransactionDetailsByTransactionIDRISendersInner> senders) {
    
    this.senders = senders;
    return this;
  }

  public GetXRPRippleTransactionDetailsByTransactionIDRI addSendersItem(GetXRPRippleTransactionDetailsByTransactionIDRISendersInner sendersItem) {
    this.senders.add(sendersItem);
    return this;
  }

   /**
   * Represents an object of addresses that provide the funds.
   * @return senders
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents an object of addresses that provide the funds.")

  public List<GetXRPRippleTransactionDetailsByTransactionIDRISendersInner> getSenders() {
    return senders;
  }


  public void setSenders(List<GetXRPRippleTransactionDetailsByTransactionIDRISendersInner> senders) {
    this.senders = senders;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI sequence(Long sequence) {
    
    this.sequence = sequence;
    return this;
  }

   /**
   * Defines the transaction input&#39;s sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.
   * @return sequence
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4294967295", required = true, value = "Defines the transaction input's sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.")

  public Long getSequence() {
    return sequence;
  }


  public void setSequence(Long sequence) {
    this.sequence = sequence;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Defines the status of the transaction.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the status of the transaction.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI timestamp(Integer timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1582202940", required = true, value = "Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.")

  public Integer getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI transactionHash(String transactionHash) {
    
    this.transactionHash = transactionHash;
    return this;
  }

   /**
   * Represents the same as &#x60;transactionId&#x60; for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols &#x60;hash&#x60; is different from &#x60;transactionId&#x60; for SegWit transactions.
   * @return transactionHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "36a1737481edec87bacc3101dfb752ae2c76f9171e7edebe587e330c1ea77c8d", required = true, value = "Represents the same as `transactionId` for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId` for SegWit transactions.")

  public String getTransactionHash() {
    return transactionHash;
  }


  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines the type of the transaction.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Payment", required = true, value = "Defines the type of the transaction.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI fee(GetXRPRippleTransactionDetailsByTransactionIDRIFee fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetXRPRippleTransactionDetailsByTransactionIDRIFee getFee() {
    return fee;
  }


  public void setFee(GetXRPRippleTransactionDetailsByTransactionIDRIFee fee) {
    this.fee = fee;
  }


  public GetXRPRippleTransactionDetailsByTransactionIDRI value(GetXRPRippleTransactionDetailsByTransactionIDRIValue value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetXRPRippleTransactionDetailsByTransactionIDRIValue getValue() {
    return value;
  }


  public void setValue(GetXRPRippleTransactionDetailsByTransactionIDRIValue value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetXRPRippleTransactionDetailsByTransactionIDRI getXRPRippleTransactionDetailsByTransactionIDRI = (GetXRPRippleTransactionDetailsByTransactionIDRI) o;
    return Objects.equals(this.additionalData, getXRPRippleTransactionDetailsByTransactionIDRI.additionalData) &&
        Objects.equals(this.destinationTag, getXRPRippleTransactionDetailsByTransactionIDRI.destinationTag) &&
        Objects.equals(this.index, getXRPRippleTransactionDetailsByTransactionIDRI.index) &&
        Objects.equals(this.minedInBlockHash, getXRPRippleTransactionDetailsByTransactionIDRI.minedInBlockHash) &&
        Objects.equals(this.minedInBlockHeight, getXRPRippleTransactionDetailsByTransactionIDRI.minedInBlockHeight) &&
        Objects.equals(this.offer, getXRPRippleTransactionDetailsByTransactionIDRI.offer) &&
        Objects.equals(this.receive, getXRPRippleTransactionDetailsByTransactionIDRI.receive) &&
        Objects.equals(this.recipients, getXRPRippleTransactionDetailsByTransactionIDRI.recipients) &&
        Objects.equals(this.senders, getXRPRippleTransactionDetailsByTransactionIDRI.senders) &&
        Objects.equals(this.sequence, getXRPRippleTransactionDetailsByTransactionIDRI.sequence) &&
        Objects.equals(this.status, getXRPRippleTransactionDetailsByTransactionIDRI.status) &&
        Objects.equals(this.timestamp, getXRPRippleTransactionDetailsByTransactionIDRI.timestamp) &&
        Objects.equals(this.transactionHash, getXRPRippleTransactionDetailsByTransactionIDRI.transactionHash) &&
        Objects.equals(this.type, getXRPRippleTransactionDetailsByTransactionIDRI.type) &&
        Objects.equals(this.fee, getXRPRippleTransactionDetailsByTransactionIDRI.fee) &&
        Objects.equals(this.value, getXRPRippleTransactionDetailsByTransactionIDRI.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalData, destinationTag, index, minedInBlockHash, minedInBlockHeight, offer, receive, recipients, senders, sequence, status, timestamp, transactionHash, type, fee, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetXRPRippleTransactionDetailsByTransactionIDRI {\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    destinationTag: ").append(toIndentedString(destinationTag)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    minedInBlockHash: ").append(toIndentedString(minedInBlockHash)).append("\n");
    sb.append("    minedInBlockHeight: ").append(toIndentedString(minedInBlockHeight)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    receive: ").append(toIndentedString(receive)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    senders: ").append(toIndentedString(senders)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalData");
    openapiFields.add("destinationTag");
    openapiFields.add("index");
    openapiFields.add("minedInBlockHash");
    openapiFields.add("minedInBlockHeight");
    openapiFields.add("offer");
    openapiFields.add("receive");
    openapiFields.add("recipients");
    openapiFields.add("senders");
    openapiFields.add("sequence");
    openapiFields.add("status");
    openapiFields.add("timestamp");
    openapiFields.add("transactionHash");
    openapiFields.add("type");
    openapiFields.add("fee");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalData");
    openapiRequiredFields.add("index");
    openapiRequiredFields.add("minedInBlockHash");
    openapiRequiredFields.add("minedInBlockHeight");
    openapiRequiredFields.add("offer");
    openapiRequiredFields.add("receive");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("senders");
    openapiRequiredFields.add("sequence");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("transactionHash");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetXRPRippleTransactionDetailsByTransactionIDRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetXRPRippleTransactionDetailsByTransactionIDRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetXRPRippleTransactionDetailsByTransactionIDRI is not found in the empty JSON string", GetXRPRippleTransactionDetailsByTransactionIDRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetXRPRippleTransactionDetailsByTransactionIDRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetXRPRippleTransactionDetailsByTransactionIDRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetXRPRippleTransactionDetailsByTransactionIDRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      if (jsonObj.get("index") != null && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if (jsonObj.get("minedInBlockHash") != null && !jsonObj.get("minedInBlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minedInBlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minedInBlockHash").toString()));
      }
      if (jsonObj.get("minedInBlockHeight") != null && !jsonObj.get("minedInBlockHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minedInBlockHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minedInBlockHeight").toString()));
      }
      // validate the optional field `offer`
      if (jsonObj.getAsJsonObject("offer") != null) {
        GetXRPRippleTransactionDetailsByTransactionIDRIOffer.validateJsonObject(jsonObj.getAsJsonObject("offer"));
      }
      // validate the optional field `receive`
      if (jsonObj.getAsJsonObject("receive") != null) {
        GetXRPRippleTransactionDetailsByTransactionIDRIReceive.validateJsonObject(jsonObj.getAsJsonObject("receive"));
      }
      JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
      if (jsonArrayrecipients != null) {
        // ensure the json data is an array
        if (!jsonObj.get("recipients").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
        }

        // validate the optional field `recipients` (array)
        for (int i = 0; i < jsonArrayrecipients.size(); i++) {
          GetXRPRippleTransactionDetailsByTransactionIDRIRecipientsInner.validateJsonObject(jsonArrayrecipients.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraysenders = jsonObj.getAsJsonArray("senders");
      if (jsonArraysenders != null) {
        // ensure the json data is an array
        if (!jsonObj.get("senders").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `senders` to be an array in the JSON string but got `%s`", jsonObj.get("senders").toString()));
        }

        // validate the optional field `senders` (array)
        for (int i = 0; i < jsonArraysenders.size(); i++) {
          GetXRPRippleTransactionDetailsByTransactionIDRISendersInner.validateJsonObject(jsonArraysenders.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("transactionHash") != null && !jsonObj.get("transactionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionHash").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `fee`
      if (jsonObj.getAsJsonObject("fee") != null) {
        GetXRPRippleTransactionDetailsByTransactionIDRIFee.validateJsonObject(jsonObj.getAsJsonObject("fee"));
      }
      // validate the optional field `value`
      if (jsonObj.getAsJsonObject("value") != null) {
        GetXRPRippleTransactionDetailsByTransactionIDRIValue.validateJsonObject(jsonObj.getAsJsonObject("value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetXRPRippleTransactionDetailsByTransactionIDRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetXRPRippleTransactionDetailsByTransactionIDRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetXRPRippleTransactionDetailsByTransactionIDRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetXRPRippleTransactionDetailsByTransactionIDRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetXRPRippleTransactionDetailsByTransactionIDRI>() {
           @Override
           public void write(JsonWriter out, GetXRPRippleTransactionDetailsByTransactionIDRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetXRPRippleTransactionDetailsByTransactionIDRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetXRPRippleTransactionDetailsByTransactionIDRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetXRPRippleTransactionDetailsByTransactionIDRI
  * @throws IOException if the JSON string is invalid with respect to GetXRPRippleTransactionDetailsByTransactionIDRI
  */
  public static GetXRPRippleTransactionDetailsByTransactionIDRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetXRPRippleTransactionDetailsByTransactionIDRI.class);
  }

 /**
  * Convert an instance of GetXRPRippleTransactionDetailsByTransactionIDRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

