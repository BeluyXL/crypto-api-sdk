/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListWalletTransactionsRIFungibleTokensInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class ListWalletTransactionsRIFungibleTokensInner {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CONVERTED_AMOUNT = "convertedAmount";
  @SerializedName(SERIALIZED_NAME_CONVERTED_AMOUNT)
  private String convertedAmount;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE_UNIT = "exchangeRateUnit";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE_UNIT)
  private String exchangeRateUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TOKEN_DECIMALS = "tokenDecimals";
  @SerializedName(SERIALIZED_NAME_TOKEN_DECIMALS)
  private Integer tokenDecimals;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ListWalletTransactionsRIFungibleTokensInner() { 
  }

  public ListWalletTransactionsRIFungibleTokensInner amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Defines the amount of the fungible tokens.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.254", required = true, value = "Defines the amount of the fungible tokens.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public ListWalletTransactionsRIFungibleTokensInner convertedAmount(String convertedAmount) {
    
    this.convertedAmount = convertedAmount;
    return this;
  }

   /**
   * Defines the tokens&#39; converted amount value.
   * @return convertedAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.0034", required = true, value = "Defines the tokens' converted amount value.")

  public String getConvertedAmount() {
    return convertedAmount;
  }


  public void setConvertedAmount(String convertedAmount) {
    this.convertedAmount = convertedAmount;
  }


  public ListWalletTransactionsRIFungibleTokensInner exchangeRateUnit(String exchangeRateUnit) {
    
    this.exchangeRateUnit = exchangeRateUnit;
    return this;
  }

   /**
   * Represents token&#39;s exchange rate unit.
   * @return exchangeRateUnit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "Represents token's exchange rate unit.")

  public String getExchangeRateUnit() {
    return exchangeRateUnit;
  }


  public void setExchangeRateUnit(String exchangeRateUnit) {
    this.exchangeRateUnit = exchangeRateUnit;
  }


  public ListWalletTransactionsRIFungibleTokensInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Defines the token&#39;s name as a string.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Tether USD", required = true, value = "Defines the token's name as a string.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ListWalletTransactionsRIFungibleTokensInner recipient(String recipient) {
    
    this.recipient = recipient;
    return this;
  }

   /**
   * The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one
   * @return recipient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2MzakdGTEp8SMWEHKwKM4HYv6uNCBXtHpkV", required = true, value = "The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one")

  public String getRecipient() {
    return recipient;
  }


  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public ListWalletTransactionsRIFungibleTokensInner sender(String sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.
   * @return sender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2N5PcdirZUzKF9bWuGdugNuzcQrCbBudxv1", required = true, value = "Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.")

  public String getSender() {
    return sender;
  }


  public void setSender(String sender) {
    this.sender = sender;
  }


  public ListWalletTransactionsRIFungibleTokensInner symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Defines the symbol of the fungible tokens.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTC", required = true, value = "Defines the symbol of the fungible tokens.")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public ListWalletTransactionsRIFungibleTokensInner tokenDecimals(Integer tokenDecimals) {
    
    this.tokenDecimals = tokenDecimals;
    return this;
  }

   /**
   * Defines the decimals of the token, i.e. the number of digits that come after the decimal coma of the token.
   * @return tokenDecimals
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "6", required = true, value = "Defines the decimals of the token, i.e. the number of digits that come after the decimal coma of the token.")

  public Integer getTokenDecimals() {
    return tokenDecimals;
  }


  public void setTokenDecimals(Integer tokenDecimals) {
    this.tokenDecimals = tokenDecimals;
  }


  public ListWalletTransactionsRIFungibleTokensInner type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines the specific token type.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ERC-20", required = true, value = "Defines the specific token type.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListWalletTransactionsRIFungibleTokensInner listWalletTransactionsRIFungibleTokensInner = (ListWalletTransactionsRIFungibleTokensInner) o;
    return Objects.equals(this.amount, listWalletTransactionsRIFungibleTokensInner.amount) &&
        Objects.equals(this.convertedAmount, listWalletTransactionsRIFungibleTokensInner.convertedAmount) &&
        Objects.equals(this.exchangeRateUnit, listWalletTransactionsRIFungibleTokensInner.exchangeRateUnit) &&
        Objects.equals(this.name, listWalletTransactionsRIFungibleTokensInner.name) &&
        Objects.equals(this.recipient, listWalletTransactionsRIFungibleTokensInner.recipient) &&
        Objects.equals(this.sender, listWalletTransactionsRIFungibleTokensInner.sender) &&
        Objects.equals(this.symbol, listWalletTransactionsRIFungibleTokensInner.symbol) &&
        Objects.equals(this.tokenDecimals, listWalletTransactionsRIFungibleTokensInner.tokenDecimals) &&
        Objects.equals(this.type, listWalletTransactionsRIFungibleTokensInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, convertedAmount, exchangeRateUnit, name, recipient, sender, symbol, tokenDecimals, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListWalletTransactionsRIFungibleTokensInner {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    convertedAmount: ").append(toIndentedString(convertedAmount)).append("\n");
    sb.append("    exchangeRateUnit: ").append(toIndentedString(exchangeRateUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    tokenDecimals: ").append(toIndentedString(tokenDecimals)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("convertedAmount");
    openapiFields.add("exchangeRateUnit");
    openapiFields.add("name");
    openapiFields.add("recipient");
    openapiFields.add("sender");
    openapiFields.add("symbol");
    openapiFields.add("tokenDecimals");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("convertedAmount");
    openapiRequiredFields.add("exchangeRateUnit");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("recipient");
    openapiRequiredFields.add("sender");
    openapiRequiredFields.add("symbol");
    openapiRequiredFields.add("tokenDecimals");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListWalletTransactionsRIFungibleTokensInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListWalletTransactionsRIFungibleTokensInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListWalletTransactionsRIFungibleTokensInner is not found in the empty JSON string", ListWalletTransactionsRIFungibleTokensInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListWalletTransactionsRIFungibleTokensInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListWalletTransactionsRIFungibleTokensInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListWalletTransactionsRIFungibleTokensInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (jsonObj.get("convertedAmount") != null && !jsonObj.get("convertedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convertedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convertedAmount").toString()));
      }
      if (jsonObj.get("exchangeRateUnit") != null && !jsonObj.get("exchangeRateUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeRateUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeRateUnit").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if (jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListWalletTransactionsRIFungibleTokensInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListWalletTransactionsRIFungibleTokensInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListWalletTransactionsRIFungibleTokensInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListWalletTransactionsRIFungibleTokensInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListWalletTransactionsRIFungibleTokensInner>() {
           @Override
           public void write(JsonWriter out, ListWalletTransactionsRIFungibleTokensInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListWalletTransactionsRIFungibleTokensInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListWalletTransactionsRIFungibleTokensInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListWalletTransactionsRIFungibleTokensInner
  * @throws IOException if the JSON string is invalid with respect to ListWalletTransactionsRIFungibleTokensInner
  */
  public static ListWalletTransactionsRIFungibleTokensInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListWalletTransactionsRIFungibleTokensInner.class);
  }

 /**
  * Convert an instance of ListWalletTransactionsRIFungibleTokensInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

