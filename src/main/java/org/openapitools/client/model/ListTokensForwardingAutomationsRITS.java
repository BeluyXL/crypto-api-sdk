/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ListTokensForwardingAutomationsRITSBOT;
import org.openapitools.client.model.ListTokensForwardingAutomationsRITSET;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class ListTokensForwardingAutomationsRITS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ListTokensForwardingAutomationsRITS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListTokensForwardingAutomationsRITS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListTokensForwardingAutomationsRITS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListTokensForwardingAutomationsRITSBOT> adapterListTokensForwardingAutomationsRITSBOT = gson.getDelegateAdapter(this, TypeToken.get(ListTokensForwardingAutomationsRITSBOT.class));
            final TypeAdapter<ListTokensForwardingAutomationsRITSET> adapterListTokensForwardingAutomationsRITSET = gson.getDelegateAdapter(this, TypeToken.get(ListTokensForwardingAutomationsRITSET.class));

            return (TypeAdapter<T>) new TypeAdapter<ListTokensForwardingAutomationsRITS>() {
                @Override
                public void write(JsonWriter out, ListTokensForwardingAutomationsRITS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ListTokensForwardingAutomationsRITSBOT`
                    if (value.getActualInstance() instanceof ListTokensForwardingAutomationsRITSBOT) {
                        JsonObject obj = adapterListTokensForwardingAutomationsRITSBOT.toJsonTree((ListTokensForwardingAutomationsRITSBOT)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTokensForwardingAutomationsRITSET`
                    if (value.getActualInstance() instanceof ListTokensForwardingAutomationsRITSET) {
                        JsonObject obj = adapterListTokensForwardingAutomationsRITSET.toJsonTree((ListTokensForwardingAutomationsRITSET)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ListTokensForwardingAutomationsRITSBOT, ListTokensForwardingAutomationsRITSET");
                }

                @Override
                public ListTokensForwardingAutomationsRITS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ListTokensForwardingAutomationsRITSBOT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTokensForwardingAutomationsRITSBOT.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTokensForwardingAutomationsRITSBOT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTokensForwardingAutomationsRITSBOT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListTokensForwardingAutomationsRITSBOT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListTokensForwardingAutomationsRITSBOT'", e);
                    }

                    // deserialize ListTokensForwardingAutomationsRITSET
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTokensForwardingAutomationsRITSET.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTokensForwardingAutomationsRITSET;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTokensForwardingAutomationsRITSET'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListTokensForwardingAutomationsRITSET failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListTokensForwardingAutomationsRITSET'", e);
                    }

                    if (match == 1) {
                        ListTokensForwardingAutomationsRITS ret = new ListTokensForwardingAutomationsRITS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ListTokensForwardingAutomationsRITS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ListTokensForwardingAutomationsRITS() {
        super("oneOf", Boolean.FALSE);
    }

    public ListTokensForwardingAutomationsRITS(ListTokensForwardingAutomationsRITSBOT o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTokensForwardingAutomationsRITS(ListTokensForwardingAutomationsRITSET o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ListTokensForwardingAutomationsRITSBOT", new GenericType<ListTokensForwardingAutomationsRITSBOT>() {
        });
        schemas.put("ListTokensForwardingAutomationsRITSET", new GenericType<ListTokensForwardingAutomationsRITSET>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ListTokensForwardingAutomationsRITS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ListTokensForwardingAutomationsRITSBOT, ListTokensForwardingAutomationsRITSET
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ListTokensForwardingAutomationsRITSBOT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTokensForwardingAutomationsRITSET) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ListTokensForwardingAutomationsRITSBOT, ListTokensForwardingAutomationsRITSET");
    }

    /**
     * Get the actual instance, which can be the following:
     * ListTokensForwardingAutomationsRITSBOT, ListTokensForwardingAutomationsRITSET
     *
     * @return The actual instance (ListTokensForwardingAutomationsRITSBOT, ListTokensForwardingAutomationsRITSET)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTokensForwardingAutomationsRITSBOT`. If the actual instance is not `ListTokensForwardingAutomationsRITSBOT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTokensForwardingAutomationsRITSBOT`
     * @throws ClassCastException if the instance is not `ListTokensForwardingAutomationsRITSBOT`
     */
    public ListTokensForwardingAutomationsRITSBOT getListTokensForwardingAutomationsRITSBOT() throws ClassCastException {
        return (ListTokensForwardingAutomationsRITSBOT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTokensForwardingAutomationsRITSET`. If the actual instance is not `ListTokensForwardingAutomationsRITSET`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTokensForwardingAutomationsRITSET`
     * @throws ClassCastException if the instance is not `ListTokensForwardingAutomationsRITSET`
     */
    public ListTokensForwardingAutomationsRITSET getListTokensForwardingAutomationsRITSET() throws ClassCastException {
        return (ListTokensForwardingAutomationsRITSET)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListTokensForwardingAutomationsRITS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ListTokensForwardingAutomationsRITSBOT
    try {
      ListTokensForwardingAutomationsRITSBOT.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListTokensForwardingAutomationsRITSBOT failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListTokensForwardingAutomationsRITSET
    try {
      ListTokensForwardingAutomationsRITSET.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListTokensForwardingAutomationsRITSET failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ListTokensForwardingAutomationsRITS with oneOf schemas: ListTokensForwardingAutomationsRITSBOT, ListTokensForwardingAutomationsRITSET. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ListTokensForwardingAutomationsRITS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListTokensForwardingAutomationsRITS
  * @throws IOException if the JSON string is invalid with respect to ListTokensForwardingAutomationsRITS
  */
  public static ListTokensForwardingAutomationsRITS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTokensForwardingAutomationsRITS.class);
  }

 /**
  * Convert an instance of ListTokensForwardingAutomationsRITS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

