/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ListAssetsDetailsRISC;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class ListAssetsDetailsRIS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ListAssetsDetailsRIS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListAssetsDetailsRIS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListAssetsDetailsRIS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListAssetsDetailsRISC> adapterListAssetsDetailsRISC = gson.getDelegateAdapter(this, TypeToken.get(ListAssetsDetailsRISC.class));

            return (TypeAdapter<T>) new TypeAdapter<ListAssetsDetailsRIS>() {
                @Override
                public void write(JsonWriter out, ListAssetsDetailsRIS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ListAssetsDetailsRISC`
                    if (value.getActualInstance() instanceof ListAssetsDetailsRISC) {
                        JsonObject obj = adapterListAssetsDetailsRISC.toJsonTree((ListAssetsDetailsRISC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ListAssetsDetailsRISC");
                }

                @Override
                public ListAssetsDetailsRIS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ListAssetsDetailsRISC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListAssetsDetailsRISC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListAssetsDetailsRISC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListAssetsDetailsRISC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListAssetsDetailsRISC'", e);
                    }

                    if (match == 1) {
                        ListAssetsDetailsRIS ret = new ListAssetsDetailsRIS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ListAssetsDetailsRIS: %d classes match result, expected 1. JSON: %s", match, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ListAssetsDetailsRIS() {
        super("oneOf", Boolean.FALSE);
    }

    public ListAssetsDetailsRIS(ListAssetsDetailsRISC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ListAssetsDetailsRISC", new GenericType<ListAssetsDetailsRISC>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ListAssetsDetailsRIS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ListAssetsDetailsRISC
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ListAssetsDetailsRISC) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ListAssetsDetailsRISC");
    }

    /**
     * Get the actual instance, which can be the following:
     * ListAssetsDetailsRISC
     *
     * @return The actual instance (ListAssetsDetailsRISC)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListAssetsDetailsRISC`. If the actual instance is not `ListAssetsDetailsRISC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListAssetsDetailsRISC`
     * @throws ClassCastException if the instance is not `ListAssetsDetailsRISC`
     */
    public ListAssetsDetailsRISC getListAssetsDetailsRISC() throws ClassCastException {
        return (ListAssetsDetailsRISC)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAssetsDetailsRIS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    // validate the json string with ListAssetsDetailsRISC
    try {
      ListAssetsDetailsRISC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ListAssetsDetailsRIS with oneOf schemas: ListAssetsDetailsRISC. %d class(es) match the result, expected 1. JSON: %s", validCount, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ListAssetsDetailsRIS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAssetsDetailsRIS
  * @throws IOException if the JSON string is invalid with respect to ListAssetsDetailsRIS
  */
  public static ListAssetsDetailsRIS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAssetsDetailsRIS.class);
  }

 /**
  * Convert an instance of ListAssetsDetailsRIS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

