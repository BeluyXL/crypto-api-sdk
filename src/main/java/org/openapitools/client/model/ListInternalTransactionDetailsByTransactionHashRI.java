/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * ListInternalTransactionDetailsByTransactionHashRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class ListInternalTransactionDetailsByTransactionHashRI {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_BLOCK_HASH = "blockHash";
  @SerializedName(SERIALIZED_NAME_BLOCK_HASH)
  private String blockHash;

  public static final String SERIALIZED_NAME_BLOCK_HEIGHT = "blockHeight";
  @SerializedName(SERIALIZED_NAME_BLOCK_HEIGHT)
  private Integer blockHeight;

  public static final String SERIALIZED_NAME_OPERATION_I_D = "operationID";
  @SerializedName(SERIALIZED_NAME_OPERATION_I_D)
  private String operationID;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private String operationType;

  public static final String SERIALIZED_NAME_PARENT_HASH = "parentHash";
  @SerializedName(SERIALIZED_NAME_PARENT_HASH)
  private String parentHash;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public ListInternalTransactionDetailsByTransactionHashRI() { 
  }

  public ListInternalTransactionDetailsByTransactionHashRI amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Defines the specific amount of the transaction.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.089286906469667626", required = true, value = "Defines the specific amount of the transaction.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public ListInternalTransactionDetailsByTransactionHashRI blockHash(String blockHash) {
    
    this.blockHash = blockHash;
    return this;
  }

   /**
   * Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
   * @return blockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x85d538e441835ea749738cf690b676099d869059815842a7bde3259c58ff29eb", required = true, value = "Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.")

  public String getBlockHash() {
    return blockHash;
  }


  public void setBlockHash(String blockHash) {
    this.blockHash = blockHash;
  }


  public ListInternalTransactionDetailsByTransactionHashRI blockHeight(Integer blockHeight) {
    
    this.blockHeight = blockHeight;
    return this;
  }

   /**
   * Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;.
   * @return blockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12561919", required = true, value = "Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \"Genesis block\".")

  public Integer getBlockHeight() {
    return blockHeight;
  }


  public void setBlockHeight(Integer blockHeight) {
    this.blockHeight = blockHeight;
  }


  public ListInternalTransactionDetailsByTransactionHashRI operationID(String operationID) {
    
    this.operationID = operationID;
    return this;
  }

   /**
   * Represents the unique internal transaction ID in regards to the parent transaction (type trace address).
   * @return operationID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "call_1", required = true, value = "Represents the unique internal transaction ID in regards to the parent transaction (type trace address).")

  public String getOperationID() {
    return operationID;
  }


  public void setOperationID(String operationID) {
    this.operationID = operationID;
  }


  public ListInternalTransactionDetailsByTransactionHashRI operationType(String operationType) {
    
    this.operationType = operationType;
    return this;
  }

   /**
   * Defines the call type of the internal transaction.
   * @return operationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CALL", required = true, value = "Defines the call type of the internal transaction.")

  public String getOperationType() {
    return operationType;
  }


  public void setOperationType(String operationType) {
    this.operationType = operationType;
  }


  public ListInternalTransactionDetailsByTransactionHashRI parentHash(String parentHash) {
    
    this.parentHash = parentHash;
    return this;
  }

   /**
   * Defines the specific hash of the parent transaction.
   * @return parentHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x5d4ea0471b70de09fa3d6a4bc32f703ec44483bffa4d6169fa0a36c6a1dc108a", required = true, value = "Defines the specific hash of the parent transaction.")

  public String getParentHash() {
    return parentHash;
  }


  public void setParentHash(String parentHash) {
    this.parentHash = parentHash;
  }


  public ListInternalTransactionDetailsByTransactionHashRI recipient(String recipient) {
    
    this.recipient = recipient;
    return this;
  }

   /**
   * Represents the recipient address with the respective amount.
   * @return recipient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", required = true, value = "Represents the recipient address with the respective amount.")

  public String getRecipient() {
    return recipient;
  }


  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public ListInternalTransactionDetailsByTransactionHashRI sender(String sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Represents the sender address with the respective amount.
   * @return sender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x7a250d5630b4cf539739df2c5dacb4c659f2488d", required = true, value = "Represents the sender address with the respective amount.")

  public String getSender() {
    return sender;
  }


  public void setSender(String sender) {
    this.sender = sender;
  }


  public ListInternalTransactionDetailsByTransactionHashRI timestamp(Integer timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1622728329", required = true, value = "Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.")

  public Integer getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListInternalTransactionDetailsByTransactionHashRI listInternalTransactionDetailsByTransactionHashRI = (ListInternalTransactionDetailsByTransactionHashRI) o;
    return Objects.equals(this.amount, listInternalTransactionDetailsByTransactionHashRI.amount) &&
        Objects.equals(this.blockHash, listInternalTransactionDetailsByTransactionHashRI.blockHash) &&
        Objects.equals(this.blockHeight, listInternalTransactionDetailsByTransactionHashRI.blockHeight) &&
        Objects.equals(this.operationID, listInternalTransactionDetailsByTransactionHashRI.operationID) &&
        Objects.equals(this.operationType, listInternalTransactionDetailsByTransactionHashRI.operationType) &&
        Objects.equals(this.parentHash, listInternalTransactionDetailsByTransactionHashRI.parentHash) &&
        Objects.equals(this.recipient, listInternalTransactionDetailsByTransactionHashRI.recipient) &&
        Objects.equals(this.sender, listInternalTransactionDetailsByTransactionHashRI.sender) &&
        Objects.equals(this.timestamp, listInternalTransactionDetailsByTransactionHashRI.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, blockHash, blockHeight, operationID, operationType, parentHash, recipient, sender, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListInternalTransactionDetailsByTransactionHashRI {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
    sb.append("    blockHeight: ").append(toIndentedString(blockHeight)).append("\n");
    sb.append("    operationID: ").append(toIndentedString(operationID)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    parentHash: ").append(toIndentedString(parentHash)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("blockHash");
    openapiFields.add("blockHeight");
    openapiFields.add("operationID");
    openapiFields.add("operationType");
    openapiFields.add("parentHash");
    openapiFields.add("recipient");
    openapiFields.add("sender");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("blockHash");
    openapiRequiredFields.add("blockHeight");
    openapiRequiredFields.add("operationID");
    openapiRequiredFields.add("operationType");
    openapiRequiredFields.add("parentHash");
    openapiRequiredFields.add("recipient");
    openapiRequiredFields.add("sender");
    openapiRequiredFields.add("timestamp");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListInternalTransactionDetailsByTransactionHashRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListInternalTransactionDetailsByTransactionHashRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListInternalTransactionDetailsByTransactionHashRI is not found in the empty JSON string", ListInternalTransactionDetailsByTransactionHashRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListInternalTransactionDetailsByTransactionHashRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListInternalTransactionDetailsByTransactionHashRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListInternalTransactionDetailsByTransactionHashRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (jsonObj.get("blockHash") != null && !jsonObj.get("blockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockHash").toString()));
      }
      if (jsonObj.get("operationID") != null && !jsonObj.get("operationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationID").toString()));
      }
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      if (jsonObj.get("parentHash") != null && !jsonObj.get("parentHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentHash").toString()));
      }
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListInternalTransactionDetailsByTransactionHashRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListInternalTransactionDetailsByTransactionHashRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListInternalTransactionDetailsByTransactionHashRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListInternalTransactionDetailsByTransactionHashRI.class));

       return (TypeAdapter<T>) new TypeAdapter<ListInternalTransactionDetailsByTransactionHashRI>() {
           @Override
           public void write(JsonWriter out, ListInternalTransactionDetailsByTransactionHashRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListInternalTransactionDetailsByTransactionHashRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListInternalTransactionDetailsByTransactionHashRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListInternalTransactionDetailsByTransactionHashRI
  * @throws IOException if the JSON string is invalid with respect to ListInternalTransactionDetailsByTransactionHashRI
  */
  public static ListInternalTransactionDetailsByTransactionHashRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListInternalTransactionDetailsByTransactionHashRI.class);
  }

 /**
  * Convert an instance of ListInternalTransactionDetailsByTransactionHashRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

