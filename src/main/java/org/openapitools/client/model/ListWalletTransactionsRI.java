/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ListWalletTransactionsRIFee;
import org.openapitools.client.model.ListWalletTransactionsRIFungibleTokens;
import org.openapitools.client.model.ListWalletTransactionsRIInternalTransactions;
import org.openapitools.client.model.ListWalletTransactionsRINonFungibleTokens;
import org.openapitools.client.model.ListWalletTransactionsRIRecipients;
import org.openapitools.client.model.ListWalletTransactionsRISenders;
import org.openapitools.client.model.ListWalletTransactionsRIValue;

/**
 * ListWalletTransactionsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-22T11:18:03.645227Z[Etc/UTC]")
public class ListWalletTransactionsRI {
  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private ListWalletTransactionsRIFee fee;

  public static final String SERIALIZED_NAME_FUNGIBLE_TOKENS = "fungibleTokens";
  @SerializedName(SERIALIZED_NAME_FUNGIBLE_TOKENS)
  private List<ListWalletTransactionsRIFungibleTokens> fungibleTokens = null;

  public static final String SERIALIZED_NAME_INTERNAL_TRANSACTIONS = "internalTransactions";
  @SerializedName(SERIALIZED_NAME_INTERNAL_TRANSACTIONS)
  private List<ListWalletTransactionsRIInternalTransactions> internalTransactions = null;

  public static final String SERIALIZED_NAME_NON_FUNGIBLE_TOKENS = "nonFungibleTokens";
  @SerializedName(SERIALIZED_NAME_NON_FUNGIBLE_TOKENS)
  private List<ListWalletTransactionsRINonFungibleTokens> nonFungibleTokens = null;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<ListWalletTransactionsRIRecipients> recipients = new ArrayList<ListWalletTransactionsRIRecipients>();

  public static final String SERIALIZED_NAME_SENDERS = "senders";
  @SerializedName(SERIALIZED_NAME_SENDERS)
  private List<ListWalletTransactionsRISenders> senders = new ArrayList<ListWalletTransactionsRISenders>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private ListWalletTransactionsRIValue value;

  public ListWalletTransactionsRI() { 
  }

  public ListWalletTransactionsRI direction(String direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Defines the direction of the transaction, e.g. incoming.
   * @return direction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "incoming", required = true, value = "Defines the direction of the transaction, e.g. incoming.")

  public String getDirection() {
    return direction;
  }


  public void setDirection(String direction) {
    this.direction = direction;
  }


  public ListWalletTransactionsRI fee(ListWalletTransactionsRIFee fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListWalletTransactionsRIFee getFee() {
    return fee;
  }


  public void setFee(ListWalletTransactionsRIFee fee) {
    this.fee = fee;
  }


  public ListWalletTransactionsRI fungibleTokens(List<ListWalletTransactionsRIFungibleTokens> fungibleTokens) {
    
    this.fungibleTokens = fungibleTokens;
    return this;
  }

  public ListWalletTransactionsRI addFungibleTokensItem(ListWalletTransactionsRIFungibleTokens fungibleTokensItem) {
    if (this.fungibleTokens == null) {
      this.fungibleTokens = new ArrayList<ListWalletTransactionsRIFungibleTokens>();
    }
    this.fungibleTokens.add(fungibleTokensItem);
    return this;
  }

   /**
   * Represents fungible tokens&#39;es detailed information
   * @return fungibleTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents fungible tokens'es detailed information")

  public List<ListWalletTransactionsRIFungibleTokens> getFungibleTokens() {
    return fungibleTokens;
  }


  public void setFungibleTokens(List<ListWalletTransactionsRIFungibleTokens> fungibleTokens) {
    this.fungibleTokens = fungibleTokens;
  }


  public ListWalletTransactionsRI internalTransactions(List<ListWalletTransactionsRIInternalTransactions> internalTransactions) {
    
    this.internalTransactions = internalTransactions;
    return this;
  }

  public ListWalletTransactionsRI addInternalTransactionsItem(ListWalletTransactionsRIInternalTransactions internalTransactionsItem) {
    if (this.internalTransactions == null) {
      this.internalTransactions = new ArrayList<ListWalletTransactionsRIInternalTransactions>();
    }
    this.internalTransactions.add(internalTransactionsItem);
    return this;
  }

   /**
   * Get internalTransactions
   * @return internalTransactions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ListWalletTransactionsRIInternalTransactions> getInternalTransactions() {
    return internalTransactions;
  }


  public void setInternalTransactions(List<ListWalletTransactionsRIInternalTransactions> internalTransactions) {
    this.internalTransactions = internalTransactions;
  }


  public ListWalletTransactionsRI nonFungibleTokens(List<ListWalletTransactionsRINonFungibleTokens> nonFungibleTokens) {
    
    this.nonFungibleTokens = nonFungibleTokens;
    return this;
  }

  public ListWalletTransactionsRI addNonFungibleTokensItem(ListWalletTransactionsRINonFungibleTokens nonFungibleTokensItem) {
    if (this.nonFungibleTokens == null) {
      this.nonFungibleTokens = new ArrayList<ListWalletTransactionsRINonFungibleTokens>();
    }
    this.nonFungibleTokens.add(nonFungibleTokensItem);
    return this;
  }

   /**
   * Represents non-fungible tokens&#39;es detailed information.
   * @return nonFungibleTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents non-fungible tokens'es detailed information.")

  public List<ListWalletTransactionsRINonFungibleTokens> getNonFungibleTokens() {
    return nonFungibleTokens;
  }


  public void setNonFungibleTokens(List<ListWalletTransactionsRINonFungibleTokens> nonFungibleTokens) {
    this.nonFungibleTokens = nonFungibleTokens;
  }


  public ListWalletTransactionsRI recipients(List<ListWalletTransactionsRIRecipients> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public ListWalletTransactionsRI addRecipientsItem(ListWalletTransactionsRIRecipients recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
   * @return recipients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")

  public List<ListWalletTransactionsRIRecipients> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<ListWalletTransactionsRIRecipients> recipients) {
    this.recipients = recipients;
  }


  public ListWalletTransactionsRI senders(List<ListWalletTransactionsRISenders> senders) {
    
    this.senders = senders;
    return this;
  }

  public ListWalletTransactionsRI addSendersItem(ListWalletTransactionsRISenders sendersItem) {
    this.senders.add(sendersItem);
    return this;
  }

   /**
   * Represents a list of sender addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
   * @return senders
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents a list of sender addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")

  public List<ListWalletTransactionsRISenders> getSenders() {
    return senders;
  }


  public void setSenders(List<ListWalletTransactionsRISenders> senders) {
    this.senders = senders;
  }


  public ListWalletTransactionsRI status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Defines the status of the transaction, if it is confirmed or unconfirmed.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "confirmed", required = true, value = "Defines the status of the transaction, if it is confirmed or unconfirmed.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ListWalletTransactionsRI timestamp(Integer timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1622466746", required = true, value = "Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.")

  public Integer getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }


  public ListWalletTransactionsRI transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Represents the unique TD of the transaction.
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "b3ddf04d74e5bd57f3ccb5375db6f39d228ed98cfa1ae9bf959b9406fc975f01", required = true, value = "Represents the unique TD of the transaction.")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public ListWalletTransactionsRI value(ListWalletTransactionsRIValue value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ListWalletTransactionsRIValue getValue() {
    return value;
  }


  public void setValue(ListWalletTransactionsRIValue value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListWalletTransactionsRI listWalletTransactionsRI = (ListWalletTransactionsRI) o;
    return Objects.equals(this.direction, listWalletTransactionsRI.direction) &&
        Objects.equals(this.fee, listWalletTransactionsRI.fee) &&
        Objects.equals(this.fungibleTokens, listWalletTransactionsRI.fungibleTokens) &&
        Objects.equals(this.internalTransactions, listWalletTransactionsRI.internalTransactions) &&
        Objects.equals(this.nonFungibleTokens, listWalletTransactionsRI.nonFungibleTokens) &&
        Objects.equals(this.recipients, listWalletTransactionsRI.recipients) &&
        Objects.equals(this.senders, listWalletTransactionsRI.senders) &&
        Objects.equals(this.status, listWalletTransactionsRI.status) &&
        Objects.equals(this.timestamp, listWalletTransactionsRI.timestamp) &&
        Objects.equals(this.transactionId, listWalletTransactionsRI.transactionId) &&
        Objects.equals(this.value, listWalletTransactionsRI.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, fee, fungibleTokens, internalTransactions, nonFungibleTokens, recipients, senders, status, timestamp, transactionId, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListWalletTransactionsRI {\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    fungibleTokens: ").append(toIndentedString(fungibleTokens)).append("\n");
    sb.append("    internalTransactions: ").append(toIndentedString(internalTransactions)).append("\n");
    sb.append("    nonFungibleTokens: ").append(toIndentedString(nonFungibleTokens)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    senders: ").append(toIndentedString(senders)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

