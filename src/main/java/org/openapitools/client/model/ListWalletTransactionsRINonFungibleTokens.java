/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ListWalletTransactionsRINonFungibleTokens
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-22T11:18:03.645227Z[Etc/UTC]")
public class ListWalletTransactionsRINonFungibleTokens {
  public static final String SERIALIZED_NAME_CONVERTED_AMOUNT = "convertedAmount";
  @SerializedName(SERIALIZED_NAME_CONVERTED_AMOUNT)
  private String convertedAmount;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE_UNIT = "exchangeRateUnit";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE_UNIT)
  private String exchangeRateUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TOKEN_ID = "tokenId";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ListWalletTransactionsRINonFungibleTokens() { 
  }

  public ListWalletTransactionsRINonFungibleTokens convertedAmount(String convertedAmount) {
    
    this.convertedAmount = convertedAmount;
    return this;
  }

   /**
   * Defines the tokens&#39; converted amount value.
   * @return convertedAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.034", required = true, value = "Defines the tokens' converted amount value.")

  public String getConvertedAmount() {
    return convertedAmount;
  }


  public void setConvertedAmount(String convertedAmount) {
    this.convertedAmount = convertedAmount;
  }


  public ListWalletTransactionsRINonFungibleTokens exchangeRateUnit(String exchangeRateUnit) {
    
    this.exchangeRateUnit = exchangeRateUnit;
    return this;
  }

   /**
   * Represents token&#39;s exchange rate unit.
   * @return exchangeRateUnit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "Represents token's exchange rate unit.")

  public String getExchangeRateUnit() {
    return exchangeRateUnit;
  }


  public void setExchangeRateUnit(String exchangeRateUnit) {
    this.exchangeRateUnit = exchangeRateUnit;
  }


  public ListWalletTransactionsRINonFungibleTokens name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Defines the token&#39;s name as a string.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Axie Infinity", required = true, value = "Defines the token's name as a string.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ListWalletTransactionsRINonFungibleTokens recipient(String recipient) {
    
    this.recipient = recipient;
    return this;
  }

   /**
   * Defines the address to which the recipient receives the transferred tokens.
   * @return recipient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0xdac17f958d2ee523a2206206994597c13d831ec7", required = true, value = "Defines the address to which the recipient receives the transferred tokens.")

  public String getRecipient() {
    return recipient;
  }


  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public ListWalletTransactionsRINonFungibleTokens sender(String sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Defines the address from which the sender transfers tokens.
   * @return sender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x65b895f400dae5541d70cbbec07527210158f6e2", required = true, value = "Defines the address from which the sender transfers tokens.")

  public String getSender() {
    return sender;
  }


  public void setSender(String sender) {
    this.sender = sender;
  }


  public ListWalletTransactionsRINonFungibleTokens symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Defines the symbol of the non-fungible tokens.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AXS", required = true, value = "Defines the symbol of the non-fungible tokens.")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public ListWalletTransactionsRINonFungibleTokens tokenId(String tokenId) {
    
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Represents tokens&#39; unique identifier.
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "13383", required = true, value = "Represents tokens' unique identifier.")

  public String getTokenId() {
    return tokenId;
  }


  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public ListWalletTransactionsRINonFungibleTokens type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines the specific token type.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ERC-721", required = true, value = "Defines the specific token type.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListWalletTransactionsRINonFungibleTokens listWalletTransactionsRINonFungibleTokens = (ListWalletTransactionsRINonFungibleTokens) o;
    return Objects.equals(this.convertedAmount, listWalletTransactionsRINonFungibleTokens.convertedAmount) &&
        Objects.equals(this.exchangeRateUnit, listWalletTransactionsRINonFungibleTokens.exchangeRateUnit) &&
        Objects.equals(this.name, listWalletTransactionsRINonFungibleTokens.name) &&
        Objects.equals(this.recipient, listWalletTransactionsRINonFungibleTokens.recipient) &&
        Objects.equals(this.sender, listWalletTransactionsRINonFungibleTokens.sender) &&
        Objects.equals(this.symbol, listWalletTransactionsRINonFungibleTokens.symbol) &&
        Objects.equals(this.tokenId, listWalletTransactionsRINonFungibleTokens.tokenId) &&
        Objects.equals(this.type, listWalletTransactionsRINonFungibleTokens.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convertedAmount, exchangeRateUnit, name, recipient, sender, symbol, tokenId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListWalletTransactionsRINonFungibleTokens {\n");
    sb.append("    convertedAmount: ").append(toIndentedString(convertedAmount)).append("\n");
    sb.append("    exchangeRateUnit: ").append(toIndentedString(exchangeRateUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

