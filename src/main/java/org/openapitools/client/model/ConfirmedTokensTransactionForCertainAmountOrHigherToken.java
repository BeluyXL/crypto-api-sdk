/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ConfirmedTokensTransactionForCertainAmountOrHigherBep20;
import org.openapitools.client.model.ConfirmedTokensTransactionForCertainAmountOrHigherErc20;
import org.openapitools.client.model.ConfirmedTokensTransactionForCertainAmountOrHigherErc721;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class ConfirmedTokensTransactionForCertainAmountOrHigherToken extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ConfirmedTokensTransactionForCertainAmountOrHigherToken.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ConfirmedTokensTransactionForCertainAmountOrHigherToken.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ConfirmedTokensTransactionForCertainAmountOrHigherToken' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ConfirmedTokensTransactionForCertainAmountOrHigherBep20> adapterConfirmedTokensTransactionForCertainAmountOrHigherBep20 = gson.getDelegateAdapter(this, TypeToken.get(ConfirmedTokensTransactionForCertainAmountOrHigherBep20.class));
            final TypeAdapter<ConfirmedTokensTransactionForCertainAmountOrHigherErc20> adapterConfirmedTokensTransactionForCertainAmountOrHigherErc20 = gson.getDelegateAdapter(this, TypeToken.get(ConfirmedTokensTransactionForCertainAmountOrHigherErc20.class));
            final TypeAdapter<ConfirmedTokensTransactionForCertainAmountOrHigherErc721> adapterConfirmedTokensTransactionForCertainAmountOrHigherErc721 = gson.getDelegateAdapter(this, TypeToken.get(ConfirmedTokensTransactionForCertainAmountOrHigherErc721.class));

            return (TypeAdapter<T>) new TypeAdapter<ConfirmedTokensTransactionForCertainAmountOrHigherToken>() {
                @Override
                public void write(JsonWriter out, ConfirmedTokensTransactionForCertainAmountOrHigherToken value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ConfirmedTokensTransactionForCertainAmountOrHigherBep20`
                    if (value.getActualInstance() instanceof ConfirmedTokensTransactionForCertainAmountOrHigherBep20) {
                        JsonObject obj = adapterConfirmedTokensTransactionForCertainAmountOrHigherBep20.toJsonTree((ConfirmedTokensTransactionForCertainAmountOrHigherBep20)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ConfirmedTokensTransactionForCertainAmountOrHigherErc20`
                    if (value.getActualInstance() instanceof ConfirmedTokensTransactionForCertainAmountOrHigherErc20) {
                        JsonObject obj = adapterConfirmedTokensTransactionForCertainAmountOrHigherErc20.toJsonTree((ConfirmedTokensTransactionForCertainAmountOrHigherErc20)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ConfirmedTokensTransactionForCertainAmountOrHigherErc721`
                    if (value.getActualInstance() instanceof ConfirmedTokensTransactionForCertainAmountOrHigherErc721) {
                        JsonObject obj = adapterConfirmedTokensTransactionForCertainAmountOrHigherErc721.toJsonTree((ConfirmedTokensTransactionForCertainAmountOrHigherErc721)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721");
                }

                @Override
                public ConfirmedTokensTransactionForCertainAmountOrHigherToken read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ConfirmedTokensTransactionForCertainAmountOrHigherBep20
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConfirmedTokensTransactionForCertainAmountOrHigherBep20.validateJsonObject(jsonObject);
                        actualAdapter = adapterConfirmedTokensTransactionForCertainAmountOrHigherBep20;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConfirmedTokensTransactionForCertainAmountOrHigherBep20'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConfirmedTokensTransactionForCertainAmountOrHigherBep20 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConfirmedTokensTransactionForCertainAmountOrHigherBep20'", e);
                    }

                    // deserialize ConfirmedTokensTransactionForCertainAmountOrHigherErc20
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConfirmedTokensTransactionForCertainAmountOrHigherErc20.validateJsonObject(jsonObject);
                        actualAdapter = adapterConfirmedTokensTransactionForCertainAmountOrHigherErc20;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConfirmedTokensTransactionForCertainAmountOrHigherErc20'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConfirmedTokensTransactionForCertainAmountOrHigherErc20 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConfirmedTokensTransactionForCertainAmountOrHigherErc20'", e);
                    }

                    // deserialize ConfirmedTokensTransactionForCertainAmountOrHigherErc721
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConfirmedTokensTransactionForCertainAmountOrHigherErc721.validateJsonObject(jsonObject);
                        actualAdapter = adapterConfirmedTokensTransactionForCertainAmountOrHigherErc721;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConfirmedTokensTransactionForCertainAmountOrHigherErc721'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConfirmedTokensTransactionForCertainAmountOrHigherErc721 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConfirmedTokensTransactionForCertainAmountOrHigherErc721'", e);
                    }

                    if (match == 1) {
                        ConfirmedTokensTransactionForCertainAmountOrHigherToken ret = new ConfirmedTokensTransactionForCertainAmountOrHigherToken();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ConfirmedTokensTransactionForCertainAmountOrHigherToken: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ConfirmedTokensTransactionForCertainAmountOrHigherToken() {
        super("oneOf", Boolean.FALSE);
    }

    public ConfirmedTokensTransactionForCertainAmountOrHigherToken(ConfirmedTokensTransactionForCertainAmountOrHigherBep20 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ConfirmedTokensTransactionForCertainAmountOrHigherToken(ConfirmedTokensTransactionForCertainAmountOrHigherErc20 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ConfirmedTokensTransactionForCertainAmountOrHigherToken(ConfirmedTokensTransactionForCertainAmountOrHigherErc721 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ConfirmedTokensTransactionForCertainAmountOrHigherBep20", new GenericType<ConfirmedTokensTransactionForCertainAmountOrHigherBep20>() {
        });
        schemas.put("ConfirmedTokensTransactionForCertainAmountOrHigherErc20", new GenericType<ConfirmedTokensTransactionForCertainAmountOrHigherErc20>() {
        });
        schemas.put("ConfirmedTokensTransactionForCertainAmountOrHigherErc721", new GenericType<ConfirmedTokensTransactionForCertainAmountOrHigherErc721>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ConfirmedTokensTransactionForCertainAmountOrHigherToken.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ConfirmedTokensTransactionForCertainAmountOrHigherBep20) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConfirmedTokensTransactionForCertainAmountOrHigherErc20) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConfirmedTokensTransactionForCertainAmountOrHigherErc721) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721");
    }

    /**
     * Get the actual instance, which can be the following:
     * ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721
     *
     * @return The actual instance (ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConfirmedTokensTransactionForCertainAmountOrHigherBep20`. If the actual instance is not `ConfirmedTokensTransactionForCertainAmountOrHigherBep20`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConfirmedTokensTransactionForCertainAmountOrHigherBep20`
     * @throws ClassCastException if the instance is not `ConfirmedTokensTransactionForCertainAmountOrHigherBep20`
     */
    public ConfirmedTokensTransactionForCertainAmountOrHigherBep20 getConfirmedTokensTransactionForCertainAmountOrHigherBep20() throws ClassCastException {
        return (ConfirmedTokensTransactionForCertainAmountOrHigherBep20)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConfirmedTokensTransactionForCertainAmountOrHigherErc20`. If the actual instance is not `ConfirmedTokensTransactionForCertainAmountOrHigherErc20`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConfirmedTokensTransactionForCertainAmountOrHigherErc20`
     * @throws ClassCastException if the instance is not `ConfirmedTokensTransactionForCertainAmountOrHigherErc20`
     */
    public ConfirmedTokensTransactionForCertainAmountOrHigherErc20 getConfirmedTokensTransactionForCertainAmountOrHigherErc20() throws ClassCastException {
        return (ConfirmedTokensTransactionForCertainAmountOrHigherErc20)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConfirmedTokensTransactionForCertainAmountOrHigherErc721`. If the actual instance is not `ConfirmedTokensTransactionForCertainAmountOrHigherErc721`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConfirmedTokensTransactionForCertainAmountOrHigherErc721`
     * @throws ClassCastException if the instance is not `ConfirmedTokensTransactionForCertainAmountOrHigherErc721`
     */
    public ConfirmedTokensTransactionForCertainAmountOrHigherErc721 getConfirmedTokensTransactionForCertainAmountOrHigherErc721() throws ClassCastException {
        return (ConfirmedTokensTransactionForCertainAmountOrHigherErc721)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfirmedTokensTransactionForCertainAmountOrHigherToken
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ConfirmedTokensTransactionForCertainAmountOrHigherBep20
    try {
      ConfirmedTokensTransactionForCertainAmountOrHigherBep20.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ConfirmedTokensTransactionForCertainAmountOrHigherBep20 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ConfirmedTokensTransactionForCertainAmountOrHigherErc20
    try {
      ConfirmedTokensTransactionForCertainAmountOrHigherErc20.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ConfirmedTokensTransactionForCertainAmountOrHigherErc20 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ConfirmedTokensTransactionForCertainAmountOrHigherErc721
    try {
      ConfirmedTokensTransactionForCertainAmountOrHigherErc721.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ConfirmedTokensTransactionForCertainAmountOrHigherErc721 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ConfirmedTokensTransactionForCertainAmountOrHigherToken with oneOf schemas: ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ConfirmedTokensTransactionForCertainAmountOrHigherToken given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfirmedTokensTransactionForCertainAmountOrHigherToken
  * @throws IOException if the JSON string is invalid with respect to ConfirmedTokensTransactionForCertainAmountOrHigherToken
  */
  public static ConfirmedTokensTransactionForCertainAmountOrHigherToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfirmedTokensTransactionForCertainAmountOrHigherToken.class);
  }

 /**
  * Convert an instance of ConfirmedTokensTransactionForCertainAmountOrHigherToken to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

