/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSB;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSBC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSBSC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSD;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSD2;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSE;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSEC;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSL;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSZ;
import org.openapitools.client.model.GetBlockDetailsByBlockHashRIBSZ2;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class GetBlockDetailsByBlockHashRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetBlockDetailsByBlockHashRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetBlockDetailsByBlockHashRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetBlockDetailsByBlockHashRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSB> adapterGetBlockDetailsByBlockHashRIBSB = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSB.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSBC> adapterGetBlockDetailsByBlockHashRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSBC.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSBSC> adapterGetBlockDetailsByBlockHashRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSBSC.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSD> adapterGetBlockDetailsByBlockHashRIBSD = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSD.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSD2> adapterGetBlockDetailsByBlockHashRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSD2.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSE> adapterGetBlockDetailsByBlockHashRIBSE = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSE.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSEC> adapterGetBlockDetailsByBlockHashRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSEC.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSL> adapterGetBlockDetailsByBlockHashRIBSL = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSL.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSZ> adapterGetBlockDetailsByBlockHashRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSZ.class));
            final TypeAdapter<GetBlockDetailsByBlockHashRIBSZ2> adapterGetBlockDetailsByBlockHashRIBSZ2 = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHashRIBSZ2.class));

            return (TypeAdapter<T>) new TypeAdapter<GetBlockDetailsByBlockHashRIBS>() {
                @Override
                public void write(JsonWriter out, GetBlockDetailsByBlockHashRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSB`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSB) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSB.toJsonTree((GetBlockDetailsByBlockHashRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSBC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSBC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSBC.toJsonTree((GetBlockDetailsByBlockHashRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSBSC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSBSC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSBSC.toJsonTree((GetBlockDetailsByBlockHashRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSD`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSD) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSD.toJsonTree((GetBlockDetailsByBlockHashRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSD2`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSD2) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSD2.toJsonTree((GetBlockDetailsByBlockHashRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSE`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSE) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSE.toJsonTree((GetBlockDetailsByBlockHashRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSEC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSEC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSEC.toJsonTree((GetBlockDetailsByBlockHashRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSL`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSL) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSL.toJsonTree((GetBlockDetailsByBlockHashRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSZ`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSZ) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSZ.toJsonTree((GetBlockDetailsByBlockHashRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHashRIBSZ2`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHashRIBSZ2) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHashRIBSZ2.toJsonTree((GetBlockDetailsByBlockHashRIBSZ2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ, GetBlockDetailsByBlockHashRIBSZ2");
                }

                @Override
                public GetBlockDetailsByBlockHashRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GetBlockDetailsByBlockHashRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSB'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSBC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSBC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSBSC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSBSC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSD'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSD2'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSE'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSEC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSEC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSL'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSZ'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHashRIBSZ2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHashRIBSZ2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHashRIBSZ2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHashRIBSZ2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSZ2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHashRIBSZ2'", e);
                    }

                    if (match == 1) {
                        GetBlockDetailsByBlockHashRIBS ret = new GetBlockDetailsByBlockHashRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetBlockDetailsByBlockHashRIBS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetBlockDetailsByBlockHashRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHashRIBS(GetBlockDetailsByBlockHashRIBSZ2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GetBlockDetailsByBlockHashRIBSB", new GenericType<GetBlockDetailsByBlockHashRIBSB>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSBC", new GenericType<GetBlockDetailsByBlockHashRIBSBC>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSBSC", new GenericType<GetBlockDetailsByBlockHashRIBSBSC>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSD", new GenericType<GetBlockDetailsByBlockHashRIBSD>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSD2", new GenericType<GetBlockDetailsByBlockHashRIBSD2>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSE", new GenericType<GetBlockDetailsByBlockHashRIBSE>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSEC", new GenericType<GetBlockDetailsByBlockHashRIBSEC>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSL", new GenericType<GetBlockDetailsByBlockHashRIBSL>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSZ", new GenericType<GetBlockDetailsByBlockHashRIBSZ>() {
        });
        schemas.put("GetBlockDetailsByBlockHashRIBSZ2", new GenericType<GetBlockDetailsByBlockHashRIBSZ2>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetBlockDetailsByBlockHashRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ, GetBlockDetailsByBlockHashRIBSZ2
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GetBlockDetailsByBlockHashRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHashRIBSZ2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ, GetBlockDetailsByBlockHashRIBSZ2");
    }

    /**
     * Get the actual instance, which can be the following:
     * GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ, GetBlockDetailsByBlockHashRIBSZ2
     *
     * @return The actual instance (GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ, GetBlockDetailsByBlockHashRIBSZ2)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSB`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSB`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSB`
     */
    public GetBlockDetailsByBlockHashRIBSB getGetBlockDetailsByBlockHashRIBSB() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSBC`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSBC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSBC`
     */
    public GetBlockDetailsByBlockHashRIBSBC getGetBlockDetailsByBlockHashRIBSBC() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSBSC`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSBSC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSBSC`
     */
    public GetBlockDetailsByBlockHashRIBSBSC getGetBlockDetailsByBlockHashRIBSBSC() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSD`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSD`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSD`
     */
    public GetBlockDetailsByBlockHashRIBSD getGetBlockDetailsByBlockHashRIBSD() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSD2`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSD2`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSD2`
     */
    public GetBlockDetailsByBlockHashRIBSD2 getGetBlockDetailsByBlockHashRIBSD2() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSE`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSE`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSE`
     */
    public GetBlockDetailsByBlockHashRIBSE getGetBlockDetailsByBlockHashRIBSE() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSEC`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSEC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSEC`
     */
    public GetBlockDetailsByBlockHashRIBSEC getGetBlockDetailsByBlockHashRIBSEC() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSL`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSL`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSL`
     */
    public GetBlockDetailsByBlockHashRIBSL getGetBlockDetailsByBlockHashRIBSL() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSZ`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSZ`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSZ`
     */
    public GetBlockDetailsByBlockHashRIBSZ getGetBlockDetailsByBlockHashRIBSZ() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSZ)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHashRIBSZ2`. If the actual instance is not `GetBlockDetailsByBlockHashRIBSZ2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHashRIBSZ2`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHashRIBSZ2`
     */
    public GetBlockDetailsByBlockHashRIBSZ2 getGetBlockDetailsByBlockHashRIBSZ2() throws ClassCastException {
        return (GetBlockDetailsByBlockHashRIBSZ2)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetBlockDetailsByBlockHashRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with GetBlockDetailsByBlockHashRIBSB
    try {
      GetBlockDetailsByBlockHashRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSBC
    try {
      GetBlockDetailsByBlockHashRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSBC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSBSC
    try {
      GetBlockDetailsByBlockHashRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSBSC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSD
    try {
      GetBlockDetailsByBlockHashRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSD2
    try {
      GetBlockDetailsByBlockHashRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSE
    try {
      GetBlockDetailsByBlockHashRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSE failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSEC
    try {
      GetBlockDetailsByBlockHashRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSEC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSL
    try {
      GetBlockDetailsByBlockHashRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSZ
    try {
      GetBlockDetailsByBlockHashRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHashRIBSZ2
    try {
      GetBlockDetailsByBlockHashRIBSZ2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHashRIBSZ2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetBlockDetailsByBlockHashRIBS with oneOf schemas: GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ, GetBlockDetailsByBlockHashRIBSZ2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetBlockDetailsByBlockHashRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetBlockDetailsByBlockHashRIBS
  * @throws IOException if the JSON string is invalid with respect to GetBlockDetailsByBlockHashRIBS
  */
  public static GetBlockDetailsByBlockHashRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockDetailsByBlockHashRIBS.class);
  }

 /**
  * Convert an instance of GetBlockDetailsByBlockHashRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

