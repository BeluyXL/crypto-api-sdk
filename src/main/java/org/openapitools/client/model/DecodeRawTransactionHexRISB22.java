/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * Binance Smart Chain
 */
@ApiModel(description = "Binance Smart Chain")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class DecodeRawTransactionHexRISB22 {
  public static final String SERIALIZED_NAME_APPROXIMATE_FEE = "approximateFee";
  @SerializedName(SERIALIZED_NAME_APPROXIMATE_FEE)
  private String approximateFee;

  public static final String SERIALIZED_NAME_APPROXIMATE_MINIMUM_REQUIRED_FEE = "approximateMinimumRequiredFee";
  @SerializedName(SERIALIZED_NAME_APPROXIMATE_MINIMUM_REQUIRED_FEE)
  private String approximateMinimumRequiredFee;

  public static final String SERIALIZED_NAME_GAS_LIMIT = "gasLimit";
  @SerializedName(SERIALIZED_NAME_GAS_LIMIT)
  private String gasLimit;

  public static final String SERIALIZED_NAME_GAS_PAID_FOR_DATA = "gasPaidForData";
  @SerializedName(SERIALIZED_NAME_GAS_PAID_FOR_DATA)
  private String gasPaidForData;

  public static final String SERIALIZED_NAME_GAS_PRICE = "gasPrice";
  @SerializedName(SERIALIZED_NAME_GAS_PRICE)
  private String gasPrice;

  public static final String SERIALIZED_NAME_INPUT_DATA = "inputData";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA)
  private String inputData;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private Integer nonce;

  public static final String SERIALIZED_NAME_R = "r";
  @SerializedName(SERIALIZED_NAME_R)
  private String r;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_S = "s";
  @SerializedName(SERIALIZED_NAME_S)
  private String s;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_V = "v";
  @SerializedName(SERIALIZED_NAME_V)
  private String v;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public DecodeRawTransactionHexRISB22() { 
  }

  public DecodeRawTransactionHexRISB22 approximateFee(String approximateFee) {
    
    this.approximateFee = approximateFee;
    return this;
  }

   /**
   * Defines the approximate fee value. When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.
   * @return approximateFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.00016932", value = "Defines the approximate fee value. When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.")

  public String getApproximateFee() {
    return approximateFee;
  }


  public void setApproximateFee(String approximateFee) {
    this.approximateFee = approximateFee;
  }


  public DecodeRawTransactionHexRISB22 approximateMinimumRequiredFee(String approximateMinimumRequiredFee) {
    
    this.approximateMinimumRequiredFee = approximateMinimumRequiredFee;
    return this;
  }

   /**
   * Defines the approximate minimum fee that is required for the transaction.
   * @return approximateMinimumRequiredFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.000021", value = "Defines the approximate minimum fee that is required for the transaction.")

  public String getApproximateMinimumRequiredFee() {
    return approximateMinimumRequiredFee;
  }


  public void setApproximateMinimumRequiredFee(String approximateMinimumRequiredFee) {
    this.approximateMinimumRequiredFee = approximateMinimumRequiredFee;
  }


  public DecodeRawTransactionHexRISB22 gasLimit(String gasLimit) {
    
    this.gasLimit = gasLimit;
    return this;
  }

   /**
   * Represents the amount of gas used by this specific transaction alone.
   * @return gasLimit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "552020", required = true, value = "Represents the amount of gas used by this specific transaction alone.")

  public String getGasLimit() {
    return gasLimit;
  }


  public void setGasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
  }


  public DecodeRawTransactionHexRISB22 gasPaidForData(String gasPaidForData) {
    
    this.gasPaidForData = gasPaidForData;
    return this;
  }

   /**
   * Represents the amount of gas paid for the data in the transaction.
   * @return gasPaidForData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Represents the amount of gas paid for the data in the transaction.")

  public String getGasPaidForData() {
    return gasPaidForData;
  }


  public void setGasPaidForData(String gasPaidForData) {
    this.gasPaidForData = gasPaidForData;
  }


  public DecodeRawTransactionHexRISB22 gasPrice(String gasPrice) {
    
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * Represents the price offered to the miner to purchase this amount of gas.
   * @return gasPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2994782927", value = "Represents the price offered to the miner to purchase this amount of gas.")

  public String getGasPrice() {
    return gasPrice;
  }


  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }


  public DecodeRawTransactionHexRISB22 inputData(String inputData) {
    
    this.inputData = inputData;
    return this;
  }

   /**
   * Represents additional information that is required for the transaction.
   * @return inputData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0x34", value = "Represents additional information that is required for the transaction.")

  public String getInputData() {
    return inputData;
  }


  public void setInputData(String inputData) {
    this.inputData = inputData;
  }


  public DecodeRawTransactionHexRISB22 nonce(Integer nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender&#39;s address.
   * @return nonce
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "16", required = true, value = "Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")

  public Integer getNonce() {
    return nonce;
  }


  public void setNonce(Integer nonce) {
    this.nonce = nonce;
  }


  public DecodeRawTransactionHexRISB22 r(String r) {
    
    this.r = r;
    return this;
  }

   /**
   * Represents output of an ECDSA signature.
   * @return r
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0xc297031972fe2d4926e01e66768d669882ace256f8a8397f757af341f5e7c49", value = "Represents output of an ECDSA signature.")

  public String getR() {
    return r;
  }


  public void setR(String r) {
    this.r = r;
  }


  public DecodeRawTransactionHexRISB22 recipient(String recipient) {
    
    this.recipient = recipient;
    return this;
  }

   /**
   * The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one recipient.
   * @return recipient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x59d9d70DC4717cc9F3c1f7Bf3Fb9B62430872725", required = true, value = "The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one recipient.")

  public String getRecipient() {
    return recipient;
  }


  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public DecodeRawTransactionHexRISB22 s(String s) {
    
    this.s = s;
    return this;
  }

   /**
   * Represents output of an ECDSA signature.
   * @return s
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0x7b717faa31c5edf9332e1cd5fa3f736838a9262834ece621bb3c30671b66ab05", value = "Represents output of an ECDSA signature.")

  public String getS() {
    return s;
  }


  public void setS(String s) {
    this.s = s;
  }


  public DecodeRawTransactionHexRISB22 sender(String sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.
   * @return sender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x4dF189c73C714dd636a99AA4f3317CcD72a05d62", required = true, value = "Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.")

  public String getSender() {
    return sender;
  }


  public void setSender(String sender) {
    this.sender = sender;
  }


  public DecodeRawTransactionHexRISB22 type(Integer type) {
    
    this.type = type;
    return this;
  }

   /**
   * Specifies the transaction type as one from three options: if response returns a &#x60;\&quot;0\&quot;&#x60; it means the raw transaction includes legacy transaction data, if it is &#x60;\&quot;1\&quot;&#x60; - includes access lists for EIP2930, and if it is &#x60;\&quot;2\&quot;&#x60; - EIP1559 data.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Specifies the transaction type as one from three options: if response returns a `\"0\"` it means the raw transaction includes legacy transaction data, if it is `\"1\"` - includes access lists for EIP2930, and if it is `\"2\"` - EIP1559 data.")

  public Integer getType() {
    return type;
  }


  public void setType(Integer type) {
    this.type = type;
  }


  public DecodeRawTransactionHexRISB22 v(String v) {
    
    this.v = v;
    return this;
  }

   /**
   * Defines the the recovery id.
   * @return v
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0x26", value = "Defines the the recovery id.")

  public String getV() {
    return v;
  }


  public void setV(String v) {
    this.v = v;
  }


  public DecodeRawTransactionHexRISB22 value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Represents the sent/received amount.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11.25", value = "Represents the sent/received amount.")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecodeRawTransactionHexRISB22 decodeRawTransactionHexRISB22 = (DecodeRawTransactionHexRISB22) o;
    return Objects.equals(this.approximateFee, decodeRawTransactionHexRISB22.approximateFee) &&
        Objects.equals(this.approximateMinimumRequiredFee, decodeRawTransactionHexRISB22.approximateMinimumRequiredFee) &&
        Objects.equals(this.gasLimit, decodeRawTransactionHexRISB22.gasLimit) &&
        Objects.equals(this.gasPaidForData, decodeRawTransactionHexRISB22.gasPaidForData) &&
        Objects.equals(this.gasPrice, decodeRawTransactionHexRISB22.gasPrice) &&
        Objects.equals(this.inputData, decodeRawTransactionHexRISB22.inputData) &&
        Objects.equals(this.nonce, decodeRawTransactionHexRISB22.nonce) &&
        Objects.equals(this.r, decodeRawTransactionHexRISB22.r) &&
        Objects.equals(this.recipient, decodeRawTransactionHexRISB22.recipient) &&
        Objects.equals(this.s, decodeRawTransactionHexRISB22.s) &&
        Objects.equals(this.sender, decodeRawTransactionHexRISB22.sender) &&
        Objects.equals(this.type, decodeRawTransactionHexRISB22.type) &&
        Objects.equals(this.v, decodeRawTransactionHexRISB22.v) &&
        Objects.equals(this.value, decodeRawTransactionHexRISB22.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approximateFee, approximateMinimumRequiredFee, gasLimit, gasPaidForData, gasPrice, inputData, nonce, r, recipient, s, sender, type, v, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecodeRawTransactionHexRISB22 {\n");
    sb.append("    approximateFee: ").append(toIndentedString(approximateFee)).append("\n");
    sb.append("    approximateMinimumRequiredFee: ").append(toIndentedString(approximateMinimumRequiredFee)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    gasPaidForData: ").append(toIndentedString(gasPaidForData)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    inputData: ").append(toIndentedString(inputData)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    r: ").append(toIndentedString(r)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    s: ").append(toIndentedString(s)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    v: ").append(toIndentedString(v)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approximateFee");
    openapiFields.add("approximateMinimumRequiredFee");
    openapiFields.add("gasLimit");
    openapiFields.add("gasPaidForData");
    openapiFields.add("gasPrice");
    openapiFields.add("inputData");
    openapiFields.add("nonce");
    openapiFields.add("r");
    openapiFields.add("recipient");
    openapiFields.add("s");
    openapiFields.add("sender");
    openapiFields.add("type");
    openapiFields.add("v");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gasLimit");
    openapiRequiredFields.add("nonce");
    openapiRequiredFields.add("recipient");
    openapiRequiredFields.add("sender");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DecodeRawTransactionHexRISB22
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DecodeRawTransactionHexRISB22.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DecodeRawTransactionHexRISB22 is not found in the empty JSON string", DecodeRawTransactionHexRISB22.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DecodeRawTransactionHexRISB22.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DecodeRawTransactionHexRISB22` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DecodeRawTransactionHexRISB22.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("approximateFee") != null && !jsonObj.get("approximateFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approximateFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approximateFee").toString()));
      }
      if (jsonObj.get("approximateMinimumRequiredFee") != null && !jsonObj.get("approximateMinimumRequiredFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approximateMinimumRequiredFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approximateMinimumRequiredFee").toString()));
      }
      if (jsonObj.get("gasLimit") != null && !jsonObj.get("gasLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gasLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gasLimit").toString()));
      }
      if (jsonObj.get("gasPaidForData") != null && !jsonObj.get("gasPaidForData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gasPaidForData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gasPaidForData").toString()));
      }
      if (jsonObj.get("gasPrice") != null && !jsonObj.get("gasPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gasPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gasPrice").toString()));
      }
      if (jsonObj.get("inputData") != null && !jsonObj.get("inputData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputData").toString()));
      }
      if (jsonObj.get("r") != null && !jsonObj.get("r").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `r` to be a primitive type in the JSON string but got `%s`", jsonObj.get("r").toString()));
      }
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if (jsonObj.get("s") != null && !jsonObj.get("s").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s").toString()));
      }
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if (jsonObj.get("v") != null && !jsonObj.get("v").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v").toString()));
      }
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DecodeRawTransactionHexRISB22.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DecodeRawTransactionHexRISB22' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DecodeRawTransactionHexRISB22> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DecodeRawTransactionHexRISB22.class));

       return (TypeAdapter<T>) new TypeAdapter<DecodeRawTransactionHexRISB22>() {
           @Override
           public void write(JsonWriter out, DecodeRawTransactionHexRISB22 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DecodeRawTransactionHexRISB22 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DecodeRawTransactionHexRISB22 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DecodeRawTransactionHexRISB22
  * @throws IOException if the JSON string is invalid with respect to DecodeRawTransactionHexRISB22
  */
  public static DecodeRawTransactionHexRISB22 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecodeRawTransactionHexRISB22.class);
  }

 /**
  * Convert an instance of DecodeRawTransactionHexRISB22 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

