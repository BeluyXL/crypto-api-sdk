/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalCoins;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalFees;

/**
 * XRP
 */
@ApiModel(description = "XRP")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-22T11:18:03.645227Z[Etc/UTC]")
public class GetBlockDetailsByBlockHashFromCallbackRIBSX {
  public static final String SERIALIZED_NAME_TOTAL_COINS = "totalCoins";
  @SerializedName(SERIALIZED_NAME_TOTAL_COINS)
  private GetLatestMinedXRPRippleBlockRITotalCoins totalCoins;

  public static final String SERIALIZED_NAME_TOTAL_FEES = "totalFees";
  @SerializedName(SERIALIZED_NAME_TOTAL_FEES)
  private GetLatestMinedXRPRippleBlockRITotalFees totalFees;

  public GetBlockDetailsByBlockHashFromCallbackRIBSX() { 
  }

  public GetBlockDetailsByBlockHashFromCallbackRIBSX totalCoins(GetLatestMinedXRPRippleBlockRITotalCoins totalCoins) {
    
    this.totalCoins = totalCoins;
    return this;
  }

   /**
   * Get totalCoins
   * @return totalCoins
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetLatestMinedXRPRippleBlockRITotalCoins getTotalCoins() {
    return totalCoins;
  }


  public void setTotalCoins(GetLatestMinedXRPRippleBlockRITotalCoins totalCoins) {
    this.totalCoins = totalCoins;
  }


  public GetBlockDetailsByBlockHashFromCallbackRIBSX totalFees(GetLatestMinedXRPRippleBlockRITotalFees totalFees) {
    
    this.totalFees = totalFees;
    return this;
  }

   /**
   * Get totalFees
   * @return totalFees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetLatestMinedXRPRippleBlockRITotalFees getTotalFees() {
    return totalFees;
  }


  public void setTotalFees(GetLatestMinedXRPRippleBlockRITotalFees totalFees) {
    this.totalFees = totalFees;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlockDetailsByBlockHashFromCallbackRIBSX getBlockDetailsByBlockHashFromCallbackRIBSX = (GetBlockDetailsByBlockHashFromCallbackRIBSX) o;
    return Objects.equals(this.totalCoins, getBlockDetailsByBlockHashFromCallbackRIBSX.totalCoins) &&
        Objects.equals(this.totalFees, getBlockDetailsByBlockHashFromCallbackRIBSX.totalFees);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCoins, totalFees);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlockDetailsByBlockHashFromCallbackRIBSX {\n");
    sb.append("    totalCoins: ").append(toIndentedString(totalCoins)).append("\n");
    sb.append("    totalFees: ").append(toIndentedString(totalFees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

