/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.TokensForwardingSuccessErc20;
import org.openapitools.client.model.TokensForwardingSuccessErc721;
import org.openapitools.client.model.TokensForwardingSuccessOmni;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class TokensForwardingSuccessToken extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TokensForwardingSuccessToken.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TokensForwardingSuccessToken.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TokensForwardingSuccessToken' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TokensForwardingSuccessErc20> adapterTokensForwardingSuccessErc20 = gson.getDelegateAdapter(this, TypeToken.get(TokensForwardingSuccessErc20.class));
            final TypeAdapter<TokensForwardingSuccessErc721> adapterTokensForwardingSuccessErc721 = gson.getDelegateAdapter(this, TypeToken.get(TokensForwardingSuccessErc721.class));
            final TypeAdapter<TokensForwardingSuccessOmni> adapterTokensForwardingSuccessOmni = gson.getDelegateAdapter(this, TypeToken.get(TokensForwardingSuccessOmni.class));

            return (TypeAdapter<T>) new TypeAdapter<TokensForwardingSuccessToken>() {
                @Override
                public void write(JsonWriter out, TokensForwardingSuccessToken value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TokensForwardingSuccessErc20`
                    if (value.getActualInstance() instanceof TokensForwardingSuccessErc20) {
                        JsonObject obj = adapterTokensForwardingSuccessErc20.toJsonTree((TokensForwardingSuccessErc20)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TokensForwardingSuccessErc721`
                    if (value.getActualInstance() instanceof TokensForwardingSuccessErc721) {
                        JsonObject obj = adapterTokensForwardingSuccessErc721.toJsonTree((TokensForwardingSuccessErc721)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TokensForwardingSuccessOmni`
                    if (value.getActualInstance() instanceof TokensForwardingSuccessOmni) {
                        JsonObject obj = adapterTokensForwardingSuccessOmni.toJsonTree((TokensForwardingSuccessOmni)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni");
                }

                @Override
                public TokensForwardingSuccessToken read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TokensForwardingSuccessErc20
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokensForwardingSuccessErc20.validateJsonObject(jsonObject);
                        actualAdapter = adapterTokensForwardingSuccessErc20;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokensForwardingSuccessErc20'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'TokensForwardingSuccessErc20'", e);
                    }

                    // deserialize TokensForwardingSuccessErc721
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokensForwardingSuccessErc721.validateJsonObject(jsonObject);
                        actualAdapter = adapterTokensForwardingSuccessErc721;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokensForwardingSuccessErc721'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'TokensForwardingSuccessErc721'", e);
                    }

                    // deserialize TokensForwardingSuccessOmni
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokensForwardingSuccessOmni.validateJsonObject(jsonObject);
                        actualAdapter = adapterTokensForwardingSuccessOmni;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokensForwardingSuccessOmni'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'TokensForwardingSuccessOmni'", e);
                    }

                    if (match == 1) {
                        TokensForwardingSuccessToken ret = new TokensForwardingSuccessToken();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TokensForwardingSuccessToken: %d classes match result, expected 1. JSON: %s", match, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public TokensForwardingSuccessToken() {
        super("oneOf", Boolean.FALSE);
    }

    public TokensForwardingSuccessToken(TokensForwardingSuccessErc20 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokensForwardingSuccessToken(TokensForwardingSuccessErc721 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokensForwardingSuccessToken(TokensForwardingSuccessOmni o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TokensForwardingSuccessErc20", new GenericType<TokensForwardingSuccessErc20>() {
        });
        schemas.put("TokensForwardingSuccessErc721", new GenericType<TokensForwardingSuccessErc721>() {
        });
        schemas.put("TokensForwardingSuccessOmni", new GenericType<TokensForwardingSuccessOmni>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return TokensForwardingSuccessToken.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TokensForwardingSuccessErc20) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokensForwardingSuccessErc721) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokensForwardingSuccessOmni) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni");
    }

    /**
     * Get the actual instance, which can be the following:
     * TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni
     *
     * @return The actual instance (TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TokensForwardingSuccessErc20`. If the actual instance is not `TokensForwardingSuccessErc20`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokensForwardingSuccessErc20`
     * @throws ClassCastException if the instance is not `TokensForwardingSuccessErc20`
     */
    public TokensForwardingSuccessErc20 getTokensForwardingSuccessErc20() throws ClassCastException {
        return (TokensForwardingSuccessErc20)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TokensForwardingSuccessErc721`. If the actual instance is not `TokensForwardingSuccessErc721`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokensForwardingSuccessErc721`
     * @throws ClassCastException if the instance is not `TokensForwardingSuccessErc721`
     */
    public TokensForwardingSuccessErc721 getTokensForwardingSuccessErc721() throws ClassCastException {
        return (TokensForwardingSuccessErc721)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TokensForwardingSuccessOmni`. If the actual instance is not `TokensForwardingSuccessOmni`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokensForwardingSuccessOmni`
     * @throws ClassCastException if the instance is not `TokensForwardingSuccessOmni`
     */
    public TokensForwardingSuccessOmni getTokensForwardingSuccessOmni() throws ClassCastException {
        return (TokensForwardingSuccessOmni)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TokensForwardingSuccessToken
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    // validate the json string with TokensForwardingSuccessErc20
    try {
      TokensForwardingSuccessErc20.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with TokensForwardingSuccessErc721
    try {
      TokensForwardingSuccessErc721.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with TokensForwardingSuccessOmni
    try {
      TokensForwardingSuccessOmni.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for TokensForwardingSuccessToken with oneOf schemas: TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni. %d class(es) match the result, expected 1. JSON: %s", validCount, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of TokensForwardingSuccessToken given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokensForwardingSuccessToken
  * @throws IOException if the JSON string is invalid with respect to TokensForwardingSuccessToken
  */
  public static TokensForwardingSuccessToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokensForwardingSuccessToken.class);
  }

 /**
  * Convert an instance of TokensForwardingSuccessToken to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

