/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.CreateAutomaticTokensForwardingRITSBOT;
import org.openapitools.client.model.CreateAutomaticTokensForwardingRITSET;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class CreateAutomaticTokensForwardingRITS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateAutomaticTokensForwardingRITS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateAutomaticTokensForwardingRITS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateAutomaticTokensForwardingRITS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateAutomaticTokensForwardingRITSBOT> adapterCreateAutomaticTokensForwardingRITSBOT = gson.getDelegateAdapter(this, TypeToken.get(CreateAutomaticTokensForwardingRITSBOT.class));
            final TypeAdapter<CreateAutomaticTokensForwardingRITSET> adapterCreateAutomaticTokensForwardingRITSET = gson.getDelegateAdapter(this, TypeToken.get(CreateAutomaticTokensForwardingRITSET.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateAutomaticTokensForwardingRITS>() {
                @Override
                public void write(JsonWriter out, CreateAutomaticTokensForwardingRITS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CreateAutomaticTokensForwardingRITSBOT`
                    if (value.getActualInstance() instanceof CreateAutomaticTokensForwardingRITSBOT) {
                        JsonObject obj = adapterCreateAutomaticTokensForwardingRITSBOT.toJsonTree((CreateAutomaticTokensForwardingRITSBOT)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CreateAutomaticTokensForwardingRITSET`
                    if (value.getActualInstance() instanceof CreateAutomaticTokensForwardingRITSET) {
                        JsonObject obj = adapterCreateAutomaticTokensForwardingRITSET.toJsonTree((CreateAutomaticTokensForwardingRITSET)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CreateAutomaticTokensForwardingRITSBOT, CreateAutomaticTokensForwardingRITSET");
                }

                @Override
                public CreateAutomaticTokensForwardingRITS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CreateAutomaticTokensForwardingRITSBOT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreateAutomaticTokensForwardingRITSBOT.validateJsonObject(jsonObject);
                        actualAdapter = adapterCreateAutomaticTokensForwardingRITSBOT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreateAutomaticTokensForwardingRITSBOT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreateAutomaticTokensForwardingRITSBOT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreateAutomaticTokensForwardingRITSBOT'", e);
                    }

                    // deserialize CreateAutomaticTokensForwardingRITSET
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreateAutomaticTokensForwardingRITSET.validateJsonObject(jsonObject);
                        actualAdapter = adapterCreateAutomaticTokensForwardingRITSET;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreateAutomaticTokensForwardingRITSET'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreateAutomaticTokensForwardingRITSET failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreateAutomaticTokensForwardingRITSET'", e);
                    }

                    if (match == 1) {
                        CreateAutomaticTokensForwardingRITS ret = new CreateAutomaticTokensForwardingRITS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateAutomaticTokensForwardingRITS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public CreateAutomaticTokensForwardingRITS() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateAutomaticTokensForwardingRITS(CreateAutomaticTokensForwardingRITSBOT o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateAutomaticTokensForwardingRITS(CreateAutomaticTokensForwardingRITSET o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreateAutomaticTokensForwardingRITSBOT", new GenericType<CreateAutomaticTokensForwardingRITSBOT>() {
        });
        schemas.put("CreateAutomaticTokensForwardingRITSET", new GenericType<CreateAutomaticTokensForwardingRITSET>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return CreateAutomaticTokensForwardingRITS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CreateAutomaticTokensForwardingRITSBOT, CreateAutomaticTokensForwardingRITSET
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CreateAutomaticTokensForwardingRITSBOT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CreateAutomaticTokensForwardingRITSET) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CreateAutomaticTokensForwardingRITSBOT, CreateAutomaticTokensForwardingRITSET");
    }

    /**
     * Get the actual instance, which can be the following:
     * CreateAutomaticTokensForwardingRITSBOT, CreateAutomaticTokensForwardingRITSET
     *
     * @return The actual instance (CreateAutomaticTokensForwardingRITSBOT, CreateAutomaticTokensForwardingRITSET)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateAutomaticTokensForwardingRITSBOT`. If the actual instance is not `CreateAutomaticTokensForwardingRITSBOT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateAutomaticTokensForwardingRITSBOT`
     * @throws ClassCastException if the instance is not `CreateAutomaticTokensForwardingRITSBOT`
     */
    public CreateAutomaticTokensForwardingRITSBOT getCreateAutomaticTokensForwardingRITSBOT() throws ClassCastException {
        return (CreateAutomaticTokensForwardingRITSBOT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateAutomaticTokensForwardingRITSET`. If the actual instance is not `CreateAutomaticTokensForwardingRITSET`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateAutomaticTokensForwardingRITSET`
     * @throws ClassCastException if the instance is not `CreateAutomaticTokensForwardingRITSET`
     */
    public CreateAutomaticTokensForwardingRITSET getCreateAutomaticTokensForwardingRITSET() throws ClassCastException {
        return (CreateAutomaticTokensForwardingRITSET)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateAutomaticTokensForwardingRITS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with CreateAutomaticTokensForwardingRITSBOT
    try {
      CreateAutomaticTokensForwardingRITSBOT.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateAutomaticTokensForwardingRITSBOT failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CreateAutomaticTokensForwardingRITSET
    try {
      CreateAutomaticTokensForwardingRITSET.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CreateAutomaticTokensForwardingRITSET failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for CreateAutomaticTokensForwardingRITS with oneOf schemas: CreateAutomaticTokensForwardingRITSBOT, CreateAutomaticTokensForwardingRITSET. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of CreateAutomaticTokensForwardingRITS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateAutomaticTokensForwardingRITS
  * @throws IOException if the JSON string is invalid with respect to CreateAutomaticTokensForwardingRITS
  */
  public static CreateAutomaticTokensForwardingRITS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAutomaticTokensForwardingRITS.class);
  }

 /**
  * Convert an instance of CreateAutomaticTokensForwardingRITS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

