/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private String additionalData;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee;

  public static final String SERIALIZED_NAME_LOCKTIME = "locktime";
  @SerializedName(SERIALIZED_NAME_LOCKTIME)
  private Integer locktime;

  /**
   * Representation of the transaction&#39;s strategy type
   */
  @JsonAdapter(PrepareStrategyEnum.Adapter.class)
  public enum PrepareStrategyEnum {
    NONE("none"),
    
    MINIMIZE_DUST("minimize-dust"),
    
    OPTIMIZE_SIZE("optimize-size");

    private String value;

    PrepareStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrepareStrategyEnum fromValue(String value) {
      for (PrepareStrategyEnum b : PrepareStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrepareStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrepareStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrepareStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrepareStrategyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PREPARE_STRATEGY = "prepareStrategy";
  @SerializedName(SERIALIZED_NAME_PREPARE_STRATEGY)
  private PrepareStrategyEnum prepareStrategy;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLACEABLE = "replaceable";
  @SerializedName(SERIALIZED_NAME_REPLACEABLE)
  private Boolean replaceable;

  public static final String SERIALIZED_NAME_XPUB = "xpub";
  @SerializedName(SERIALIZED_NAME_XPUB)
  private String xpub;

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem() { 
  }

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem additionalData(String additionalData) {
    
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Representation of the additional data.
   * @return additionalData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "yourAdditionalDataHere", value = "Representation of the additional data.")

  public String getAdditionalData() {
    return additionalData;
  }


  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem fee(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee getFee() {
    return fee;
  }


  public void setFee(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee fee) {
    this.fee = fee;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem locktime(Integer locktime) {
    
    this.locktime = locktime;
    return this;
  }

   /**
   * Represents the time at which a particular transaction can be added to the blockchain.
   * @return locktime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1659001055", value = "Represents the time at which a particular transaction can be added to the blockchain.")

  public Integer getLocktime() {
    return locktime;
  }


  public void setLocktime(Integer locktime) {
    this.locktime = locktime;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem prepareStrategy(PrepareStrategyEnum prepareStrategy) {
    
    this.prepareStrategy = prepareStrategy;
    return this;
  }

   /**
   * Representation of the transaction&#39;s strategy type
   * @return prepareStrategy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "minimize-dust", value = "Representation of the transaction's strategy type")

  public PrepareStrategyEnum getPrepareStrategy() {
    return prepareStrategy;
  }


  public void setPrepareStrategy(PrepareStrategyEnum prepareStrategy) {
    this.prepareStrategy = prepareStrategy;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem recipients(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem addRecipientsItem(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
   * @return recipients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")

  public List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner> recipients) {
    this.recipients = recipients;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem replaceable(Boolean replaceable) {
    
    this.replaceable = replaceable;
    return this;
  }

   /**
   * Representation of whether the transaction is replaceable
   * @return replaceable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Representation of whether the transaction is replaceable")

  public Boolean getReplaceable() {
    return replaceable;
  }


  public void setReplaceable(Boolean replaceable) {
    this.replaceable = replaceable;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem xpub(String xpub) {
    
    this.xpub = xpub;
    return this;
  }

   /**
   * Defines the account extended publicly known key which is used to derive all child public keys.
   * @return xpub
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "tpubDCNoSqt3HF32yq8VU6mgapTuW1FzENZa3C5dKUF6WCQzubWz2nA1yxUhMQWkhhkD58Uc8YiuD8cmB3y5tihqAv4zT2GNyqKTNLchHJmsvt9", required = true, value = "Defines the account extended publicly known key which is used to derive all child public keys.")

  public String getXpub() {
    return xpub;
  }


  public void setXpub(String xpub) {
    this.xpub = xpub;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem = (PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem) o;
    return Objects.equals(this.additionalData, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.additionalData) &&
        Objects.equals(this.fee, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.fee) &&
        Objects.equals(this.locktime, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.locktime) &&
        Objects.equals(this.prepareStrategy, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.prepareStrategy) &&
        Objects.equals(this.recipients, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.recipients) &&
        Objects.equals(this.replaceable, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.replaceable) &&
        Objects.equals(this.xpub, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.xpub);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalData, fee, locktime, prepareStrategy, recipients, replaceable, xpub);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem {\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    locktime: ").append(toIndentedString(locktime)).append("\n");
    sb.append("    prepareStrategy: ").append(toIndentedString(prepareStrategy)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    replaceable: ").append(toIndentedString(replaceable)).append("\n");
    sb.append("    xpub: ").append(toIndentedString(xpub)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalData");
    openapiFields.add("fee");
    openapiFields.add("locktime");
    openapiFields.add("prepareStrategy");
    openapiFields.add("recipients");
    openapiFields.add("replaceable");
    openapiFields.add("xpub");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("xpub");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem is not found in the empty JSON string", PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      // validate the optional field `fee`
      if (jsonObj.getAsJsonObject("fee") != null) {
        PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee.validateJsonObject(jsonObj.getAsJsonObject("fee"));
      }
      if (jsonObj.get("prepareStrategy") != null && !jsonObj.get("prepareStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prepareStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prepareStrategy").toString()));
      }
      JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
      if (jsonArrayrecipients != null) {
        // ensure the json data is an array
        if (!jsonObj.get("recipients").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
        }

        // validate the optional field `recipients` (array)
        for (int i = 0; i < jsonArrayrecipients.size(); i++) {
          PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner.validateJsonObject(jsonArrayrecipients.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("xpub") != null && !jsonObj.get("xpub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xpub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xpub").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem>() {
           @Override
           public void write(JsonWriter out, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
  * @throws IOException if the JSON string is invalid with respect to PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
  */
  public static PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem.class);
  }

 /**
  * Convert an instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

