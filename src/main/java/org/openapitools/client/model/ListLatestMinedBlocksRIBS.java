/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSB;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSBC;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSBSC;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSD;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSD2;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSEC;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSL;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSX;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSXTotalCoins;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSXTotalFees;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSZ;
import org.openapitools.client.model.ListLatestMinedBlocksRIBSZ2;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class ListLatestMinedBlocksRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ListLatestMinedBlocksRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListLatestMinedBlocksRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListLatestMinedBlocksRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListLatestMinedBlocksRIBSB> adapterListLatestMinedBlocksRIBSB = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSB.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSBC> adapterListLatestMinedBlocksRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSBC.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSBSC> adapterListLatestMinedBlocksRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSBSC.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSD> adapterListLatestMinedBlocksRIBSD = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSD.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSD2> adapterListLatestMinedBlocksRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSD2.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSEC> adapterListLatestMinedBlocksRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSEC.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSL> adapterListLatestMinedBlocksRIBSL = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSL.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSX> adapterListLatestMinedBlocksRIBSX = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSX.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSZ> adapterListLatestMinedBlocksRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSZ.class));
            final TypeAdapter<ListLatestMinedBlocksRIBSZ2> adapterListLatestMinedBlocksRIBSZ2 = gson.getDelegateAdapter(this, TypeToken.get(ListLatestMinedBlocksRIBSZ2.class));

            return (TypeAdapter<T>) new TypeAdapter<ListLatestMinedBlocksRIBS>() {
                @Override
                public void write(JsonWriter out, ListLatestMinedBlocksRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSB`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSB) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSB.toJsonTree((ListLatestMinedBlocksRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSBC`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSBC) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSBC.toJsonTree((ListLatestMinedBlocksRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSBSC`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSBSC) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSBSC.toJsonTree((ListLatestMinedBlocksRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSD`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSD) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSD.toJsonTree((ListLatestMinedBlocksRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSD2`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSD2) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSD2.toJsonTree((ListLatestMinedBlocksRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSEC`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSEC) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSEC.toJsonTree((ListLatestMinedBlocksRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSL`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSL) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSL.toJsonTree((ListLatestMinedBlocksRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSX`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSX) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSX.toJsonTree((ListLatestMinedBlocksRIBSX)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSZ`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSZ) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSZ.toJsonTree((ListLatestMinedBlocksRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListLatestMinedBlocksRIBSZ2`
                    if (value.getActualInstance() instanceof ListLatestMinedBlocksRIBSZ2) {
                        JsonObject obj = adapterListLatestMinedBlocksRIBSZ2.toJsonTree((ListLatestMinedBlocksRIBSZ2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ, ListLatestMinedBlocksRIBSZ2");
                }

                @Override
                public ListLatestMinedBlocksRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ListLatestMinedBlocksRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSB'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSBC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSBC'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSBSC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSBSC'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSD'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSD2'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSEC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSEC'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSL'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSX
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSX.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSX;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSX'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSX failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSX'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSZ'", e);
                    }

                    // deserialize ListLatestMinedBlocksRIBSZ2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListLatestMinedBlocksRIBSZ2.validateJsonObject(jsonObject);
                        actualAdapter = adapterListLatestMinedBlocksRIBSZ2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListLatestMinedBlocksRIBSZ2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSZ2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListLatestMinedBlocksRIBSZ2'", e);
                    }

                    if (match == 1) {
                        ListLatestMinedBlocksRIBS ret = new ListLatestMinedBlocksRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ListLatestMinedBlocksRIBS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ListLatestMinedBlocksRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSX o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListLatestMinedBlocksRIBS(ListLatestMinedBlocksRIBSZ2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ListLatestMinedBlocksRIBSB", new GenericType<ListLatestMinedBlocksRIBSB>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSBC", new GenericType<ListLatestMinedBlocksRIBSBC>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSBSC", new GenericType<ListLatestMinedBlocksRIBSBSC>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSD", new GenericType<ListLatestMinedBlocksRIBSD>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSD2", new GenericType<ListLatestMinedBlocksRIBSD2>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSEC", new GenericType<ListLatestMinedBlocksRIBSEC>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSL", new GenericType<ListLatestMinedBlocksRIBSL>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSX", new GenericType<ListLatestMinedBlocksRIBSX>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSZ", new GenericType<ListLatestMinedBlocksRIBSZ>() {
        });
        schemas.put("ListLatestMinedBlocksRIBSZ2", new GenericType<ListLatestMinedBlocksRIBSZ2>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ListLatestMinedBlocksRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ, ListLatestMinedBlocksRIBSZ2
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ListLatestMinedBlocksRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSX) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListLatestMinedBlocksRIBSZ2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ, ListLatestMinedBlocksRIBSZ2");
    }

    /**
     * Get the actual instance, which can be the following:
     * ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ, ListLatestMinedBlocksRIBSZ2
     *
     * @return The actual instance (ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ, ListLatestMinedBlocksRIBSZ2)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSB`. If the actual instance is not `ListLatestMinedBlocksRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSB`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSB`
     */
    public ListLatestMinedBlocksRIBSB getListLatestMinedBlocksRIBSB() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSBC`. If the actual instance is not `ListLatestMinedBlocksRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSBC`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSBC`
     */
    public ListLatestMinedBlocksRIBSBC getListLatestMinedBlocksRIBSBC() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSBSC`. If the actual instance is not `ListLatestMinedBlocksRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSBSC`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSBSC`
     */
    public ListLatestMinedBlocksRIBSBSC getListLatestMinedBlocksRIBSBSC() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSD`. If the actual instance is not `ListLatestMinedBlocksRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSD`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSD`
     */
    public ListLatestMinedBlocksRIBSD getListLatestMinedBlocksRIBSD() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSD2`. If the actual instance is not `ListLatestMinedBlocksRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSD2`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSD2`
     */
    public ListLatestMinedBlocksRIBSD2 getListLatestMinedBlocksRIBSD2() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSEC`. If the actual instance is not `ListLatestMinedBlocksRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSEC`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSEC`
     */
    public ListLatestMinedBlocksRIBSEC getListLatestMinedBlocksRIBSEC() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSL`. If the actual instance is not `ListLatestMinedBlocksRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSL`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSL`
     */
    public ListLatestMinedBlocksRIBSL getListLatestMinedBlocksRIBSL() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSX`. If the actual instance is not `ListLatestMinedBlocksRIBSX`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSX`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSX`
     */
    public ListLatestMinedBlocksRIBSX getListLatestMinedBlocksRIBSX() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSX)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSZ`. If the actual instance is not `ListLatestMinedBlocksRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSZ`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSZ`
     */
    public ListLatestMinedBlocksRIBSZ getListLatestMinedBlocksRIBSZ() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSZ)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListLatestMinedBlocksRIBSZ2`. If the actual instance is not `ListLatestMinedBlocksRIBSZ2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListLatestMinedBlocksRIBSZ2`
     * @throws ClassCastException if the instance is not `ListLatestMinedBlocksRIBSZ2`
     */
    public ListLatestMinedBlocksRIBSZ2 getListLatestMinedBlocksRIBSZ2() throws ClassCastException {
        return (ListLatestMinedBlocksRIBSZ2)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListLatestMinedBlocksRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ListLatestMinedBlocksRIBSB
    try {
      ListLatestMinedBlocksRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSBC
    try {
      ListLatestMinedBlocksRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSBC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSBSC
    try {
      ListLatestMinedBlocksRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSBSC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSD
    try {
      ListLatestMinedBlocksRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSD2
    try {
      ListLatestMinedBlocksRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSEC
    try {
      ListLatestMinedBlocksRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSEC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSL
    try {
      ListLatestMinedBlocksRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSX
    try {
      ListLatestMinedBlocksRIBSX.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSX failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSZ
    try {
      ListLatestMinedBlocksRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ListLatestMinedBlocksRIBSZ2
    try {
      ListLatestMinedBlocksRIBSZ2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ListLatestMinedBlocksRIBSZ2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ListLatestMinedBlocksRIBS with oneOf schemas: ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ, ListLatestMinedBlocksRIBSZ2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ListLatestMinedBlocksRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListLatestMinedBlocksRIBS
  * @throws IOException if the JSON string is invalid with respect to ListLatestMinedBlocksRIBS
  */
  public static ListLatestMinedBlocksRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListLatestMinedBlocksRIBS.class);
  }

 /**
  * Convert an instance of ListLatestMinedBlocksRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

