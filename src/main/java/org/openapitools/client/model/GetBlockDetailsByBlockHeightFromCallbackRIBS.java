/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSB;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSBC;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSBSC;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSD;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSD2;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSE;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSEC;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSL;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSP;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBST;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSX;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSZ;
import org.openapitools.client.model.GetBlockDetailsByBlockHeightFromCallbackRIBSZ2;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalCoins;
import org.openapitools.client.model.GetLatestMinedXRPRippleBlockRITotalFees;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class GetBlockDetailsByBlockHeightFromCallbackRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetBlockDetailsByBlockHeightFromCallbackRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetBlockDetailsByBlockHeightFromCallbackRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetBlockDetailsByBlockHeightFromCallbackRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSB> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSB = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSB.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSBC> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSBC.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSBSC> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSBSC.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSD> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSD = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSD.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSD2> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSD2.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSE> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSE = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSE.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSEC> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSEC.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSL> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSL = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSL.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSP> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSP = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSP.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBST> adapterGetBlockDetailsByBlockHeightFromCallbackRIBST = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBST.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSX> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSX = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSX.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSZ> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSZ.class));
            final TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBSZ2> adapterGetBlockDetailsByBlockHeightFromCallbackRIBSZ2 = gson.getDelegateAdapter(this, TypeToken.get(GetBlockDetailsByBlockHeightFromCallbackRIBSZ2.class));

            return (TypeAdapter<T>) new TypeAdapter<GetBlockDetailsByBlockHeightFromCallbackRIBS>() {
                @Override
                public void write(JsonWriter out, GetBlockDetailsByBlockHeightFromCallbackRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSB`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSB) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSB.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSBC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSBC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSBC.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSBSC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSBSC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSBSC.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSD`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSD) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSD.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSD2`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSD2) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSD2.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSE`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSE) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSE.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSEC`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSEC) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSEC.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSL`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSL) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSL.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSP`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSP) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSP.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSP)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBST`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBST) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBST.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBST)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSX`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSX) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSX.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSX)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSZ`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSZ) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSZ.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GetBlockDetailsByBlockHeightFromCallbackRIBSZ2`
                    if (value.getActualInstance() instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSZ2) {
                        JsonObject obj = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSZ2.toJsonTree((GetBlockDetailsByBlockHeightFromCallbackRIBSZ2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GetBlockDetailsByBlockHeightFromCallbackRIBSB, GetBlockDetailsByBlockHeightFromCallbackRIBSBC, GetBlockDetailsByBlockHeightFromCallbackRIBSBSC, GetBlockDetailsByBlockHeightFromCallbackRIBSD, GetBlockDetailsByBlockHeightFromCallbackRIBSD2, GetBlockDetailsByBlockHeightFromCallbackRIBSE, GetBlockDetailsByBlockHeightFromCallbackRIBSEC, GetBlockDetailsByBlockHeightFromCallbackRIBSL, GetBlockDetailsByBlockHeightFromCallbackRIBSP, GetBlockDetailsByBlockHeightFromCallbackRIBST, GetBlockDetailsByBlockHeightFromCallbackRIBSX, GetBlockDetailsByBlockHeightFromCallbackRIBSZ, GetBlockDetailsByBlockHeightFromCallbackRIBSZ2");
                }

                @Override
                public GetBlockDetailsByBlockHeightFromCallbackRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSB'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSBC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSBC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSBSC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSBSC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSD'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSD2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSD2'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSE'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSEC failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSEC'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSL'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSP
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSP.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSP;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSP'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSP failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSP'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBST
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBST.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBST;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBST'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBST failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBST'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSX
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSX.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSX;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSX'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSX failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSX'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSZ failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSZ'", e);
                    }

                    // deserialize GetBlockDetailsByBlockHeightFromCallbackRIBSZ2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetBlockDetailsByBlockHeightFromCallbackRIBSZ2.validateJsonObject(jsonObject);
                        actualAdapter = adapterGetBlockDetailsByBlockHeightFromCallbackRIBSZ2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSZ2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSZ2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetBlockDetailsByBlockHeightFromCallbackRIBSZ2'", e);
                    }

                    if (match == 1) {
                        GetBlockDetailsByBlockHeightFromCallbackRIBS ret = new GetBlockDetailsByBlockHeightFromCallbackRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetBlockDetailsByBlockHeightFromCallbackRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSP o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBST o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSX o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetBlockDetailsByBlockHeightFromCallbackRIBS(GetBlockDetailsByBlockHeightFromCallbackRIBSZ2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSB", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSB>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSBC", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSBC>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSBSC", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSBSC>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSD", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSD>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSD2", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSD2>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSE", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSE>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSEC", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSEC>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSL", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSL>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSP", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSP>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBST", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBST>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSX", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSX>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSZ", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSZ>() {
        });
        schemas.put("GetBlockDetailsByBlockHeightFromCallbackRIBSZ2", new GenericType<GetBlockDetailsByBlockHeightFromCallbackRIBSZ2>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetBlockDetailsByBlockHeightFromCallbackRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GetBlockDetailsByBlockHeightFromCallbackRIBSB, GetBlockDetailsByBlockHeightFromCallbackRIBSBC, GetBlockDetailsByBlockHeightFromCallbackRIBSBSC, GetBlockDetailsByBlockHeightFromCallbackRIBSD, GetBlockDetailsByBlockHeightFromCallbackRIBSD2, GetBlockDetailsByBlockHeightFromCallbackRIBSE, GetBlockDetailsByBlockHeightFromCallbackRIBSEC, GetBlockDetailsByBlockHeightFromCallbackRIBSL, GetBlockDetailsByBlockHeightFromCallbackRIBSP, GetBlockDetailsByBlockHeightFromCallbackRIBST, GetBlockDetailsByBlockHeightFromCallbackRIBSX, GetBlockDetailsByBlockHeightFromCallbackRIBSZ, GetBlockDetailsByBlockHeightFromCallbackRIBSZ2
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSP) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBST) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSX) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetBlockDetailsByBlockHeightFromCallbackRIBSZ2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GetBlockDetailsByBlockHeightFromCallbackRIBSB, GetBlockDetailsByBlockHeightFromCallbackRIBSBC, GetBlockDetailsByBlockHeightFromCallbackRIBSBSC, GetBlockDetailsByBlockHeightFromCallbackRIBSD, GetBlockDetailsByBlockHeightFromCallbackRIBSD2, GetBlockDetailsByBlockHeightFromCallbackRIBSE, GetBlockDetailsByBlockHeightFromCallbackRIBSEC, GetBlockDetailsByBlockHeightFromCallbackRIBSL, GetBlockDetailsByBlockHeightFromCallbackRIBSP, GetBlockDetailsByBlockHeightFromCallbackRIBST, GetBlockDetailsByBlockHeightFromCallbackRIBSX, GetBlockDetailsByBlockHeightFromCallbackRIBSZ, GetBlockDetailsByBlockHeightFromCallbackRIBSZ2");
    }

    /**
     * Get the actual instance, which can be the following:
     * GetBlockDetailsByBlockHeightFromCallbackRIBSB, GetBlockDetailsByBlockHeightFromCallbackRIBSBC, GetBlockDetailsByBlockHeightFromCallbackRIBSBSC, GetBlockDetailsByBlockHeightFromCallbackRIBSD, GetBlockDetailsByBlockHeightFromCallbackRIBSD2, GetBlockDetailsByBlockHeightFromCallbackRIBSE, GetBlockDetailsByBlockHeightFromCallbackRIBSEC, GetBlockDetailsByBlockHeightFromCallbackRIBSL, GetBlockDetailsByBlockHeightFromCallbackRIBSP, GetBlockDetailsByBlockHeightFromCallbackRIBST, GetBlockDetailsByBlockHeightFromCallbackRIBSX, GetBlockDetailsByBlockHeightFromCallbackRIBSZ, GetBlockDetailsByBlockHeightFromCallbackRIBSZ2
     *
     * @return The actual instance (GetBlockDetailsByBlockHeightFromCallbackRIBSB, GetBlockDetailsByBlockHeightFromCallbackRIBSBC, GetBlockDetailsByBlockHeightFromCallbackRIBSBSC, GetBlockDetailsByBlockHeightFromCallbackRIBSD, GetBlockDetailsByBlockHeightFromCallbackRIBSD2, GetBlockDetailsByBlockHeightFromCallbackRIBSE, GetBlockDetailsByBlockHeightFromCallbackRIBSEC, GetBlockDetailsByBlockHeightFromCallbackRIBSL, GetBlockDetailsByBlockHeightFromCallbackRIBSP, GetBlockDetailsByBlockHeightFromCallbackRIBST, GetBlockDetailsByBlockHeightFromCallbackRIBSX, GetBlockDetailsByBlockHeightFromCallbackRIBSZ, GetBlockDetailsByBlockHeightFromCallbackRIBSZ2)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSB`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSB`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSB`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSB getGetBlockDetailsByBlockHeightFromCallbackRIBSB() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSBC`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSBC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSBC`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSBC getGetBlockDetailsByBlockHeightFromCallbackRIBSBC() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSBSC`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSBSC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSBSC`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSBSC getGetBlockDetailsByBlockHeightFromCallbackRIBSBSC() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSD`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSD`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSD`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSD getGetBlockDetailsByBlockHeightFromCallbackRIBSD() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSD2`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSD2`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSD2`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSD2 getGetBlockDetailsByBlockHeightFromCallbackRIBSD2() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSE`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSE`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSE`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSE getGetBlockDetailsByBlockHeightFromCallbackRIBSE() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSEC`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSEC`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSEC`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSEC getGetBlockDetailsByBlockHeightFromCallbackRIBSEC() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSL`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSL`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSL`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSL getGetBlockDetailsByBlockHeightFromCallbackRIBSL() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSP`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSP`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSP`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSP`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSP getGetBlockDetailsByBlockHeightFromCallbackRIBSP() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSP)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBST`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBST`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBST`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBST`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBST getGetBlockDetailsByBlockHeightFromCallbackRIBST() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBST)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSX`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSX`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSX`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSX`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSX getGetBlockDetailsByBlockHeightFromCallbackRIBSX() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSX)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSZ`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSZ`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSZ`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSZ getGetBlockDetailsByBlockHeightFromCallbackRIBSZ() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSZ)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSZ2`. If the actual instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSZ2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetBlockDetailsByBlockHeightFromCallbackRIBSZ2`
     * @throws ClassCastException if the instance is not `GetBlockDetailsByBlockHeightFromCallbackRIBSZ2`
     */
    public GetBlockDetailsByBlockHeightFromCallbackRIBSZ2 getGetBlockDetailsByBlockHeightFromCallbackRIBSZ2() throws ClassCastException {
        return (GetBlockDetailsByBlockHeightFromCallbackRIBSZ2)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetBlockDetailsByBlockHeightFromCallbackRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSB
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSBC
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSBC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSBSC
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSBSC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSD
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSD failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSD2
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSD2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSE
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSE failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSEC
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSEC failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSL
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSL failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSP
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSP.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSP failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBST
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBST.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBST failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSX
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSX.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSX failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSZ
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSZ failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GetBlockDetailsByBlockHeightFromCallbackRIBSZ2
    try {
      GetBlockDetailsByBlockHeightFromCallbackRIBSZ2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GetBlockDetailsByBlockHeightFromCallbackRIBSZ2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetBlockDetailsByBlockHeightFromCallbackRIBS with oneOf schemas: GetBlockDetailsByBlockHeightFromCallbackRIBSB, GetBlockDetailsByBlockHeightFromCallbackRIBSBC, GetBlockDetailsByBlockHeightFromCallbackRIBSBSC, GetBlockDetailsByBlockHeightFromCallbackRIBSD, GetBlockDetailsByBlockHeightFromCallbackRIBSD2, GetBlockDetailsByBlockHeightFromCallbackRIBSE, GetBlockDetailsByBlockHeightFromCallbackRIBSEC, GetBlockDetailsByBlockHeightFromCallbackRIBSL, GetBlockDetailsByBlockHeightFromCallbackRIBSP, GetBlockDetailsByBlockHeightFromCallbackRIBST, GetBlockDetailsByBlockHeightFromCallbackRIBSX, GetBlockDetailsByBlockHeightFromCallbackRIBSZ, GetBlockDetailsByBlockHeightFromCallbackRIBSZ2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetBlockDetailsByBlockHeightFromCallbackRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetBlockDetailsByBlockHeightFromCallbackRIBS
  * @throws IOException if the JSON string is invalid with respect to GetBlockDetailsByBlockHeightFromCallbackRIBS
  */
  public static GetBlockDetailsByBlockHeightFromCallbackRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockDetailsByBlockHeightFromCallbackRIBS.class);
  }

 /**
  * Convert an instance of GetBlockDetailsByBlockHeightFromCallbackRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

