/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner;
import org.openapitools.client.model.PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private String additionalData;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private String fee;

  public static final String SERIALIZED_NAME_FEE_PER_BYTE = "feePerByte";
  @SerializedName(SERIALIZED_NAME_FEE_PER_BYTE)
  private String feePerByte;

  public static final String SERIALIZED_NAME_LOCKTIME = "locktime";
  @SerializedName(SERIALIZED_NAME_LOCKTIME)
  private Long locktime;

  public static final String SERIALIZED_NAME_REPLACEABLE = "replaceable";
  @SerializedName(SERIALIZED_NAME_REPLACEABLE)
  private Boolean replaceable;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_VIN = "vin";
  @SerializedName(SERIALIZED_NAME_VIN)
  private List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner> vin = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOUT = "vout";
  @SerializedName(SERIALIZED_NAME_VOUT)
  private List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner> vout = new ArrayList<>();

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI() { 
  }

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI additionalData(String additionalData) {
    
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Representation of the additional data
   * @return additionalData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "yourAdditionalDataHere", value = "Representation of the additional data")

  public String getAdditionalData() {
    return additionalData;
  }


  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI fee(String fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.0000279", required = true, value = "When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.")

  public String getFee() {
    return fee;
  }


  public void setFee(String fee) {
    this.fee = fee;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI feePerByte(String feePerByte) {
    
    this.feePerByte = feePerByte;
    return this;
  }

   /**
   * Defines the fee per byte value
   * @return feePerByte
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.00000014", value = "Defines the fee per byte value")

  public String getFeePerByte() {
    return feePerByte;
  }


  public void setFeePerByte(String feePerByte) {
    this.feePerByte = feePerByte;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI locktime(Long locktime) {
    
    this.locktime = locktime;
    return this;
  }

   /**
   * Represents the time at which a particular transaction can be added to the blockchain.
   * @return locktime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1781965", required = true, value = "Represents the time at which a particular transaction can be added to the blockchain.")

  public Long getLocktime() {
    return locktime;
  }


  public void setLocktime(Long locktime) {
    this.locktime = locktime;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI replaceable(Boolean replaceable) {
    
    this.replaceable = replaceable;
    return this;
  }

   /**
   * Representation of whether the transaction is replaceable
   * @return replaceable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Representation of whether the transaction is replaceable")

  public Boolean getReplaceable() {
    return replaceable;
  }


  public void setReplaceable(Boolean replaceable) {
    this.replaceable = replaceable;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Represents the total size of this transaction.
   * @return size
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "243", required = true, value = "Represents the total size of this transaction.")

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI vin(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner> vin) {
    
    this.vin = vin;
    return this;
  }

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI addVinItem(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner vinItem) {
    this.vin.add(vinItem);
    return this;
  }

   /**
   * Represents the transaction inputs.
   * @return vin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents the transaction inputs.")

  public List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner> getVin() {
    return vin;
  }


  public void setVin(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner> vin) {
    this.vin = vin;
  }


  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI vout(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner> vout) {
    
    this.vout = vout;
    return this;
  }

  public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI addVoutItem(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner voutItem) {
    this.vout.add(voutItem);
    return this;
  }

   /**
   * Represents the transaction outputs.
   * @return vout
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents the transaction outputs.")

  public List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner> getVout() {
    return vout;
  }


  public void setVout(List<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner> vout) {
    this.vout = vout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI = (PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI) o;
    return Objects.equals(this.additionalData, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.additionalData) &&
        Objects.equals(this.fee, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.fee) &&
        Objects.equals(this.feePerByte, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.feePerByte) &&
        Objects.equals(this.locktime, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.locktime) &&
        Objects.equals(this.replaceable, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.replaceable) &&
        Objects.equals(this.size, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.size) &&
        Objects.equals(this.vin, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.vin) &&
        Objects.equals(this.vout, prepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.vout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalData, fee, feePerByte, locktime, replaceable, size, vin, vout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI {\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    feePerByte: ").append(toIndentedString(feePerByte)).append("\n");
    sb.append("    locktime: ").append(toIndentedString(locktime)).append("\n");
    sb.append("    replaceable: ").append(toIndentedString(replaceable)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    vout: ").append(toIndentedString(vout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalData");
    openapiFields.add("fee");
    openapiFields.add("feePerByte");
    openapiFields.add("locktime");
    openapiFields.add("replaceable");
    openapiFields.add("size");
    openapiFields.add("vin");
    openapiFields.add("vout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("locktime");
    openapiRequiredFields.add("replaceable");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("vin");
    openapiRequiredFields.add("vout");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI is not found in the empty JSON string", PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
      }
      if (jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee").toString()));
      }
      if (jsonObj.get("feePerByte") != null && !jsonObj.get("feePerByte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePerByte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePerByte").toString()));
      }
      JsonArray jsonArrayvin = jsonObj.getAsJsonArray("vin");
      if (jsonArrayvin != null) {
        // ensure the json data is an array
        if (!jsonObj.get("vin").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `vin` to be an array in the JSON string but got `%s`", jsonObj.get("vin").toString()));
        }

        // validate the optional field `vin` (array)
        for (int i = 0; i < jsonArrayvin.size(); i++) {
          PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVinInner.validateJsonObject(jsonArrayvin.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayvout = jsonObj.getAsJsonArray("vout");
      if (jsonArrayvout != null) {
        // ensure the json data is an array
        if (!jsonObj.get("vout").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `vout` to be an array in the JSON string but got `%s`", jsonObj.get("vout").toString()));
        }

        // validate the optional field `vout` (array)
        for (int i = 0; i < jsonArrayvout.size(); i++) {
          PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIVoutInner.validateJsonObject(jsonArrayvout.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.class));

       return (TypeAdapter<T>) new TypeAdapter<PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI>() {
           @Override
           public void write(JsonWriter out, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI
  * @throws IOException if the JSON string is invalid with respect to PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI
  */
  public static PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI.class);
  }

 /**
  * Convert an instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

