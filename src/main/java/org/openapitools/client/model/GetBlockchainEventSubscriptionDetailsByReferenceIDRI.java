/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ListBlockchainEventsSubscriptionsRIDeactivationReasons;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetBlockchainEventSubscriptionDetailsByReferenceIDRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class GetBlockchainEventSubscriptionDetailsByReferenceIDRI {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_CALLBACK_SECRET_KEY = "callbackSecretKey";
  @SerializedName(SERIALIZED_NAME_CALLBACK_SECRET_KEY)
  private String callbackSecretKey;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CONFIRMATIONS_COUNT = "confirmationsCount";
  @SerializedName(SERIALIZED_NAME_CONFIRMATIONS_COUNT)
  private Integer confirmationsCount;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Integer createdTimestamp;

  public static final String SERIALIZED_NAME_DEACTIVATION_REASONS = "deactivationReasons";
  @SerializedName(SERIALIZED_NAME_DEACTIVATION_REASONS)
  private List<ListBlockchainEventsSubscriptionsRIDeactivationReasons> deactivationReasons = null;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI() { 
  }

  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Represents the address of the transaction.
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "tb1qtm44m6xmuasy4sc7nl7thvuxcerau2dfvkkgsc", value = "Represents the address of the transaction.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI blockchain(String blockchain) {
    
    this.blockchain = blockchain;
    return this;
  }

   /**
   * Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
   * @return blockchain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bitcoin", required = true, value = "Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")

  public String getBlockchain() {
    return blockchain;
  }


  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI callbackSecretKey(String callbackSecretKey) {
    
    this.callbackSecretKey = callbackSecretKey;
    return this;
  }

   /**
   * Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).
   * @return callbackSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "yourSecretKey", value = "Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).")

  public String getCallbackSecretKey() {
    return callbackSecretKey;
  }


  public void setCallbackSecretKey(String callbackSecretKey) {
    this.callbackSecretKey = callbackSecretKey;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI callbackUrl(String callbackUrl) {
    
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs.
   * @return callbackUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "http://example.com", required = true, value = "Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs.")

  public String getCallbackUrl() {
    return callbackUrl;
  }


  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI confirmationsCount(Integer confirmationsCount) {
    
    this.confirmationsCount = confirmationsCount;
    return this;
  }

   /**
   * Represents the number of confirmations, i.e. the amount of blocks that have been built on top of this block.
   * @return confirmationsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Represents the number of confirmations, i.e. the amount of blocks that have been built on top of this block.")

  public Integer getConfirmationsCount() {
    return confirmationsCount;
  }


  public void setConfirmationsCount(Integer confirmationsCount) {
    this.confirmationsCount = confirmationsCount;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI createdTimestamp(Integer createdTimestamp) {
    
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * Defines the specific time/date when the subscription was created in Unix Timestamp.
   * @return createdTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1966238648", required = true, value = "Defines the specific time/date when the subscription was created in Unix Timestamp.")

  public Integer getCreatedTimestamp() {
    return createdTimestamp;
  }


  public void setCreatedTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI deactivationReasons(List<ListBlockchainEventsSubscriptionsRIDeactivationReasons> deactivationReasons) {
    
    this.deactivationReasons = deactivationReasons;
    return this;
  }

  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI addDeactivationReasonsItem(ListBlockchainEventsSubscriptionsRIDeactivationReasons deactivationReasonsItem) {
    if (this.deactivationReasons == null) {
      this.deactivationReasons = new ArrayList<>();
    }
    this.deactivationReasons.add(deactivationReasonsItem);
    return this;
  }

   /**
   * Represents the deactivation reason details, available when a blockchain event subscription has status isActive - false.
   * @return deactivationReasons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the deactivation reason details, available when a blockchain event subscription has status isActive - false.")

  public List<ListBlockchainEventsSubscriptionsRIDeactivationReasons> getDeactivationReasons() {
    return deactivationReasons;
  }


  public void setDeactivationReasons(List<ListBlockchainEventsSubscriptionsRIDeactivationReasons> deactivationReasons) {
    this.deactivationReasons = deactivationReasons;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Defines the type of the specific event available for the customer to subscribe to for callback notification.
   * @return eventType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ADDRESS_COINS_TRANSACTION_CONFIRMED", required = true, value = "Defines the type of the specific event available for the customer to subscribe to for callback notification.")

  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Defines whether the subscription is active or not. Set as boolean.
   * @return isActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Defines whether the subscription is active or not. Set as boolean.")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI network(String network) {
    
    this.network = network;
    return this;
  }

   /**
   * Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
   * @return network
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "testnet", required = true, value = "Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.")

  public String getNetwork() {
    return network;
  }


  public void setNetwork(String network) {
    this.network = network;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI referenceId(String referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Represents a unique ID used to reference the specific callback subscription.
   * @return referenceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bc243c86-0902-4386-b30d-e6b30fa1f2aa", required = true, value = "Represents a unique ID used to reference the specific callback subscription.")

  public String getReferenceId() {
    return referenceId;
  }


  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public GetBlockchainEventSubscriptionDetailsByReferenceIDRI transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Represents the unique identification string that defines the transaction.
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "742b4a8d54a663d372fa16abf74093595ae6fc950f2fa2bb7388c7f4d061d7b8", value = "Represents the unique identification string that defines the transaction.")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlockchainEventSubscriptionDetailsByReferenceIDRI getBlockchainEventSubscriptionDetailsByReferenceIDRI = (GetBlockchainEventSubscriptionDetailsByReferenceIDRI) o;
    return Objects.equals(this.address, getBlockchainEventSubscriptionDetailsByReferenceIDRI.address) &&
        Objects.equals(this.blockchain, getBlockchainEventSubscriptionDetailsByReferenceIDRI.blockchain) &&
        Objects.equals(this.callbackSecretKey, getBlockchainEventSubscriptionDetailsByReferenceIDRI.callbackSecretKey) &&
        Objects.equals(this.callbackUrl, getBlockchainEventSubscriptionDetailsByReferenceIDRI.callbackUrl) &&
        Objects.equals(this.confirmationsCount, getBlockchainEventSubscriptionDetailsByReferenceIDRI.confirmationsCount) &&
        Objects.equals(this.createdTimestamp, getBlockchainEventSubscriptionDetailsByReferenceIDRI.createdTimestamp) &&
        Objects.equals(this.deactivationReasons, getBlockchainEventSubscriptionDetailsByReferenceIDRI.deactivationReasons) &&
        Objects.equals(this.eventType, getBlockchainEventSubscriptionDetailsByReferenceIDRI.eventType) &&
        Objects.equals(this.isActive, getBlockchainEventSubscriptionDetailsByReferenceIDRI.isActive) &&
        Objects.equals(this.network, getBlockchainEventSubscriptionDetailsByReferenceIDRI.network) &&
        Objects.equals(this.referenceId, getBlockchainEventSubscriptionDetailsByReferenceIDRI.referenceId) &&
        Objects.equals(this.transactionId, getBlockchainEventSubscriptionDetailsByReferenceIDRI.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, blockchain, callbackSecretKey, callbackUrl, confirmationsCount, createdTimestamp, deactivationReasons, eventType, isActive, network, referenceId, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlockchainEventSubscriptionDetailsByReferenceIDRI {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    callbackSecretKey: ").append(toIndentedString(callbackSecretKey)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    confirmationsCount: ").append(toIndentedString(confirmationsCount)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    deactivationReasons: ").append(toIndentedString(deactivationReasons)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("blockchain");
    openapiFields.add("callbackSecretKey");
    openapiFields.add("callbackUrl");
    openapiFields.add("confirmationsCount");
    openapiFields.add("createdTimestamp");
    openapiFields.add("deactivationReasons");
    openapiFields.add("eventType");
    openapiFields.add("isActive");
    openapiFields.add("network");
    openapiFields.add("referenceId");
    openapiFields.add("transactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blockchain");
    openapiRequiredFields.add("callbackUrl");
    openapiRequiredFields.add("createdTimestamp");
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("referenceId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetBlockchainEventSubscriptionDetailsByReferenceIDRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetBlockchainEventSubscriptionDetailsByReferenceIDRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBlockchainEventSubscriptionDetailsByReferenceIDRI is not found in the empty JSON string", GetBlockchainEventSubscriptionDetailsByReferenceIDRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetBlockchainEventSubscriptionDetailsByReferenceIDRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBlockchainEventSubscriptionDetailsByReferenceIDRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetBlockchainEventSubscriptionDetailsByReferenceIDRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if (jsonObj.get("callbackSecretKey") != null && !jsonObj.get("callbackSecretKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackSecretKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackSecretKey").toString()));
      }
      if (jsonObj.get("callbackUrl") != null && !jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      JsonArray jsonArraydeactivationReasons = jsonObj.getAsJsonArray("deactivationReasons");
      if (jsonArraydeactivationReasons != null) {
        // ensure the json data is an array
        if (!jsonObj.get("deactivationReasons").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `deactivationReasons` to be an array in the JSON string but got `%s`", jsonObj.get("deactivationReasons").toString()));
        }

        // validate the optional field `deactivationReasons` (array)
        for (int i = 0; i < jsonArraydeactivationReasons.size(); i++) {
          ListBlockchainEventsSubscriptionsRIDeactivationReasons.validateJsonObject(jsonArraydeactivationReasons.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if (jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBlockchainEventSubscriptionDetailsByReferenceIDRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBlockchainEventSubscriptionDetailsByReferenceIDRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBlockchainEventSubscriptionDetailsByReferenceIDRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBlockchainEventSubscriptionDetailsByReferenceIDRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBlockchainEventSubscriptionDetailsByReferenceIDRI>() {
           @Override
           public void write(JsonWriter out, GetBlockchainEventSubscriptionDetailsByReferenceIDRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBlockchainEventSubscriptionDetailsByReferenceIDRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetBlockchainEventSubscriptionDetailsByReferenceIDRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetBlockchainEventSubscriptionDetailsByReferenceIDRI
  * @throws IOException if the JSON string is invalid with respect to GetBlockchainEventSubscriptionDetailsByReferenceIDRI
  */
  public static GetBlockchainEventSubscriptionDetailsByReferenceIDRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockchainEventSubscriptionDetailsByReferenceIDRI.class);
  }

 /**
  * Convert an instance of GetBlockchainEventSubscriptionDetailsByReferenceIDRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

