/*
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T15:09:18.638874Z[Etc/UTC]")
public class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_DATA_HEX = "dataHex";
  @SerializedName(SERIALIZED_NAME_DATA_HEX)
  private String dataHex;

  public static final String SERIALIZED_NAME_DERIVATION_INDEX = "derivationIndex";
  @SerializedName(SERIALIZED_NAME_DERIVATION_INDEX)
  private Long derivationIndex;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee fee;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_SIG_HASH = "sigHash";
  @SerializedName(SERIALIZED_NAME_SIG_HASH)
  private String sigHash;

  /**
   * Representation of the transaction type
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    LEGACY_TRANSACTION("legacy-transaction");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private TransactionTypeEnum transactionType;

  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI() { 
  }

  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Representation of the amount of the transaction
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "30000000000000", required = true, value = "Representation of the amount of the transaction")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI dataHex(String dataHex) {
    
    this.dataHex = dataHex;
    return this;
  }

   /**
   * Representation of the data in hex value
   * @return dataHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x0079006f00750072004100640064006900740069006f006e0061006c00440061007400610048006500720065", required = true, value = "Representation of the data in hex value")

  public String getDataHex() {
    return dataHex;
  }


  public void setDataHex(String dataHex) {
    this.dataHex = dataHex;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI derivationIndex(Long derivationIndex) {
    
    this.derivationIndex = derivationIndex;
    return this;
  }

   /**
   * Representation of the derivation index of the xpub address
   * @return derivationIndex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Representation of the derivation index of the xpub address")

  public Long getDerivationIndex() {
    return derivationIndex;
  }


  public void setDerivationIndex(Long derivationIndex) {
    this.derivationIndex = derivationIndex;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI fee(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee getFee() {
    return fee;
  }


  public void setFee(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee fee) {
    this.fee = fee;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender&#39;s address.
   * @return nonce
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI recipient(String recipient) {
    
    this.recipient = recipient;
    return this;
  }

   /**
   * Represents a recipient addresses. In account-based protocols like Ethereum there is only one address in this list.
   * @return recipient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x041c594a0cc194e826bef5411b29c7f27001b7e3", required = true, value = "Represents a recipient addresses. In account-based protocols like Ethereum there is only one address in this list.")

  public String getRecipient() {
    return recipient;
  }


  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI sender(String sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Represents a sender address. In account-based protocols like Ethereum there is only one address in this list.
   * @return sender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0x03654A9E78771442CAdf8DB37ae60D6a12bAEa9f", required = true, value = "Represents a sender address. In account-based protocols like Ethereum there is only one address in this list.")

  public String getSender() {
    return sender;
  }


  public void setSender(String sender) {
    this.sender = sender;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI sigHash(String sigHash) {
    
    this.sigHash = sigHash;
    return this;
  }

   /**
   * Representation of the hash that should be signed.
   * @return sigHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "40738814e379fd2b1923729c87ac80dddc6810a3f8f02fef05452251972ec83a", required = true, value = "Representation of the hash that should be signed.")

  public String getSigHash() {
    return sigHash;
  }


  public void setSigHash(String sigHash) {
    this.sigHash = sigHash;
  }


  public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI transactionType(TransactionTypeEnum transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Representation of the transaction type
   * @return transactionType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Representation of the transaction type")

  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI = (PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI) o;
    return Objects.equals(this.amount, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.amount) &&
        Objects.equals(this.dataHex, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.dataHex) &&
        Objects.equals(this.derivationIndex, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.derivationIndex) &&
        Objects.equals(this.fee, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.fee) &&
        Objects.equals(this.nonce, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.nonce) &&
        Objects.equals(this.recipient, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.recipient) &&
        Objects.equals(this.sender, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.sender) &&
        Objects.equals(this.sigHash, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.sigHash) &&
        Objects.equals(this.transactionType, prepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, dataHex, derivationIndex, fee, nonce, recipient, sender, sigHash, transactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    dataHex: ").append(toIndentedString(dataHex)).append("\n");
    sb.append("    derivationIndex: ").append(toIndentedString(derivationIndex)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    sigHash: ").append(toIndentedString(sigHash)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("dataHex");
    openapiFields.add("derivationIndex");
    openapiFields.add("fee");
    openapiFields.add("nonce");
    openapiFields.add("recipient");
    openapiFields.add("sender");
    openapiFields.add("sigHash");
    openapiFields.add("transactionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("dataHex");
    openapiRequiredFields.add("derivationIndex");
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("nonce");
    openapiRequiredFields.add("recipient");
    openapiRequiredFields.add("sender");
    openapiRequiredFields.add("sigHash");
    openapiRequiredFields.add("transactionType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI is not found in the empty JSON string", PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (jsonObj.get("dataHex") != null && !jsonObj.get("dataHex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataHex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataHex").toString()));
      }
      // validate the optional field `fee`
      if (jsonObj.getAsJsonObject("fee") != null) {
        PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIFee.validateJsonObject(jsonObj.getAsJsonObject("fee"));
      }
      if (jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if (jsonObj.get("sigHash") != null && !jsonObj.get("sigHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sigHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sigHash").toString()));
      }
      if (jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.class));

       return (TypeAdapter<T>) new TypeAdapter<PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI>() {
           @Override
           public void write(JsonWriter out, PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI
  * @throws IOException if the JSON string is invalid with respect to PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI
  */
  public static PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI.class);
  }

 /**
  * Convert an instance of PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

