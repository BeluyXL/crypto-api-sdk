/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.GetAddressDetailsFromCallbackRITotalReceived;
import org.openapitools.client.model.GetAddressDetailsFromCallbackRITotalSpent;
import org.openapitools.client.model.GetAddressDetailsRIConfirmedBalance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetAddressDetailsFromCallbackRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class GetAddressDetailsFromCallbackRI {
  public static final String SERIALIZED_NAME_INCOMING_TRANSACTIONS_COUNT = "incomingTransactionsCount";
  @SerializedName(SERIALIZED_NAME_INCOMING_TRANSACTIONS_COUNT)
  private Integer incomingTransactionsCount;

  public static final String SERIALIZED_NAME_OUTGOING_TRANSACTIONS_COUNT = "outgoingTransactionsCount";
  @SerializedName(SERIALIZED_NAME_OUTGOING_TRANSACTIONS_COUNT)
  private Integer outgoingTransactionsCount;

  public static final String SERIALIZED_NAME_TRANSACTIONS_COUNT = "transactionsCount";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_COUNT)
  private Integer transactionsCount;

  public static final String SERIALIZED_NAME_CONFIRMED_BALANCE = "confirmedBalance";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_BALANCE)
  private GetAddressDetailsRIConfirmedBalance confirmedBalance;

  public static final String SERIALIZED_NAME_TOTAL_RECEIVED = "totalReceived";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIVED)
  private GetAddressDetailsFromCallbackRITotalReceived totalReceived;

  public static final String SERIALIZED_NAME_TOTAL_SPENT = "totalSpent";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPENT)
  private GetAddressDetailsFromCallbackRITotalSpent totalSpent;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Long sequence;

  public GetAddressDetailsFromCallbackRI() { 
  }

  public GetAddressDetailsFromCallbackRI incomingTransactionsCount(Integer incomingTransactionsCount) {
    
    this.incomingTransactionsCount = incomingTransactionsCount;
    return this;
  }

   /**
   * Defines the count of the incoming transactions.
   * @return incomingTransactionsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "Defines the count of the incoming transactions.")

  public Integer getIncomingTransactionsCount() {
    return incomingTransactionsCount;
  }


  public void setIncomingTransactionsCount(Integer incomingTransactionsCount) {
    this.incomingTransactionsCount = incomingTransactionsCount;
  }


  public GetAddressDetailsFromCallbackRI outgoingTransactionsCount(Integer outgoingTransactionsCount) {
    
    this.outgoingTransactionsCount = outgoingTransactionsCount;
    return this;
  }

   /**
   * Defines the count of the outgoing transactions.
   * @return outgoingTransactionsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "Defines the count of the outgoing transactions.")

  public Integer getOutgoingTransactionsCount() {
    return outgoingTransactionsCount;
  }


  public void setOutgoingTransactionsCount(Integer outgoingTransactionsCount) {
    this.outgoingTransactionsCount = outgoingTransactionsCount;
  }


  public GetAddressDetailsFromCallbackRI transactionsCount(Integer transactionsCount) {
    
    this.transactionsCount = transactionsCount;
    return this;
  }

   /**
   * Represents the total number of confirmed coins transactions for this address, both incoming and outgoing. Applies for coins only **and not** tokens transfers e.g. for Ethereum. &#x60;transactionsCount&#x60; could result as less than incoming and outgoing transactions put together (e.g. in Bitcoin), due to the fact that one and the same address could be in senders and receivers addresses.
   * @return transactionsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "Represents the total number of confirmed coins transactions for this address, both incoming and outgoing. Applies for coins only **and not** tokens transfers e.g. for Ethereum. `transactionsCount` could result as less than incoming and outgoing transactions put together (e.g. in Bitcoin), due to the fact that one and the same address could be in senders and receivers addresses.")

  public Integer getTransactionsCount() {
    return transactionsCount;
  }


  public void setTransactionsCount(Integer transactionsCount) {
    this.transactionsCount = transactionsCount;
  }


  public GetAddressDetailsFromCallbackRI confirmedBalance(GetAddressDetailsRIConfirmedBalance confirmedBalance) {
    
    this.confirmedBalance = confirmedBalance;
    return this;
  }

   /**
   * Get confirmedBalance
   * @return confirmedBalance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GetAddressDetailsRIConfirmedBalance getConfirmedBalance() {
    return confirmedBalance;
  }


  public void setConfirmedBalance(GetAddressDetailsRIConfirmedBalance confirmedBalance) {
    this.confirmedBalance = confirmedBalance;
  }


  public GetAddressDetailsFromCallbackRI totalReceived(GetAddressDetailsFromCallbackRITotalReceived totalReceived) {
    
    this.totalReceived = totalReceived;
    return this;
  }

   /**
   * Get totalReceived
   * @return totalReceived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GetAddressDetailsFromCallbackRITotalReceived getTotalReceived() {
    return totalReceived;
  }


  public void setTotalReceived(GetAddressDetailsFromCallbackRITotalReceived totalReceived) {
    this.totalReceived = totalReceived;
  }


  public GetAddressDetailsFromCallbackRI totalSpent(GetAddressDetailsFromCallbackRITotalSpent totalSpent) {
    
    this.totalSpent = totalSpent;
    return this;
  }

   /**
   * Get totalSpent
   * @return totalSpent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GetAddressDetailsFromCallbackRITotalSpent getTotalSpent() {
    return totalSpent;
  }


  public void setTotalSpent(GetAddressDetailsFromCallbackRITotalSpent totalSpent) {
    this.totalSpent = totalSpent;
  }


  public GetAddressDetailsFromCallbackRI sequence(Long sequence) {
    
    this.sequence = sequence;
    return this;
  }

   /**
   * Defines the transaction input&#39;s sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.
   * @return sequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "25648975", value = "Defines the transaction input's sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.")

  public Long getSequence() {
    return sequence;
  }


  public void setSequence(Long sequence) {
    this.sequence = sequence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAddressDetailsFromCallbackRI getAddressDetailsFromCallbackRI = (GetAddressDetailsFromCallbackRI) o;
    return Objects.equals(this.incomingTransactionsCount, getAddressDetailsFromCallbackRI.incomingTransactionsCount) &&
        Objects.equals(this.outgoingTransactionsCount, getAddressDetailsFromCallbackRI.outgoingTransactionsCount) &&
        Objects.equals(this.transactionsCount, getAddressDetailsFromCallbackRI.transactionsCount) &&
        Objects.equals(this.confirmedBalance, getAddressDetailsFromCallbackRI.confirmedBalance) &&
        Objects.equals(this.totalReceived, getAddressDetailsFromCallbackRI.totalReceived) &&
        Objects.equals(this.totalSpent, getAddressDetailsFromCallbackRI.totalSpent) &&
        Objects.equals(this.sequence, getAddressDetailsFromCallbackRI.sequence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(incomingTransactionsCount, outgoingTransactionsCount, transactionsCount, confirmedBalance, totalReceived, totalSpent, sequence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAddressDetailsFromCallbackRI {\n");
    sb.append("    incomingTransactionsCount: ").append(toIndentedString(incomingTransactionsCount)).append("\n");
    sb.append("    outgoingTransactionsCount: ").append(toIndentedString(outgoingTransactionsCount)).append("\n");
    sb.append("    transactionsCount: ").append(toIndentedString(transactionsCount)).append("\n");
    sb.append("    confirmedBalance: ").append(toIndentedString(confirmedBalance)).append("\n");
    sb.append("    totalReceived: ").append(toIndentedString(totalReceived)).append("\n");
    sb.append("    totalSpent: ").append(toIndentedString(totalSpent)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("incomingTransactionsCount");
    openapiFields.add("outgoingTransactionsCount");
    openapiFields.add("transactionsCount");
    openapiFields.add("confirmedBalance");
    openapiFields.add("totalReceived");
    openapiFields.add("totalSpent");
    openapiFields.add("sequence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("incomingTransactionsCount");
    openapiRequiredFields.add("outgoingTransactionsCount");
    openapiRequiredFields.add("transactionsCount");
    openapiRequiredFields.add("confirmedBalance");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetAddressDetailsFromCallbackRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetAddressDetailsFromCallbackRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAddressDetailsFromCallbackRI is not found in the empty JSON string", GetAddressDetailsFromCallbackRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetAddressDetailsFromCallbackRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAddressDetailsFromCallbackRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetAddressDetailsFromCallbackRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `confirmedBalance`
      if (jsonObj.getAsJsonObject("confirmedBalance") != null) {
        GetAddressDetailsRIConfirmedBalance.validateJsonObject(jsonObj.getAsJsonObject("confirmedBalance"));
      }
      // validate the optional field `totalReceived`
      if (jsonObj.getAsJsonObject("totalReceived") != null) {
        GetAddressDetailsFromCallbackRITotalReceived.validateJsonObject(jsonObj.getAsJsonObject("totalReceived"));
      }
      // validate the optional field `totalSpent`
      if (jsonObj.getAsJsonObject("totalSpent") != null) {
        GetAddressDetailsFromCallbackRITotalSpent.validateJsonObject(jsonObj.getAsJsonObject("totalSpent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAddressDetailsFromCallbackRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAddressDetailsFromCallbackRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAddressDetailsFromCallbackRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAddressDetailsFromCallbackRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAddressDetailsFromCallbackRI>() {
           @Override
           public void write(JsonWriter out, GetAddressDetailsFromCallbackRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAddressDetailsFromCallbackRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetAddressDetailsFromCallbackRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAddressDetailsFromCallbackRI
  * @throws IOException if the JSON string is invalid with respect to GetAddressDetailsFromCallbackRI
  */
  public static GetAddressDetailsFromCallbackRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAddressDetailsFromCallbackRI.class);
  }

 /**
  * Convert an instance of GetAddressDetailsFromCallbackRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

