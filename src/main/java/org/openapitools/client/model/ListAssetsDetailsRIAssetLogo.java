/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * Defines the logo of the asset.
 */
@ApiModel(description = "Defines the logo of the asset.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class ListAssetsDetailsRIAssetLogo {
  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_IMAGE_DATA = "imageData";
  @SerializedName(SERIALIZED_NAME_IMAGE_DATA)
  private String imageData;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public ListAssetsDetailsRIAssetLogo() { 
  }

  public ListAssetsDetailsRIAssetLogo encoding(String encoding) {
    
    this.encoding = encoding;
    return this;
  }

   /**
   * Defines the encoding of the image data which is usually base64.
   * @return encoding
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "base64", required = true, value = "Defines the encoding of the image data which is usually base64.")

  public String getEncoding() {
    return encoding;
  }


  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public ListAssetsDetailsRIAssetLogo imageData(String imageData) {
    
    this.imageData = imageData;
    return this;
  }

   /**
   * Defines the encoded image data as a string.
   * @return imageData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIzMiIgaGVpZ2h0PSIzMiI+PGcgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJldmVub2RkIj48Y2lyY2xlIGN4PSIxNiIgY3k9IjE2IiByPSIxNiIgZmlsbD0iIzYyN0VFQSIvPjxnIGZpbGw9IiNGRkYiIGZpbGwtcnVsZT0ibm9uemVybyI+PHBhdGggZmlsbC1vcGFjaXR5PSIuNjAyIiBkPSJNMTYuNDk4IDR2OC44N2w3LjQ5NyAzLjM1eiIvPjxwYXRoIGQ9Ik0xNi40OTggNEw5IDE2LjIybDcuNDk4LTMuMzV6Ii8+PHBhdGggZmlsbC1vcGFjaXR5PSIuNjAyIiBkPSJNMTYuNDk4IDIxLjk2OHY2LjAyN0wyNCAxNy42MTZ6Ii8+PHBhdGggZD0iTTE2LjQ5OCAyNy45OTV2LTYuMDI4TDkgMTcuNjE2eiIvPjxwYXRoIGZpbGwtb3BhY2l0eT0iLjIiIGQ9Ik0xNi40OTggMjAuNTczbDcuNDk3LTQuMzUzLTcuNDk3LTMuMzQ4eiIvPjxwYXRoIGZpbGwtb3BhY2l0eT0iLjYwMiIgZD0iTTkgMTYuMjJsNy40OTggNC4zNTN2LTcuNzAxeiIvPjwvZz48L2c+PC9zdmc+", required = true, value = "Defines the encoded image data as a string.")

  public String getImageData() {
    return imageData;
  }


  public void setImageData(String imageData) {
    this.imageData = imageData;
  }


  public ListAssetsDetailsRIAssetLogo mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Defines the image type of the logo - jpg, png, svg, etc.
   * @return mimeType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "\"image/svg+xml\"", required = true, value = "Defines the image type of the logo - jpg, png, svg, etc.")

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAssetsDetailsRIAssetLogo listAssetsDetailsRIAssetLogo = (ListAssetsDetailsRIAssetLogo) o;
    return Objects.equals(this.encoding, listAssetsDetailsRIAssetLogo.encoding) &&
        Objects.equals(this.imageData, listAssetsDetailsRIAssetLogo.imageData) &&
        Objects.equals(this.mimeType, listAssetsDetailsRIAssetLogo.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encoding, imageData, mimeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAssetsDetailsRIAssetLogo {\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    imageData: ").append(toIndentedString(imageData)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encoding");
    openapiFields.add("imageData");
    openapiFields.add("mimeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("encoding");
    openapiRequiredFields.add("imageData");
    openapiRequiredFields.add("mimeType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAssetsDetailsRIAssetLogo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListAssetsDetailsRIAssetLogo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAssetsDetailsRIAssetLogo is not found in the empty JSON string", ListAssetsDetailsRIAssetLogo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAssetsDetailsRIAssetLogo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAssetsDetailsRIAssetLogo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAssetsDetailsRIAssetLogo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if (jsonObj.get("imageData") != null && !jsonObj.get("imageData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageData").toString()));
      }
      if (jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAssetsDetailsRIAssetLogo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAssetsDetailsRIAssetLogo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAssetsDetailsRIAssetLogo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAssetsDetailsRIAssetLogo.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAssetsDetailsRIAssetLogo>() {
           @Override
           public void write(JsonWriter out, ListAssetsDetailsRIAssetLogo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAssetsDetailsRIAssetLogo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAssetsDetailsRIAssetLogo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAssetsDetailsRIAssetLogo
  * @throws IOException if the JSON string is invalid with respect to ListAssetsDetailsRIAssetLogo
  */
  public static ListAssetsDetailsRIAssetLogo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAssetsDetailsRIAssetLogo.class);
  }

 /**
  * Convert an instance of ListAssetsDetailsRIAssetLogo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

