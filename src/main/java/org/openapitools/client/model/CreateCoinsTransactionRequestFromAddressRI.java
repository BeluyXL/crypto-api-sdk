/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddressRIRecipients;
import org.openapitools.client.model.CreateCoinsTransactionRequestFromAddressRISenders;

/**
 * CreateCoinsTransactionRequestFromAddressRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-07-20T13:36:32.071127Z[Etc/UTC]")
public class CreateCoinsTransactionRequestFromAddressRI {
  /**
   * Represents the fee priority of the automation, whether it is \&quot;slow\&quot;, \&quot;standard\&quot; or \&quot;fast\&quot;.
   */
  @JsonAdapter(FeePriorityEnum.Adapter.class)
  public enum FeePriorityEnum {
    SLOW("slow"),
    
    STANDARD("standard"),
    
    FAST("fast");

    private String value;

    FeePriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeePriorityEnum fromValue(String value) {
      for (FeePriorityEnum b : FeePriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeePriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeePriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeePriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeePriorityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEE_PRIORITY = "feePriority";
  @SerializedName(SERIALIZED_NAME_FEE_PRIORITY)
  private FeePriorityEnum feePriority;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<CreateCoinsTransactionRequestFromAddressRIRecipients> recipients = new ArrayList<CreateCoinsTransactionRequestFromAddressRIRecipients>();

  public static final String SERIALIZED_NAME_SENDERS = "senders";
  @SerializedName(SERIALIZED_NAME_SENDERS)
  private CreateCoinsTransactionRequestFromAddressRISenders senders;

  /**
   * Defines the status of the transaction request, e.g. \&quot;created, \&quot;await_approval\&quot;, \&quot;pending\&quot;, \&quot;prepared\&quot;, \&quot;signed\&quot;, \&quot;broadcasted\&quot;, \&quot;success\&quot;, \&quot;failed\&quot;, \&quot;rejected\&quot;, mined\&quot;.
   */
  @JsonAdapter(TransactionRequestStatusEnum.Adapter.class)
  public enum TransactionRequestStatusEnum {
    CREATED("created"),
    
    AWAIT_APPROVAL("await-approval"),
    
    PENDING("pending"),
    
    PREPARED("prepared"),
    
    SIGNED("signed"),
    
    BROADCASTED("broadcasted"),
    
    SUCCESS("success"),
    
    FAILED("failed"),
    
    REJECTED("rejected"),
    
    MINED("mined");

    private String value;

    TransactionRequestStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionRequestStatusEnum fromValue(String value) {
      for (TransactionRequestStatusEnum b : TransactionRequestStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionRequestStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionRequestStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionRequestStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionRequestStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_REQUEST_STATUS = "transactionRequestStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REQUEST_STATUS)
  private TransactionRequestStatusEnum transactionRequestStatus;


  public CreateCoinsTransactionRequestFromAddressRI feePriority(FeePriorityEnum feePriority) {
    
    this.feePriority = feePriority;
    return this;
  }

   /**
   * Represents the fee priority of the automation, whether it is \&quot;slow\&quot;, \&quot;standard\&quot; or \&quot;fast\&quot;.
   * @return feePriority
  **/
  @ApiModelProperty(example = "standard", required = true, value = "Represents the fee priority of the automation, whether it is \"slow\", \"standard\" or \"fast\".")

  public FeePriorityEnum getFeePriority() {
    return feePriority;
  }


  public void setFeePriority(FeePriorityEnum feePriority) {
    this.feePriority = feePriority;
  }


  public CreateCoinsTransactionRequestFromAddressRI recipients(List<CreateCoinsTransactionRequestFromAddressRIRecipients> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public CreateCoinsTransactionRequestFromAddressRI addRecipientsItem(CreateCoinsTransactionRequestFromAddressRIRecipients recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Defines the destination for the transaction, i.e. the recipient(s).
   * @return recipients
  **/
  @ApiModelProperty(required = true, value = "Defines the destination for the transaction, i.e. the recipient(s).")

  public List<CreateCoinsTransactionRequestFromAddressRIRecipients> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<CreateCoinsTransactionRequestFromAddressRIRecipients> recipients) {
    this.recipients = recipients;
  }


  public CreateCoinsTransactionRequestFromAddressRI senders(CreateCoinsTransactionRequestFromAddressRISenders senders) {
    
    this.senders = senders;
    return this;
  }

   /**
   * Get senders
   * @return senders
  **/
  @ApiModelProperty(required = true, value = "")

  public CreateCoinsTransactionRequestFromAddressRISenders getSenders() {
    return senders;
  }


  public void setSenders(CreateCoinsTransactionRequestFromAddressRISenders senders) {
    this.senders = senders;
  }


  public CreateCoinsTransactionRequestFromAddressRI transactionRequestStatus(TransactionRequestStatusEnum transactionRequestStatus) {
    
    this.transactionRequestStatus = transactionRequestStatus;
    return this;
  }

   /**
   * Defines the status of the transaction request, e.g. \&quot;created, \&quot;await_approval\&quot;, \&quot;pending\&quot;, \&quot;prepared\&quot;, \&quot;signed\&quot;, \&quot;broadcasted\&quot;, \&quot;success\&quot;, \&quot;failed\&quot;, \&quot;rejected\&quot;, mined\&quot;.
   * @return transactionRequestStatus
  **/
  @ApiModelProperty(example = "created", required = true, value = "Defines the status of the transaction request, e.g. \"created, \"await_approval\", \"pending\", \"prepared\", \"signed\", \"broadcasted\", \"success\", \"failed\", \"rejected\", mined\".")

  public TransactionRequestStatusEnum getTransactionRequestStatus() {
    return transactionRequestStatus;
  }


  public void setTransactionRequestStatus(TransactionRequestStatusEnum transactionRequestStatus) {
    this.transactionRequestStatus = transactionRequestStatus;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCoinsTransactionRequestFromAddressRI createCoinsTransactionRequestFromAddressRI = (CreateCoinsTransactionRequestFromAddressRI) o;
    return Objects.equals(this.feePriority, createCoinsTransactionRequestFromAddressRI.feePriority) &&
        Objects.equals(this.recipients, createCoinsTransactionRequestFromAddressRI.recipients) &&
        Objects.equals(this.senders, createCoinsTransactionRequestFromAddressRI.senders) &&
        Objects.equals(this.transactionRequestStatus, createCoinsTransactionRequestFromAddressRI.transactionRequestStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feePriority, recipients, senders, transactionRequestStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCoinsTransactionRequestFromAddressRI {\n");
    sb.append("    feePriority: ").append(toIndentedString(feePriority)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    senders: ").append(toIndentedString(senders)).append("\n");
    sb.append("    transactionRequestStatus: ").append(toIndentedString(transactionRequestStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

