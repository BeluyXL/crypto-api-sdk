/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetTransactionRequestDetailsRIRecipientsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.cryptoapis.sdk.JSON;

/**
 * GetTransactionRequestDetailsRI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-24T14:43:47.118671Z[Etc/UTC]")
public class GetTransactionRequestDetailsRI {
  public static final String SERIALIZED_NAME_ADDITIONAL_DETAILS = "additionalDetails";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DETAILS)
  private String additionalDetails;

  /**
   * Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
   */
  @JsonAdapter(BlockchainEnum.Adapter.class)
  public enum BlockchainEnum {
    BITCOIN("bitcoin"),
    
    BITCOIN_CASH("bitcoin-cash"),
    
    LITECOIN("litecoin"),
    
    DOGECOIN("dogecoin"),
    
    DASH("dash"),
    
    ETHEREUM("ethereum"),
    
    ETHEREUM_CLASSIC("ethereum-classic"),
    
    XRP("xrp"),
    
    ZCASH("zcash");

    private String value;

    BlockchainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlockchainEnum fromValue(String value) {
      for (BlockchainEnum b : BlockchainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlockchainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlockchainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlockchainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlockchainEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private BlockchainEnum blockchain;

  /**
   * Defines the priority for the fee, if it is \&quot;slow\&quot;, \&quot;standard\&quot; or \&quot;fast\&quot;.
   */
  @JsonAdapter(FeePriorityEnum.Adapter.class)
  public enum FeePriorityEnum {
    SLOW("slow"),
    
    STANDARD("standard"),
    
    FAST("fast");

    private String value;

    FeePriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeePriorityEnum fromValue(String value) {
      for (FeePriorityEnum b : FeePriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeePriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeePriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeePriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeePriorityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEE_PRIORITY = "feePriority";
  @SerializedName(SERIALIZED_NAME_FEE_PRIORITY)
  private FeePriorityEnum feePriority;

  /**
   * Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    MAINNET("mainnet"),
    
    TESTNET("testnet"),
    
    ROPSTEN("ropsten"),
    
    MORDOR("mordor");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String value) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkEnum network;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<GetTransactionRequestDetailsRIRecipientsInner> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_TRANSACTION_AMOUNT = "totalTransactionAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRANSACTION_AMOUNT)
  private String totalTransactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * Defines the status of the transaction request, e.g. pending.
   */
  @JsonAdapter(TransactionRequestStatusEnum.Adapter.class)
  public enum TransactionRequestStatusEnum {
    CREATED("created"),
    
    AWAIT_APPROVAL("await-approval"),
    
    PENDING("pending"),
    
    PREPARED("prepared"),
    
    SIGNED("signed"),
    
    BROADCASTED("broadcasted"),
    
    SUCCESS("success"),
    
    FAILED("failed"),
    
    REJECTED("rejected"),
    
    MINED("mined");

    private String value;

    TransactionRequestStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionRequestStatusEnum fromValue(String value) {
      for (TransactionRequestStatusEnum b : TransactionRequestStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionRequestStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionRequestStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionRequestStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionRequestStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_REQUEST_STATUS = "transactionRequestStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REQUEST_STATUS)
  private TransactionRequestStatusEnum transactionRequestStatus;

  /**
   * Defines the transaction type, if it is for coins or tokens.
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    COIN("coin"),
    
    TOKEN("token");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private TransactionTypeEnum transactionType;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public GetTransactionRequestDetailsRI() { 
  }

  public GetTransactionRequestDetailsRI additionalDetails(String additionalDetails) {
    
    this.additionalDetails = additionalDetails;
    return this;
  }

   /**
   * Defines an optional note for additional details.
   * @return additionalDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "yourExampleStringHere", required = true, value = "Defines an optional note for additional details.")

  public String getAdditionalDetails() {
    return additionalDetails;
  }


  public void setAdditionalDetails(String additionalDetails) {
    this.additionalDetails = additionalDetails;
  }


  public GetTransactionRequestDetailsRI blockchain(BlockchainEnum blockchain) {
    
    this.blockchain = blockchain;
    return this;
  }

   /**
   * Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
   * @return blockchain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bitcoin", required = true, value = "Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")

  public BlockchainEnum getBlockchain() {
    return blockchain;
  }


  public void setBlockchain(BlockchainEnum blockchain) {
    this.blockchain = blockchain;
  }


  public GetTransactionRequestDetailsRI feePriority(FeePriorityEnum feePriority) {
    
    this.feePriority = feePriority;
    return this;
  }

   /**
   * Defines the priority for the fee, if it is \&quot;slow\&quot;, \&quot;standard\&quot; or \&quot;fast\&quot;.
   * @return feePriority
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "standard", required = true, value = "Defines the priority for the fee, if it is \"slow\", \"standard\" or \"fast\".")

  public FeePriorityEnum getFeePriority() {
    return feePriority;
  }


  public void setFeePriority(FeePriorityEnum feePriority) {
    this.feePriority = feePriority;
  }


  public GetTransactionRequestDetailsRI network(NetworkEnum network) {
    
    this.network = network;
    return this;
  }

   /**
   * Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
   * @return network
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "testnet", required = true, value = "Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.")

  public NetworkEnum getNetwork() {
    return network;
  }


  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }


  public GetTransactionRequestDetailsRI recipients(List<GetTransactionRequestDetailsRIRecipientsInner> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public GetTransactionRequestDetailsRI addRecipientsItem(GetTransactionRequestDetailsRIRecipientsInner recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
   * @return recipients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")

  public List<GetTransactionRequestDetailsRIRecipientsInner> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<GetTransactionRequestDetailsRIRecipientsInner> recipients) {
    this.recipients = recipients;
  }


  public GetTransactionRequestDetailsRI totalTransactionAmount(String totalTransactionAmount) {
    
    this.totalTransactionAmount = totalTransactionAmount;
    return this;
  }

   /**
   * Defines the total transaction amount.
   * @return totalTransactionAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.001", required = true, value = "Defines the total transaction amount.")

  public String getTotalTransactionAmount() {
    return totalTransactionAmount;
  }


  public void setTotalTransactionAmount(String totalTransactionAmount) {
    this.totalTransactionAmount = totalTransactionAmount;
  }


  public GetTransactionRequestDetailsRI transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "61922aa68f192800067a8404", value = "Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public GetTransactionRequestDetailsRI transactionRequestStatus(TransactionRequestStatusEnum transactionRequestStatus) {
    
    this.transactionRequestStatus = transactionRequestStatus;
    return this;
  }

   /**
   * Defines the status of the transaction request, e.g. pending.
   * @return transactionRequestStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "created", required = true, value = "Defines the status of the transaction request, e.g. pending.")

  public TransactionRequestStatusEnum getTransactionRequestStatus() {
    return transactionRequestStatus;
  }


  public void setTransactionRequestStatus(TransactionRequestStatusEnum transactionRequestStatus) {
    this.transactionRequestStatus = transactionRequestStatus;
  }


  public GetTransactionRequestDetailsRI transactionType(TransactionTypeEnum transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Defines the transaction type, if it is for coins or tokens.
   * @return transactionType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "coin", required = true, value = "Defines the transaction type, if it is for coins or tokens.")

  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }


  public GetTransactionRequestDetailsRI unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Defines the unit of the amount.
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTC", required = true, value = "Defines the unit of the amount.")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    this.unit = unit;
  }


  public GetTransactionRequestDetailsRI walletId(String walletId) {
    
    this.walletId = walletId;
    return this;
  }

   /**
   * Defines the unique ID of the Wallet.
   * @return walletId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "60c9d9921c38030006675ff6", required = true, value = "Defines the unique ID of the Wallet.")

  public String getWalletId() {
    return walletId;
  }


  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTransactionRequestDetailsRI getTransactionRequestDetailsRI = (GetTransactionRequestDetailsRI) o;
    return Objects.equals(this.additionalDetails, getTransactionRequestDetailsRI.additionalDetails) &&
        Objects.equals(this.blockchain, getTransactionRequestDetailsRI.blockchain) &&
        Objects.equals(this.feePriority, getTransactionRequestDetailsRI.feePriority) &&
        Objects.equals(this.network, getTransactionRequestDetailsRI.network) &&
        Objects.equals(this.recipients, getTransactionRequestDetailsRI.recipients) &&
        Objects.equals(this.totalTransactionAmount, getTransactionRequestDetailsRI.totalTransactionAmount) &&
        Objects.equals(this.transactionId, getTransactionRequestDetailsRI.transactionId) &&
        Objects.equals(this.transactionRequestStatus, getTransactionRequestDetailsRI.transactionRequestStatus) &&
        Objects.equals(this.transactionType, getTransactionRequestDetailsRI.transactionType) &&
        Objects.equals(this.unit, getTransactionRequestDetailsRI.unit) &&
        Objects.equals(this.walletId, getTransactionRequestDetailsRI.walletId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalDetails, blockchain, feePriority, network, recipients, totalTransactionAmount, transactionId, transactionRequestStatus, transactionType, unit, walletId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTransactionRequestDetailsRI {\n");
    sb.append("    additionalDetails: ").append(toIndentedString(additionalDetails)).append("\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    feePriority: ").append(toIndentedString(feePriority)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    totalTransactionAmount: ").append(toIndentedString(totalTransactionAmount)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionRequestStatus: ").append(toIndentedString(transactionRequestStatus)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalDetails");
    openapiFields.add("blockchain");
    openapiFields.add("feePriority");
    openapiFields.add("network");
    openapiFields.add("recipients");
    openapiFields.add("totalTransactionAmount");
    openapiFields.add("transactionId");
    openapiFields.add("transactionRequestStatus");
    openapiFields.add("transactionType");
    openapiFields.add("unit");
    openapiFields.add("walletId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalDetails");
    openapiRequiredFields.add("blockchain");
    openapiRequiredFields.add("feePriority");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("totalTransactionAmount");
    openapiRequiredFields.add("transactionRequestStatus");
    openapiRequiredFields.add("transactionType");
    openapiRequiredFields.add("unit");
    openapiRequiredFields.add("walletId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetTransactionRequestDetailsRI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetTransactionRequestDetailsRI.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTransactionRequestDetailsRI is not found in the empty JSON string", GetTransactionRequestDetailsRI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetTransactionRequestDetailsRI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTransactionRequestDetailsRI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTransactionRequestDetailsRI.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalDetails") != null && !jsonObj.get("additionalDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalDetails").toString()));
      }
      if (jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if (jsonObj.get("feePriority") != null && !jsonObj.get("feePriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePriority").toString()));
      }
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
      if (jsonArrayrecipients != null) {
        // ensure the json data is an array
        if (!jsonObj.get("recipients").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
        }

        // validate the optional field `recipients` (array)
        for (int i = 0; i < jsonArrayrecipients.size(); i++) {
          GetTransactionRequestDetailsRIRecipientsInner.validateJsonObject(jsonArrayrecipients.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("totalTransactionAmount") != null && !jsonObj.get("totalTransactionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalTransactionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalTransactionAmount").toString()));
      }
      if (jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (jsonObj.get("transactionRequestStatus") != null && !jsonObj.get("transactionRequestStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionRequestStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionRequestStatus").toString()));
      }
      if (jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTransactionRequestDetailsRI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTransactionRequestDetailsRI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTransactionRequestDetailsRI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionRequestDetailsRI.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTransactionRequestDetailsRI>() {
           @Override
           public void write(JsonWriter out, GetTransactionRequestDetailsRI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTransactionRequestDetailsRI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetTransactionRequestDetailsRI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetTransactionRequestDetailsRI
  * @throws IOException if the JSON string is invalid with respect to GetTransactionRequestDetailsRI
  */
  public static GetTransactionRequestDetailsRI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTransactionRequestDetailsRI.class);
  }

 /**
  * Convert an instance of GetTransactionRequestDetailsRI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

