/*
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GetTransactionDetailsByTransactionIDRIBSZVShieldedSpend;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSB;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSBC;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSBSC;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSBSCGasPrice;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSD;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSD2;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSE;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSEC;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSL;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSZ;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSZVJoinSplit;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSZVShieldedOutput;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSZVin;
import org.openapitools.client.model.ListTransactionsByBlockHeightRIBSZVout;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import io.cryptoapis.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-26T12:50:48.005281Z[Etc/UTC]")
public class ListTransactionsByBlockHeightRIBS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ListTransactionsByBlockHeightRIBS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListTransactionsByBlockHeightRIBS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListTransactionsByBlockHeightRIBS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListTransactionsByBlockHeightRIBSB> adapterListTransactionsByBlockHeightRIBSB = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSB.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSBC> adapterListTransactionsByBlockHeightRIBSBC = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSBC.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSBSC> adapterListTransactionsByBlockHeightRIBSBSC = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSBSC.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSD> adapterListTransactionsByBlockHeightRIBSD = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSD.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSD2> adapterListTransactionsByBlockHeightRIBSD2 = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSD2.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSE> adapterListTransactionsByBlockHeightRIBSE = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSE.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSEC> adapterListTransactionsByBlockHeightRIBSEC = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSEC.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSL> adapterListTransactionsByBlockHeightRIBSL = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSL.class));
            final TypeAdapter<ListTransactionsByBlockHeightRIBSZ> adapterListTransactionsByBlockHeightRIBSZ = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsByBlockHeightRIBSZ.class));

            return (TypeAdapter<T>) new TypeAdapter<ListTransactionsByBlockHeightRIBS>() {
                @Override
                public void write(JsonWriter out, ListTransactionsByBlockHeightRIBS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSB`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSB) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSB.toJsonTree((ListTransactionsByBlockHeightRIBSB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSBC`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSBC) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSBC.toJsonTree((ListTransactionsByBlockHeightRIBSBC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSBSC`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSBSC) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSBSC.toJsonTree((ListTransactionsByBlockHeightRIBSBSC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSD`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSD) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSD.toJsonTree((ListTransactionsByBlockHeightRIBSD)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSD2`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSD2) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSD2.toJsonTree((ListTransactionsByBlockHeightRIBSD2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSE`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSE) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSE.toJsonTree((ListTransactionsByBlockHeightRIBSE)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSEC`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSEC) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSEC.toJsonTree((ListTransactionsByBlockHeightRIBSEC)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSL`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSL) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSL.toJsonTree((ListTransactionsByBlockHeightRIBSL)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ListTransactionsByBlockHeightRIBSZ`
                    if (value.getActualInstance() instanceof ListTransactionsByBlockHeightRIBSZ) {
                        JsonObject obj = adapterListTransactionsByBlockHeightRIBSZ.toJsonTree((ListTransactionsByBlockHeightRIBSZ)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ListTransactionsByBlockHeightRIBSB, ListTransactionsByBlockHeightRIBSBC, ListTransactionsByBlockHeightRIBSBSC, ListTransactionsByBlockHeightRIBSD, ListTransactionsByBlockHeightRIBSD2, ListTransactionsByBlockHeightRIBSE, ListTransactionsByBlockHeightRIBSEC, ListTransactionsByBlockHeightRIBSL, ListTransactionsByBlockHeightRIBSZ");
                }

                @Override
                public ListTransactionsByBlockHeightRIBS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ListTransactionsByBlockHeightRIBSB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSB.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSB'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSBC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSBC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSBC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSBC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSBC'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSBSC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSBSC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSBSC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSBSC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSBSC'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSD.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSD;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSD'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSD'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSD2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSD2.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSD2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSD2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSD2'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSE.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSE'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSEC
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSEC.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSEC;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSEC'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSEC'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSL.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSL'", e);
                    }

                    // deserialize ListTransactionsByBlockHeightRIBSZ
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListTransactionsByBlockHeightRIBSZ.validateJsonObject(jsonObject);
                        actualAdapter = adapterListTransactionsByBlockHeightRIBSZ;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListTransactionsByBlockHeightRIBSZ'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ListTransactionsByBlockHeightRIBSZ'", e);
                    }

                    if (match == 1) {
                        ListTransactionsByBlockHeightRIBS ret = new ListTransactionsByBlockHeightRIBS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ListTransactionsByBlockHeightRIBS: %d classes match result, expected 1. JSON: %s", match, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ListTransactionsByBlockHeightRIBS() {
        super("oneOf", Boolean.FALSE);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSBC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSBSC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSD o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSD2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSE o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSEC o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSL o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListTransactionsByBlockHeightRIBS(ListTransactionsByBlockHeightRIBSZ o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ListTransactionsByBlockHeightRIBSB", new GenericType<ListTransactionsByBlockHeightRIBSB>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSBC", new GenericType<ListTransactionsByBlockHeightRIBSBC>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSBSC", new GenericType<ListTransactionsByBlockHeightRIBSBSC>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSD", new GenericType<ListTransactionsByBlockHeightRIBSD>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSD2", new GenericType<ListTransactionsByBlockHeightRIBSD2>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSE", new GenericType<ListTransactionsByBlockHeightRIBSE>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSEC", new GenericType<ListTransactionsByBlockHeightRIBSEC>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSL", new GenericType<ListTransactionsByBlockHeightRIBSL>() {
        });
        schemas.put("ListTransactionsByBlockHeightRIBSZ", new GenericType<ListTransactionsByBlockHeightRIBSZ>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ListTransactionsByBlockHeightRIBS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ListTransactionsByBlockHeightRIBSB, ListTransactionsByBlockHeightRIBSBC, ListTransactionsByBlockHeightRIBSBSC, ListTransactionsByBlockHeightRIBSD, ListTransactionsByBlockHeightRIBSD2, ListTransactionsByBlockHeightRIBSE, ListTransactionsByBlockHeightRIBSEC, ListTransactionsByBlockHeightRIBSL, ListTransactionsByBlockHeightRIBSZ
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ListTransactionsByBlockHeightRIBSB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSBC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSBSC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSD2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSEC) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListTransactionsByBlockHeightRIBSZ) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ListTransactionsByBlockHeightRIBSB, ListTransactionsByBlockHeightRIBSBC, ListTransactionsByBlockHeightRIBSBSC, ListTransactionsByBlockHeightRIBSD, ListTransactionsByBlockHeightRIBSD2, ListTransactionsByBlockHeightRIBSE, ListTransactionsByBlockHeightRIBSEC, ListTransactionsByBlockHeightRIBSL, ListTransactionsByBlockHeightRIBSZ");
    }

    /**
     * Get the actual instance, which can be the following:
     * ListTransactionsByBlockHeightRIBSB, ListTransactionsByBlockHeightRIBSBC, ListTransactionsByBlockHeightRIBSBSC, ListTransactionsByBlockHeightRIBSD, ListTransactionsByBlockHeightRIBSD2, ListTransactionsByBlockHeightRIBSE, ListTransactionsByBlockHeightRIBSEC, ListTransactionsByBlockHeightRIBSL, ListTransactionsByBlockHeightRIBSZ
     *
     * @return The actual instance (ListTransactionsByBlockHeightRIBSB, ListTransactionsByBlockHeightRIBSBC, ListTransactionsByBlockHeightRIBSBSC, ListTransactionsByBlockHeightRIBSD, ListTransactionsByBlockHeightRIBSD2, ListTransactionsByBlockHeightRIBSE, ListTransactionsByBlockHeightRIBSEC, ListTransactionsByBlockHeightRIBSL, ListTransactionsByBlockHeightRIBSZ)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSB`. If the actual instance is not `ListTransactionsByBlockHeightRIBSB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSB`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSB`
     */
    public ListTransactionsByBlockHeightRIBSB getListTransactionsByBlockHeightRIBSB() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSBC`. If the actual instance is not `ListTransactionsByBlockHeightRIBSBC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSBC`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSBC`
     */
    public ListTransactionsByBlockHeightRIBSBC getListTransactionsByBlockHeightRIBSBC() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSBC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSBSC`. If the actual instance is not `ListTransactionsByBlockHeightRIBSBSC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSBSC`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSBSC`
     */
    public ListTransactionsByBlockHeightRIBSBSC getListTransactionsByBlockHeightRIBSBSC() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSBSC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSD`. If the actual instance is not `ListTransactionsByBlockHeightRIBSD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSD`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSD`
     */
    public ListTransactionsByBlockHeightRIBSD getListTransactionsByBlockHeightRIBSD() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSD)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSD2`. If the actual instance is not `ListTransactionsByBlockHeightRIBSD2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSD2`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSD2`
     */
    public ListTransactionsByBlockHeightRIBSD2 getListTransactionsByBlockHeightRIBSD2() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSD2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSE`. If the actual instance is not `ListTransactionsByBlockHeightRIBSE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSE`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSE`
     */
    public ListTransactionsByBlockHeightRIBSE getListTransactionsByBlockHeightRIBSE() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSE)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSEC`. If the actual instance is not `ListTransactionsByBlockHeightRIBSEC`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSEC`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSEC`
     */
    public ListTransactionsByBlockHeightRIBSEC getListTransactionsByBlockHeightRIBSEC() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSEC)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSL`. If the actual instance is not `ListTransactionsByBlockHeightRIBSL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSL`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSL`
     */
    public ListTransactionsByBlockHeightRIBSL getListTransactionsByBlockHeightRIBSL() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSL)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ListTransactionsByBlockHeightRIBSZ`. If the actual instance is not `ListTransactionsByBlockHeightRIBSZ`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListTransactionsByBlockHeightRIBSZ`
     * @throws ClassCastException if the instance is not `ListTransactionsByBlockHeightRIBSZ`
     */
    public ListTransactionsByBlockHeightRIBSZ getListTransactionsByBlockHeightRIBSZ() throws ClassCastException {
        return (ListTransactionsByBlockHeightRIBSZ)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListTransactionsByBlockHeightRIBS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    // validate the json string with ListTransactionsByBlockHeightRIBSB
    try {
      ListTransactionsByBlockHeightRIBSB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSBC
    try {
      ListTransactionsByBlockHeightRIBSBC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSBSC
    try {
      ListTransactionsByBlockHeightRIBSBSC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSD
    try {
      ListTransactionsByBlockHeightRIBSD.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSD2
    try {
      ListTransactionsByBlockHeightRIBSD2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSE
    try {
      ListTransactionsByBlockHeightRIBSE.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSEC
    try {
      ListTransactionsByBlockHeightRIBSEC.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSL
    try {
      ListTransactionsByBlockHeightRIBSL.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ListTransactionsByBlockHeightRIBSZ
    try {
      ListTransactionsByBlockHeightRIBSZ.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ListTransactionsByBlockHeightRIBS with oneOf schemas: ListTransactionsByBlockHeightRIBSB, ListTransactionsByBlockHeightRIBSBC, ListTransactionsByBlockHeightRIBSBSC, ListTransactionsByBlockHeightRIBSD, ListTransactionsByBlockHeightRIBSD2, ListTransactionsByBlockHeightRIBSE, ListTransactionsByBlockHeightRIBSEC, ListTransactionsByBlockHeightRIBSL, ListTransactionsByBlockHeightRIBSZ. %d class(es) match the result, expected 1. JSON: %s", validCount, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ListTransactionsByBlockHeightRIBS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListTransactionsByBlockHeightRIBS
  * @throws IOException if the JSON string is invalid with respect to ListTransactionsByBlockHeightRIBS
  */
  public static ListTransactionsByBlockHeightRIBS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTransactionsByBlockHeightRIBS.class);
  }

 /**
  * Convert an instance of ListTransactionsByBlockHeightRIBS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

